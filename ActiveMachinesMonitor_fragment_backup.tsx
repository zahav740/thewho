// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–∫–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –ü–û –¢–ï–ö–£–©–ï–ô –û–ü–ï–†–ê–¶–ò–ò
  const activeMachines: ActiveMachine[] = React.useMemo(() => {
    if (!machines) return [];

    return machines.map(machine => {
      // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞–Ω–∫–∞
      const assignedOperation = activeOperations?.find(
        (op: any) => op.machineId === parseInt(machine.id)
      );

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–ª—å—Ç—Ä—É–µ–º —Å–º–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ –¢–ï–ö–£–©–ï–ô –æ–ø–µ—Ä–∞—Ü–∏–∏
      const operationShifts = machine.currentOperationDetails 
        ? getOperationShifts(machine.id, machine.currentOperationDetails, todayShifts || [])
        : [];

      console.log(`üîç –°—Ç–∞–Ω–æ–∫ ${machine.machineName}:`, {
        currentOperation: machine.currentOperationDetails?.orderDrawingNumber,
        totalShifts: todayShifts?.filter((s: any) => s.machineId === parseInt(machine.id)).length || 0,
        operationShifts: operationShifts.length,
        operationShiftsData: operationShifts
      });

      // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ç–æ–ª—å–∫–æ –ø–æ –¢–ï–ö–£–©–ï–ô –æ–ø–µ—Ä–∞—Ü–∏–∏
      const currentOperationProduction = operationShifts.reduce((acc: any, shift: any) => {
        const dayQuantity = shift.dayShiftQuantity || 0;
        const nightQuantity = shift.nightShiftQuantity || 0;
        const dayTime = dayQuantity * (shift.dayShiftTimePerUnit || 0);
        const nightTime = nightQuantity * (shift.nightShiftTimePerUnit || 0);

        return {
          dayShift: {
            quantity: acc.dayShift.quantity + dayQuantity,
            operator: shift.dayShiftOperator || acc.dayShift.operator,
            efficiency: 0 // –ë—É–¥–µ–º –≤—ã—á–∏—Å–ª—è—Ç—å –Ω–∏–∂–µ
          },
          nightShift: {
            quantity: acc.nightShift.quantity + nightQuantity,
            operator: shift.nightShiftOperator || acc.nightShift.operator,
            efficiency: 0 // –ë—É–¥–µ–º –≤—ã—á–∏—Å–ª—è—Ç—å –Ω–∏–∂–µ
          },
          totalTime: acc.totalTime + dayTime + nightTime,
          operatorStats: [] // –ë—É–¥–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –Ω–∏–∂–µ
        };
      }, {
        dayShift: { quantity: 0, operator: '-', efficiency: 0 },
        nightShift: { quantity: 0, operator: '–ê—Ä–∫–∞–¥–∏–π', efficiency: 0 },
        totalTime: 0,
        operatorStats: []
      });

      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (operationShifts.length > 0 && assignedOperation) {
        const uniqueOperators = new Set<string>();
        operationShifts.forEach((shift: any) => {
          if (shift.dayShiftOperator) uniqueOperators.add(shift.dayShiftOperator);
          if (shift.nightShiftOperator) uniqueOperators.add(shift.nightShiftOperator);
        });

        currentOperationProduction.operatorStats = Array.from(uniqueOperators)
          .map(operator => calculateOperatorEfficiency(operator, operationShifts, assignedOperation))
          .filter(stat => stat.productivity.partsPerHour > 0);

        // –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–º–µ–Ω
        const dayOperatorStats = currentOperationProduction.operatorStats.find(
          (s: OperatorEfficiency) => s.operatorName === currentOperationProduction.dayShift.operator
        );
        const nightOperatorStats = currentOperationProduction.operatorStats.find(
          (s: OperatorEfficiency) => s.operatorName === currentOperationProduction.nightShift.operator
        );

        currentOperationProduction.dayShift.efficiency = dayOperatorStats?.utilization.efficiency || 0;
        currentOperationProduction.nightShift.efficiency = nightOperatorStats?.utilization.efficiency || 0;
      }

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞–Ω–∫–∞
      const machineData: ActiveMachine = {
        id: machine.id,
        machineName: machine.machineName,
        machineType: machine.machineType,
        isAvailable: machine.isAvailable,
        currentOperationId: machine.currentOperationId,
        lastFreedAt: machine.lastFreedAt ? 
          (typeof machine.lastFreedAt === 'string' ? 
            new Date(machine.lastFreedAt) : 
            machine.lastFreedAt) : 
          undefined,
        createdAt: machine.createdAt,
        updatedAt: machine.updatedAt,
        status: assignedOperation ? 
          (!machine.isAvailable ? 'working' : 'setup') : 
          'idle',
        currentOperationProduction,
      };

      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ API, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
      if (machine.currentOperationDetails) {
        const totalProduced = operationShifts.reduce((sum: number, shift: any) => 
          sum + (shift.dayShiftQuantity || 0) + (shift.nightShiftQuantity || 0), 0
        );

        machineData.currentOperationDetails = {
          ...machine.currentOperationDetails,
          progress: calculateProgress(assignedOperation, operationShifts),
          totalProduced,
          targetQuantity: (assignedOperation as any)?.orderId ? 100 : 100 // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ order.quantity
        };
      }

      return machineData;
    });
  }, [machines, activeOperations, todayShifts, calculateProgress, getOperationShifts, calculateOperatorEfficiency]);