/**
 * @file: MachineCard.tsx (ENHANCED VERSION)
 * @description: –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞–Ω–∫–∞ —Å –ø–æ–ª–Ω—ã–º CRUD —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
 * @dependencies: antd, machine.types, –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
 * @created: 2025-01-28
 * @updated: 2025-06-11 - –î–æ–±–∞–≤–ª–µ–Ω—ã CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
import React, { useState } from 'react';
import { 
  Card, 
  Tag, 
  Badge, 
  Row, 
  Col, 
  Button, 
  Typography, 
  Space, 
  Progress,
  Modal,
  InputNumber,
  Select,
  Form,
  Input,
  Statistic,
  Divider,
  Tooltip
} from 'antd';
import { 
  ToolOutlined, 
  CheckCircleOutlined, 
  ClockCircleOutlined,
  PlayCircleOutlined,
  CloseCircleOutlined,
  ExclamationCircleOutlined,
  EditOutlined,
  DeleteOutlined,
  PlusOutlined,
  ReloadOutlined,
  WarningOutlined
} from '@ant-design/icons';
import { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';
import { useTranslation } from '../../../i18n';
import { 
  MachineAvailability, 
  getMachineTypeLabel, 
  formatEstimatedTime 
} from '../../../types/machine.types';
import { machinesApi } from '../../../services/machinesApi';
import { message } from 'antd';

const { confirm } = Modal;
const { Text } = Typography;
const { Option } = Select;

interface MachineCardProps {
  machine: MachineAvailability;
  isSelected: boolean;
  onSelect: () => void;
  onOpenPlanningModal?: (machine: MachineAvailability) => void;
}

export const MachineCard: React.FC<MachineCardProps> = ({
  machine,
  isSelected,
  onSelect,
  onOpenPlanningModal,
}) => {
  const { t } = useTranslation();
  const queryClient = useQueryClient();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const [editModalVisible, setEditModalVisible] = useState(false);
  const [createModalVisible, setCreateModalVisible] = useState(false);
  const [progressModalVisible, setProgressModalVisible] = useState(false);
  const [editForm] = Form.useForm();
  const [createForm] = Form.useForm();
  const [progressForm] = Form.useForm();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const { data: operationProgress } = useQuery({
    queryKey: ['operation-progress', machine.currentOperationId],
    queryFn: async () => {
      if (!machine.currentOperationId) return null;
      // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      return {
        completedParts: Math.floor(Math.random() * 80) + 10,
        totalParts: 100,
        percentage: Math.floor(Math.random() * 80) + 10,
        startedAt: new Date(Date.now() - Math.random() * 3600000),
      };
    },
    enabled: !!machine.currentOperationId,
    refetchInterval: 10000, // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  });

  // –ú—É—Ç–∞—Ü–∏–∏ –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
  const updateOperationMutation = useMutation({
    mutationFn: async (data: any) => {
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', data);
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
      return { success: true };
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      setEditModalVisible(false);
      message.success('–û–ø–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    },
  });

  const deleteOperationMutation = useMutation({
    mutationFn: async (operationId: string) => {
      console.log('–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', operationId);
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
      return { success: true };
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      message.success('–û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    },
  });

  const createOperationMutation = useMutation({
    mutationFn: async (data: any) => {
      console.log('–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', data);
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
      return { success: true };
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      setCreateModalVisible(false);
      message.success('–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    },
  });

  const updateProgressMutation = useMutation({
    mutationFn: async (data: any) => {
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', data);
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
      return { success: true };
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['operation-progress'] });
      setProgressModalVisible(false);
      message.success('–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    },
  });

  const updateAvailabilityMutation = useMutation({
    mutationFn: async (isAvailable: boolean) => {
      console.log(`üîÑ –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞–Ω–∫–∞ ${machine.machineName} –Ω–∞ ${isAvailable}`);
      return await machinesApi.updateAvailability(machine.machineName, isAvailable);
    },
    onSuccess: (updatedMachine) => {
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      const status = updatedMachine.isAvailable ? t('machine.message.freed') : t('machine.message.marked_busy');
      message.success(`${t('machine.message.machine')} "${machine.machineName}" ${status}`);
      
      if (!machine.isAvailable && updatedMachine.isAvailable && onOpenPlanningModal) {
        setTimeout(() => {
          onOpenPlanningModal(updatedMachine);
        }, 1000);
      }
      
      if (!machine.isAvailable && updatedMachine.isAvailable) {
        onSelect();
      }
    },
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω–∫–∞:', error);
      message.error(t('machine.message.update_error'));
    },
  });

  const unassignOperationMutation = useMutation({
    mutationFn: () => machinesApi.unassignOperation(machine.machineName),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      message.success(t('machine.message.operation_cancelled'));
    },
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      message.error(t('message.error.delete'));
    },
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ CRUD
  const handleEditOperation = () => {
    if (machine.currentOperationDetails) {
      editForm.setFieldsValue({
        operationType: machine.currentOperationDetails.operationType,
        estimatedTime: machine.currentOperationDetails.estimatedTime,
        operationNumber: machine.currentOperationDetails.operationNumber,
      });
      setEditModalVisible(true);
    }
  };

  const handleDeleteOperation = () => {
    confirm({
      title: '–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
      icon: <ExclamationCircleOutlined />,
      content: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é?',
      okText: '–£–¥–∞–ª–∏—Ç—å',
      okType: 'danger',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      onOk() {
        if (machine.currentOperationId) {
          deleteOperationMutation.mutate(machine.currentOperationId);
        }
      },
    });
  };

  const handleCreateOperation = () => {
    createForm.resetFields();
    setCreateModalVisible(true);
  };

  const handleUpdateProgress = () => {
    if (operationProgress) {
      progressForm.setFieldsValue({
        completedParts: operationProgress.completedParts,
        totalParts: operationProgress.totalParts,
      });
    }
    setProgressModalVisible(true);
  };

  const handleAvailabilityChange = (checked: boolean) => {
    if (checked && machine.isAvailable && onOpenPlanningModal) {
      onOpenPlanningModal(machine);
    } else {
      const action = checked ? t('machine.dialog.free') : t('machine.dialog.mark_busy');
      const title = checked ? t('machine.dialog.free_title') : t('machine.dialog.mark_busy_title');
      
      confirm({
        title,
        icon: <ExclamationCircleOutlined />,
        content: `${t('machine.dialog.confirm')} ${action} ${t('machine.dialog.machine')} "${machine.machineName}"?`,
        okText: t('button.confirm'),
        cancelText: t('button.cancel'),
        onOk() {
          updateAvailabilityMutation.mutate(checked);
        },
      });
    }
  };

  const handleUnassignOperation = (e: React.MouseEvent) => {
    e.stopPropagation();
    
    confirm({
      title: '–û—Ç–º–µ–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
      icon: <ExclamationCircleOutlined />,
      content: `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞–Ω–∫–µ "${machine.machineName}"?`,
      okText: '–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      onOk() {
        unassignOperationMutation.mutate();
      },
    });
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  const getMachineTypeColor = (type: string) => {
    switch (type) {
      case 'MILLING': return '#1890ff';
      case 'TURNING': return '#52c41a';
      default: return '#666';
    }
  };

  const getMachineIcon = (type: string) => {
    switch (type) {
      case 'TURNING': return <ToolOutlined rotate={90} />;
      default: return <ToolOutlined />;
    }
  };

  const machineTypeColor = getMachineTypeColor(machine.machineType);

  return (
    <>
      <Card
        hoverable
        onClick={onSelect}
        style={{
          cursor: 'pointer',
          borderColor: isSelected ? machineTypeColor : '#e8e8e8',
          borderWidth: isSelected ? 2 : 1,
          backgroundColor: isSelected ? `${machineTypeColor}08` : '#fff',
          borderRadius: '12px',
          minHeight: 400,
          transition: 'all 0.3s ease',
          boxShadow: isSelected 
            ? `0 4px 16px ${machineTypeColor}30` 
            : '0 2px 8px rgba(0, 0, 0, 0.06)',
        }}
        title={
          <Row align="middle" justify="space-between">
            <Col>
              <Space>
                <span style={{ color: machineTypeColor, fontSize: '18px' }}>
                  {getMachineIcon(machine.machineType)}
                </span>
                <span style={{ 
                  fontSize: '16px', 
                  fontWeight: 'bold',
                  color: machineTypeColor 
                }}>
                  {machine.machineName}
                </span>
              </Space>
            </Col>
            <Col>
              <Badge 
                status={machine.isAvailable ? "success" : "processing"} 
                text={machine.isAvailable ? t('machine.status.available') : t('machine.status.busy')}
              />
            </Col>
          </Row>
        }
        extra={
          <Space>
            {machine.currentOperationDetails && (
              <>
                <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é">
                  <Button
                    type="text"
                    icon={<EditOutlined />}
                    size="small"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleEditOperation();
                    }}
                  />
                </Tooltip>
                <Tooltip title="–£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é">
                  <Button
                    type="text"
                    danger
                    icon={<DeleteOutlined />}
                    size="small"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleDeleteOperation();
                    }}
                  />
                </Tooltip>
              </>
            )}
            {machine.isAvailable && (
              <Tooltip title="–°–æ–∑–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é">
                <Button
                  type="text"
                  icon={<PlusOutlined />}
                  size="small"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleCreateOperation();
                  }}
                />
              </Tooltip>
            )}
          </Space>
        }
      >
        <Row gutter={[0, 16]}>
          {/* –¢–∏–ø —Å—Ç–∞–Ω–∫–∞ */}
          <Col span={24}>
            <Card 
              size="small" 
              style={{ 
                backgroundColor: `${machineTypeColor}10`,
                borderColor: machineTypeColor,
                borderRadius: '8px'
              }}
            >
              <div style={{ textAlign: 'center' }}>
                <div style={{ color: machineTypeColor, fontSize: '24px', marginBottom: '8px' }}>
                  {getMachineIcon(machine.machineType)}
                </div>
                <Text strong style={{ color: machineTypeColor }}>
                  {getMachineTypeLabel(machine.machineType)}
                </Text>
              </div>
            </Card>
          </Col>

          {/* –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º */}
          {machine.currentOperationDetails && (
            <Col span={24}>
              <Card 
                size="small" 
                style={{ 
                  borderRadius: '8px', 
                  borderColor: '#faad14',
                  backgroundColor: '#fff7e6'
                }}
                title={
                  <Space>
                    <Tag color="orange">
                      üìã –û–ø–µ—Ä–∞—Ü–∏—è #{machine.currentOperationDetails.operationNumber}
                    </Tag>
                    <Tag color="blue">
                      {machine.currentOperationDetails.operationType}
                    </Tag>
                  </Space>
                }
              >
                <Space direction="vertical" style={{ width: '100%' }}>
                  <div>
                    <Text strong style={{ fontSize: '13px', color: '#d46b08' }}>
                      üìÑ {machine.currentOperationDetails.orderDrawingNumber}
                    </Text>
                  </div>
                  
                  <Row gutter={16}>
                    <Col span={12}>
                      <Statistic
                        title="–í—Ä–µ–º—è"
                        value={machine.currentOperationDetails.estimatedTime}
                        suffix="–º–∏–Ω"
                        valueStyle={{ fontSize: '14px' }}
                      />
                    </Col>
                    <Col span={12}>
                      <Statistic
                        title="–ü—Ä–æ–≥—Ä–µ—Å—Å"
                        value={operationProgress?.percentage || 0}
                        suffix="%"
                        valueStyle={{ 
                          fontSize: '14px',
                          color: (operationProgress?.percentage || 0) > 50 ? '#52c41a' : '#faad14'
                        }}
                      />
                    </Col>
                  </Row>

                  {operationProgress && (
                    <>
                      <Progress
                        percent={operationProgress.percentage}
                        status={(operationProgress.percentage || 0) > 80 ? 'success' : 'active'}
                        strokeColor={{
                          '0%': '#faad14',
                          '50%': '#1890ff',
                          '100%': '#52c41a',
                        }}
                      />
                      
                      <Row justify="space-between">
                        <Text type="secondary" style={{ fontSize: '12px' }}>
                          –î–µ—Ç–∞–ª–∏: {operationProgress.completedParts}/{operationProgress.totalParts}
                        </Text>
                        {operationProgress.startedAt && (
                          <Text type="secondary" style={{ fontSize: '12px' }}>
                            –ù–∞—á–∞—Ç–æ: {new Date(operationProgress.startedAt).toLocaleTimeString()}
                          </Text>
                        )}
                      </Row>
                    </>
                  )}

                  <Divider style={{ margin: '12px 0' }} />
                  
                  {/* CRUD –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
                  <Row gutter={8}>
                    <Col span={6}>
                      <Button
                        type="primary"
                        size="small"
                        block
                        icon={<EditOutlined />}
                        onClick={(e) => {
                          e.stopPropagation();
                          handleEditOperation();
                        }}
                        style={{ fontSize: '11px' }}
                      >
                        –ò–∑–º.
                      </Button>
                    </Col>
                    <Col span={6}>
                      <Button
                        size="small"
                        block
                        icon={<WarningOutlined />}
                        onClick={(e) => {
                          e.stopPropagation();
                          handleUpdateProgress();
                        }}
                        style={{ fontSize: '11px' }}
                      >
                        –ü—Ä–æ–≥.
                      </Button>
                    </Col>
                    <Col span={6}>
                      <Button
                        danger
                        size="small"
                        block
                        icon={<DeleteOutlined />}
                        onClick={(e) => {
                          e.stopPropagation();
                          handleDeleteOperation();
                        }}
                        style={{ fontSize: '11px' }}
                      >
                        –£–¥–∞–ª.
                      </Button>
                    </Col>
                    <Col span={6}>
                      <Button
                        danger
                        size="small"
                        block
                        icon={<CloseCircleOutlined />}
                        onClick={handleUnassignOperation}
                        loading={unassignOperationMutation.isPending}
                        style={{ fontSize: '11px' }}
                      >
                        –û—Ç–º.
                      </Button>
                    </Col>
                  </Row>
                </Space>
              </Card>
            </Col>
          )}

          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é */}
          <Col span={24}>
            <Card size="small" style={{ borderRadius: '8px' }}>
              {machine.isAvailable ? (
                <>
                  <div style={{ marginBottom: '12px', textAlign: 'center' }}>
                    <Badge status="success" text={t('machine.status.available')} />
                  </div>
                  
                  <Space direction="vertical" style={{ width: '100%' }} size="small">
                    <Button
                      type="primary"
                      block
                      icon={<PlusOutlined />}
                      onClick={(e) => {
                        e.stopPropagation();
                        handleCreateOperation();
                      }}
                      style={{ 
                        backgroundColor: machineTypeColor,
                        borderColor: machineTypeColor,
                        borderRadius: '8px'
                      }}
                    >
                      –°–æ–∑–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
                    </Button>
                    
                    {onOpenPlanningModal && (
                      <Button
                        block
                        onClick={(e) => {
                          e.stopPropagation();
                          onOpenPlanningModal(machine);
                        }}
                        style={{ borderRadius: '8px' }}
                      >
                        –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                      </Button>
                    )}
                  </Space>
                </>
              ) : (
                <Button
                  type="default"
                  block
                  icon={<CheckCircleOutlined />}
                  onClick={(e) => {
                    e.stopPropagation();
                    handleAvailabilityChange(true);
                  }}
                  loading={updateAvailabilityMutation.isPending}
                  style={{ borderRadius: '6px' }}
                >
                  ‚úÖ –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Å—Ç–∞–Ω–æ–∫
                </Button>
              )}
            </Card>
          </Col>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ */}
          {machine.lastFreedAt && (
            <Col span={24}>
              <Card size="small" style={{ borderRadius: '8px', backgroundColor: '#fafafa' }}>
                <Space>
                  <ClockCircleOutlined style={{ color: '#666' }} />
                  <div>
                    <Text type="secondary" style={{ fontSize: '12px', display: 'block' }}>
                      –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ:
                    </Text>
                    <Text style={{ fontSize: '13px', fontWeight: '500' }}>
                      {new Date(machine.lastFreedAt).toLocaleString('ru-RU')}
                    </Text>
                  </div>
                </Space>
              </Card>
            </Col>
          )}
        </Row>
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
      <Modal
        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
        open={editModalVisible}
        onCancel={() => setEditModalVisible(false)}
        onOk={() => editForm.submit()}
        confirmLoading={updateOperationMutation.isPending}
      >
        <Form
          form={editForm}
          layout="vertical"
          onFinish={(values) => updateOperationMutation.mutate(values)}
        >
          <Form.Item
            name="operationType"
            label="–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏"
            rules={[{ required: true }]}
          >
            <Select>
              <Option value="MILLING">–§—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–∏–µ</Option>
              <Option value="TURNING">–¢–æ–∫–∞—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</Option>
              <Option value="DRILLING">–°–≤–µ—Ä–ª–µ–Ω–∏–µ</Option>
            </Select>
          </Form.Item>
          
          <Form.Item
            name="estimatedTime"
            label="–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω)"
            rules={[{ required: true, type: 'number', min: 1 }]}
          >
            <InputNumber min={1} style={{ width: '100%' }} />
          </Form.Item>
          
          <Form.Item
            name="operationNumber"
            label="–ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏"
            rules={[{ required: true, type: 'number', min: 1 }]}
          >
            <InputNumber min={1} style={{ width: '100%' }} />
          </Form.Item>
        </Form>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
      <Modal
        title="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"
        open={createModalVisible}
        onCancel={() => setCreateModalVisible(false)}
        onOk={() => createForm.submit()}
        confirmLoading={createOperationMutation.isPending}
      >
        <Form
          form={createForm}
          layout="vertical"
          onFinish={(values) => createOperationMutation.mutate({ ...values, machineId: machine.id })}
        >
          <Form.Item
            name="operationType"
            label="–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏"
            rules={[{ required: true }]}
          >
            <Select>
              <Option value="MILLING">–§—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–∏–µ</Option>
              <Option value="TURNING">–¢–æ–∫–∞—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</Option>
              <Option value="DRILLING">–°–≤–µ—Ä–ª–µ–Ω–∏–µ</Option>
            </Select>
          </Form.Item>
          
          <Form.Item
            name="estimatedTime"
            label="–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω)"
            rules={[{ required: true, type: 'number', min: 1 }]}
          >
            <InputNumber min={1} style={{ width: '100%' }} />
          </Form.Item>
          
          <Form.Item
            name="operationNumber"
            label="–ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏"
            rules={[{ required: true, type: 'number', min: 1 }]}
          >
            <InputNumber min={1} style={{ width: '100%' }} />
          </Form.Item>
          
          <Form.Item
            name="orderDrawingNumber"
            label="–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞"
            rules={[{ required: true }]}
          >
            <Input placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: C6HP0021A" />
          </Form.Item>
        </Form>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
      <Modal
        title="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
        open={progressModalVisible}
        onCancel={() => setProgressModalVisible(false)}
        onOk={() => progressForm.submit()}
        confirmLoading={updateProgressMutation.isPending}
      >
        <Form
          form={progressForm}
          layout="vertical"
          onFinish={(values) => updateProgressMutation.mutate(values)}
        >
          <Form.Item
            name="completedParts"
            label="–í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π"
            rules={[{ required: true, type: 'number', min: 0 }]}
          >
            <InputNumber min={0} style={{ width: '100%' }} />
          </Form.Item>
          
          <Form.Item
            name="totalParts"
            label="–í—Å–µ–≥–æ –¥–µ—Ç–∞–ª–µ–π"
            rules={[{ required: true, type: 'number', min: 1 }]}
          >
            <InputNumber min={1} style={{ width: '100%' }} />
          </Form.Item>
        </Form>
      </Modal>
    </>
  );
};
