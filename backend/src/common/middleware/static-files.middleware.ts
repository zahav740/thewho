/**
 * @file: static-files.middleware.ts
 * @description: Middleware –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö PDF —Ñ–∞–π–ª–æ–≤
 * @created: 2025-06-21
 */
import { Injectable, NestMiddleware } from '@nestjs/common';
import { Request, Response, NextFunction } from 'express';
import * as path from 'path';
import * as fs from 'fs';

@Injectable()
export class StaticFilesMiddleware implements NestMiddleware {
  use(req: Request, res: Response, next: NextFunction) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã –∫ PDF —Ñ–∞–π–ª–∞–º
    if (req.path.startsWith('/api/orders/pdf/')) {
      const filename = req.path.split('/').pop();
      
      if (!filename) {
        return res.status(400).json({ message: '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞' });
      }

      console.log(`üìÑ StaticFiles: –ó–∞–ø—Ä–æ—Å –Ω–∞ PDF —Ñ–∞–π–ª: ${filename}`);

      // –ü—É—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞
      const searchPaths = [
        path.join(process.cwd(), 'backend', 'uploads', 'pdf', filename),
        path.join(process.cwd(), 'uploads', 'pdf', filename),
        path.join(__dirname, '../../../uploads/pdf', filename),
        path.resolve('./backend/uploads/pdf', filename),
        path.resolve('./uploads/pdf', filename)
      ];

      console.log('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –≤ –ø—É—Ç—è—Ö:');
      
      let foundPath = null;
      for (let i = 0; i < searchPaths.length; i++) {
        const searchPath = searchPaths[i];
        const exists = fs.existsSync(searchPath);
        console.log(`   ${i + 1}. ${searchPath} -> ${exists ? '‚úÖ' : '‚ùå'}`);
        
        if (exists && !foundPath) {
          foundPath = searchPath;
        }
      }

      if (!foundPath) {
        console.error(`‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filename}`);
        return res.status(404).json({ 
          message: 'PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
          filename,
          searchedPaths: searchPaths
        });
      }

      try {
        const stats = fs.statSync(foundPath);
        console.log(`‚úÖ PDF —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${foundPath} (${stats.size} –±–∞–π—Ç)`);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è PDF
        res.set({
          'Content-Type': 'application/pdf',
          'Content-Disposition': `inline; filename="${filename}"`,
          'Content-Length': stats.size.toString(),
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0',
          'X-Frame-Options': 'SAMEORIGIN',
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'GET',
          'Access-Control-Allow-Headers': 'Content-Type'
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        return res.sendFile(foundPath);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF —Ñ–∞–π–ª–∞ ${filename}:`, error);
        return res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PDF', 
          error: error.message 
        });
      }
    }

    // –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    next();
  }
}
