import { Controller, Get, Query } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiQuery } from '@nestjs/swagger';
import { AuthService } from './auth.service';

export class SearchUsernamesResponseDto {
  usernames: string[];
}

@ApiTags('Authentication')
@Controller('auth')
export class AuthController {
  constructor(private authService: AuthService) {}

  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã ...

  @Get('search-usernames')
  @ApiOperation({ summary: 'Search usernames for autocomplete' })
  @ApiQuery({ 
    name: 'query', 
    required: true, 
    description: 'Search query (min 2 characters)',
    example: 'kas'
  })
  @ApiResponse({ 
    status: 200, 
    description: 'List of matching usernames',
    type: SearchUsernamesResponseDto
  })
  async searchUsernames(@Query('query') query: string): Promise<SearchUsernamesResponseDto> {
    console.log('üîç –ü–æ–∏—Å–∫ usernames –ø–æ –∑–∞–ø—Ä–æ—Å—É:', query);
    
    if (!query || query.length < 2) {
      return { usernames: [] };
    }

    try {
      const usernames = await this.authService.searchUsernames(query);
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ usernames:', usernames.length);
      return { usernames };
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ usernames:', error.message);
      return { usernames: [] };
    }
  }
}
