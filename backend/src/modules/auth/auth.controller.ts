import { Controller, Post, Body, UseGuards, Request, Get } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';
import { AuthService } from './auth.service';
import { LoginDto } from './dto/login.dto';
import { LoginResponseDto } from './dto/login-response.dto';
import { LocalAuthGuard } from './guards/local-auth.guard';
import { JwtAuthGuard } from './guards/jwt-auth.guard';
import { Public } from '../../common/decorators/public.decorator';

@ApiTags('Authentication')
@Controller('auth')
export class AuthController {
  constructor(private authService: AuthService) {}

  @Post('login')
  @ApiOperation({ summary: 'User login' })
  @ApiResponse({ 
    status: 200, 
    description: 'Login successful', 
    type: LoginResponseDto 
  })
  @ApiResponse({ 
    status: 401, 
    description: 'Invalid credentials' 
  })
  async login(@Body() loginDto: LoginDto): Promise<LoginResponseDto> {
    // –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç
    console.log('üîç –®–ê–ì 1 - AuthController –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–ª–æ–º:', loginDto);
    console.log('üîç –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:', typeof loginDto.username, typeof loginDto.password);
    console.log('üîç –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫:', loginDto.username?.length, loginDto.password?.length);
    
    try {
      const result = await this.authService.login(loginDto);
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ AuthService.login');
      return result;
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤ AuthController.login:', error.message);
      throw error;
    }
  }

  @UseGuards(JwtAuthGuard)
  @Get('profile')
  @ApiBearerAuth()
  @ApiOperation({ summary: 'Get user profile' })
  @ApiResponse({ 
    status: 200, 
    description: 'User profile retrieved successfully' 
  })
  @ApiResponse({ 
    status: 401, 
    description: 'Unauthorized' 
  })
  getProfile(@Request() req) {
    return req.user;
  }

  @UseGuards(JwtAuthGuard)
  @Post('verify')
  @ApiBearerAuth()
  @ApiOperation({ summary: 'Verify JWT token' })
  @ApiResponse({ 
    status: 200, 
    description: 'Token is valid' 
  })
  @ApiResponse({ 
    status: 401, 
    description: 'Token is invalid' 
  })
  verifyToken(@Request() req) {
    return { 
      valid: true, 
      user: req.user 
    };
  }

  // –í—Ä–µ–º–µ–Ω–Ω—ã–π endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ö—ç—à–∞
  @Post('generate-hash')
  @ApiOperation({ summary: 'Generate password hash (temporary)' })
  async generateHash(@Body() body: { password: string }) {
    const hash = await this.authService.generatePasswordHash(body.password);
    return {
      password: body.password,
      hash: hash,
      message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ö—ç—à –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
    };
  }
}
