/**
 * @file: files.controller.ts 
 * @description: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
 * @dependencies: files.service
 * @created: 2025-01-28
 * @updated: 2025-06-09 // –ò–°–ü–†–ê–í–õ–ï–ù–û: multer buffer –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
 */
import {
  Controller,
  Get,
  Post,
  Delete,
  Param,
  Query,
  UseInterceptors,
  UploadedFile,
  Res,
  StreamableFile,
} from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
import { ApiTags, ApiOperation, ApiConsumes, ApiQuery } from '@nestjs/swagger';
import { Response } from 'express';
import { FilesService } from './files.service';
import type { Express } from 'express';

@ApiTags('files')
@Controller('files')
export class FilesController {
  constructor(private readonly filesService: FilesService) {}

  @Post('upload')
  @ApiOperation({ summary: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª' })
  @ApiConsumes('multipart/form-data')
  @UseInterceptors(FileInterceptor('file'))
  async uploadFile(
    @UploadedFile() file: Express.Multer.File,
    @Query('folder') folder?: string,
  ) {
    const filename = await this.filesService.uploadFile(file, folder);
    return {
      filename,
      originalName: file.originalname,
      size: file.size,
      mimetype: file.mimetype,
    };
  }

  @Post('excel/parse')
  @ApiOperation({ summary: '–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ —Å buffer' })
  @ApiConsumes('multipart/form-data')
  @UseInterceptors(FileInterceptor('file', {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï —É–∫–∞–∑—ã–≤–∞–µ–º storage - –∏—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç multer —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–∞–π–ª –≤ buffer –≤–º–µ—Å—Ç–æ –¥–∏—Å–∫–∞
    fileFilter: (req, file, cb) => {
      console.log('üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô FileInterceptor –ø—Ä–æ–≤–µ—Ä–∫–∞:', {
        originalname: file.originalname,
        mimetype: file.mimetype,
        size: file.size,
        hasFieldname: !!file.fieldname
      });
      
      const allowedTypes = [
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
        'application/vnd.ms-excel', // .xls
        'application/octet-stream' // –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —ç—Ç–æ—Ç MIME type
      ];
      
      const isValidType = allowedTypes.includes(file.mimetype) || file.originalname.match(/\.(xlsx?|csv)$/);
      
      if (isValidType) {
        console.log('‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∞–π–ª –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É, –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ buffer');
        cb(null, true);
      } else {
        console.error('‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', file.mimetype);
        cb(new Error('–¢–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls) —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'), false);
      }
    },
    limits: {
      fileSize: 50 * 1024 * 1024, // 50MB –º–∞–∫—Å–∏–º—É–º
      fieldSize: 50 * 1024 * 1024, // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—è
    },
  }))
  async parseExcel(@UploadedFile() file: Express.Multer.File) {
    console.log('üìÅ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô FILES CONTROLLER: –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª:', {
      originalname: file?.originalname,
      size: file?.size,
      mimetype: file?.mimetype,
      hasBuffer: !!file?.buffer,
      bufferSize: file?.buffer?.length,
      fieldname: file?.fieldname
    });
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
    if (!file) {
      console.error('‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô: –§–∞–π–ª –≤–æ–æ–±—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω!');
      throw new Error('–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º');
    }
    
    if (!file.buffer) {
      console.error('‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô: –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –Ω–æ buffer –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
      console.error('üìä –î–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–∞:', {
        originalname: file.originalname,
        size: file.size,
        mimetype: file.mimetype,
        fieldname: file.fieldname,
        encoding: file.encoding,
        hasPath: !!file.path,
        hasDestination: !!file.destination
      });
      throw new Error('–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω –±–µ–∑ buffer - –ø—Ä–æ–±–ª–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ multer');
    }
    
    if (file.buffer.length === 0) {
      console.error('‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô: Buffer –ø—É—Å—Ç–æ–π!');
      throw new Error('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª');
    }
    
    console.log('‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô: –§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–µ—Ä–µ–¥–∞–µ–º –≤ —Å–µ—Ä–≤–∏—Å');
    
    return this.filesService.parseExcel(file);
  }

  @Get(':filename')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª' })
  @ApiQuery({ name: 'folder', required: false })
  async getFile(
    @Param('filename') filename: string,
    @Query('folder') folder: string,
    @Res({ passthrough: true }) res: Response,
  ): Promise<StreamableFile> {
    const buffer = await this.filesService.getFile(filename, folder);
    
    const extension = filename.split('.').pop()?.toLowerCase();
    let contentType = 'application/octet-stream';
    
    switch (extension) {
      case 'pdf':
        contentType = 'application/pdf';
        break;
      case 'xlsx':
      case 'xls':
        contentType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
        break;
      case 'jpg':
      case 'jpeg':
        contentType = 'image/jpeg';
        break;
      case 'png':
        contentType = 'image/png';
        break;
    }
    
    res.set({
      'Content-Type': contentType,
      'Content-Disposition': `attachment; filename="${filename}"`,
    });
    
    return new StreamableFile(buffer);
  }

  @Delete(':filename')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª' })
  @ApiQuery({ name: 'folder', required: false })
  async deleteFile(
    @Param('filename') filename: string,
    @Query('folder') folder?: string,
  ) {
    await this.filesService.deleteFile(filename, folder);
    return { message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' };
  }

  @Post('pdf/preview')
  @ApiOperation({ summary: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é PDF' })
  @ApiConsumes('multipart/form-data')
  @UseInterceptors(FileInterceptor('file'))
  async generatePdfPreview(@UploadedFile() file: Express.Multer.File) {
    const preview = await this.filesService.generatePdfPreview(file.buffer);
    return { preview };
  }

  @Get()
  @ApiOperation({ summary: '–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤' })
  @ApiQuery({ name: 'folder', required: false })
  async listFiles(@Query('folder') folder?: string) {
    return this.filesService.listFiles(folder);
  }

  @Get(':filename/info')
  @ApiOperation({ summary: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ' })
  @ApiQuery({ name: 'folder', required: false })
  async getFileInfo(
    @Param('filename') filename: string,
    @Query('folder') folder?: string,
  ) {
    return this.filesService.getFileInfo(filename, folder);
  }
}
