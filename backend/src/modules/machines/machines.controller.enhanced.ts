/**
 * @file: machines.controller.ts
 * @description: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω–∫–∞–º–∏ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
 * @dependencies: services
 * @created: 2025-01-28
 * @updated: 2025-06-12 - –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–º–µ–Ω
 */
import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Param,
  BadRequestException,
  Logger,
} from '@nestjs/common';
import { ApiTags, ApiOperation } from '@nestjs/swagger';
import { InjectDataSource } from '@nestjs/typeorm';
import { DataSource } from 'typeorm';
import { MachinesService } from './machines.service';
import { CreateMachineDto } from './dto/create-machine.dto';
import { UpdateMachineDto } from './dto/update-machine.dto';
import { Machine } from '../../database/entities/machine.entity';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
interface MachineAvailability {
  id: string;
  machineName: string;
  machineType: string;
  isAvailable: boolean;
  currentOperationId?: string;
  lastFreedAt?: Date;
  currentOperationDetails?: {
    id: number;
    operationNumber: number;
    operationType: string;
    estimatedTime: number;
    orderId: number;
    orderDrawingNumber: string;
    orderQuantity: number;
    producedQuantity: number;
    isCompleted?: boolean;
  };
  shiftProgress?: {
    totalProduced: number;
    remainingQuantity: number;
    completionPercentage: number;
    lastUpdateDate: Date;
  };
  createdAt: string;
  updatedAt: string;
}

interface OperationCompletionResult {
  isCompleted: boolean;
  totalProduced: number;
  targetQuantity: number;
  remainingQuantity: number;
  completionPercentage: number;
  canComplete: boolean;
}

@ApiTags('machines')
@Controller('machines')
export class MachinesController {
  private readonly logger = new Logger(MachinesController.name);

  constructor(
    private readonly machinesService: MachinesService,
    @InjectDataSource()
    private readonly dataSource: DataSource,
  ) {}

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ ID —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
   */
  private async getOperationDetails(operationId: number) {
    try {
      const result = await this.dataSource.query(`
        SELECT 
          op.id,
          op."operationNumber",
          op.operationtype as "operationType",
          op."estimatedTime",
          op."orderId",
          op."actualQuantity",
          ord.drawing_number as "orderDrawingNumber",
          ord.quantity as "orderQuantity"
        FROM operations op
        LEFT JOIN orders ord ON op."orderId" = ord.id
        WHERE op.id = $1
      `, [operationId]);
      
      return result[0] || null;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}:`, error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω
   */
  private async getShiftProgress(operationId: number, machineId: number) {
    try {
      const result = await this.dataSource.query(`
        SELECT 
          COALESCE(SUM(COALESCE("dayShiftQuantity", 0) + COALESCE("nightShiftQuantity", 0)), 0) as "totalProduced",
          MAX(date) as "lastUpdateDate",
          COUNT(*) as "shiftRecordsCount"
        FROM shift_records 
        WHERE "operationId" = $1 AND "machineId" = $2 AND archived = false
      `, [operationId, machineId]);
      
      return result[0] || { totalProduced: 0, lastUpdateDate: null, shiftRecordsCount: 0 };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–º–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}:`, error);
      return { totalProduced: 0, lastUpdateDate: null, shiftRecordsCount: 0 };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  @Get(':machineName/operation-completion')
  @ApiOperation({ summary: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞–Ω–∫–µ' })
  async checkOperationCompletion(
    @Param('machineName') machineName: string,
  ): Promise<OperationCompletionResult> {
    try {
      this.logger.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞–Ω–∫–µ: ${machineName}`);
      
      const machines = await this.machinesService.findAll();
      const machine = machines.find(m => m.code === machineName);
      
      if (!machine || !machine.currentOperation) {
        return {
          isCompleted: false,
          totalProduced: 0,
          targetQuantity: 0,
          remainingQuantity: 0,
          completionPercentage: 0,
          canComplete: false
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      const operationDetails = await this.getOperationDetails(machine.currentOperation);
      if (!operationDetails) {
        throw new BadRequestException('–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Å–º–µ–Ω
      const shiftProgress = await this.getShiftProgress(machine.currentOperation, machine.id);
      
      const totalProduced = shiftProgress.totalProduced || operationDetails.actualQuantity || 0;
      const targetQuantity = operationDetails.orderQuantity || 0;
      const remainingQuantity = Math.max(0, targetQuantity - totalProduced);
      const completionPercentage = targetQuantity > 0 ? Math.round((totalProduced / targetQuantity) * 100) : 0;
      const isCompleted = totalProduced >= targetQuantity && targetQuantity > 0;
      const canComplete = totalProduced > 0; // –ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å

      this.logger.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ ${machine.currentOperation}: ${totalProduced}/${targetQuantity} (${completionPercentage}%)`);

      return {
        isCompleted,
        totalProduced,
        targetQuantity,
        remainingQuantity,
        completionPercentage,
        canComplete
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${machineName}:`, error);
      throw error;
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é)
   */
  @Post(':machineName/complete-operation')
  @ApiOperation({ summary: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ —Å—Ç–∞–Ω–∫–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é' })
  async completeOperation(
    @Param('machineName') machineName: string,
    @Body() body: { action: 'complete' | 'continue' | 'plan_new'; forceComplete?: boolean },
  ): Promise<MachineAvailability> {
    try {
      this.logger.log(`üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${machineName}, –¥–µ–π—Å—Ç–≤–∏–µ: ${body.action}`);
      
      const machines = await this.machinesService.findAll();
      const machine = machines.find(m => m.code === machineName);
      
      if (!machine || !machine.currentOperation) {
        throw new BadRequestException('–£ —Å—Ç–∞–Ω–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏');
      }

      const operationId = machine.currentOperation;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
      const operationDetails = await this.getOperationDetails(operationId);
      const shiftProgress = await this.getShiftProgress(operationId, machine.id);
      
      if (!operationDetails) {
        throw new BadRequestException('–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      const totalProduced = shiftProgress.totalProduced || operationDetails.actualQuantity || 0;

      if (body.action === 'complete') {
        this.logger.log(`‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é ${operationId} –ø–æ–ª–Ω–æ—Å—Ç—å—é`);
        
        // 1. –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        await this.dataSource.query(`
          UPDATE operations 
          SET 
            status = 'COMPLETED',
            "completedAt" = NOW(),
            "actualQuantity" = $1,
            "assignedMachine" = NULL,
            "assignedAt" = NULL
          WHERE id = $2
        `, [totalProduced, operationId]);

        // 2. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        await this.dataSource.query(`
          UPDATE shift_records 
          SET 
            archived = true,
            "archivedAt" = NOW()
          WHERE "operationId" = $1 AND "machineId" = $2 AND archived = false
        `, [operationId, machine.id]);

        // 3. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try {
          await this.dataSource.query(`
            INSERT INTO operation_history 
            (operation_id, machine_id, drawing_number, quantity_completed, completed_at, operation_type, estimated_time, actual_time)
            VALUES ($1, $2, $3, $4, NOW(), $5, $6, 
              EXTRACT(EPOCH FROM (NOW() - $7)) / 60
            )
          `, [
            operationId,
            machine.id,
            operationDetails.orderDrawingNumber,
            totalProduced,
            operationDetails.operationType,
            operationDetails.estimatedTime,
            machine.assignedAt
          ]);
          
          this.logger.log(`üìö –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é`);
        } catch (historyError) {
          this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π:', historyError);
        }

        // 4. –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞–Ω–æ–∫
        const updatedMachine = await this.machinesService.update(machine.id, {
          isOccupied: false,
          currentOperation: null,
          assignedAt: new Date(), // –í—Ä–µ–º—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
        });

        this.logger.log(`üéâ –û–ø–µ—Ä–∞—Ü–∏—è ${operationId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ç–∞–Ω–æ–∫ ${machineName} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω`);

        return {
          id: updatedMachine.id.toString(),
          machineName: updatedMachine.code,
          machineType: updatedMachine.type,
          isAvailable: true,
          currentOperationId: undefined,
          lastFreedAt: updatedMachine.assignedAt,
          currentOperationDetails: null,
          createdAt: updatedMachine.createdAt.toISOString(),
          updatedAt: updatedMachine.updatedAt.toISOString(),
        };

      } else if (body.action === 'continue') {
        this.logger.log(`üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π ${operationId}`);
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
      } else if (body.action === 'plan_new') {
        this.logger.log(`üìã –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å`);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        await this.dataSource.query(`
          UPDATE shift_records 
          SET 
            "resetAt" = NOW(),
            archived = true,
            "archivedAt" = NOW()
          WHERE "operationId" = $1 AND "machineId" = $2 AND archived = false
        `, [operationId, machine.id]);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å—Ç–∞—Ç—É—Å PENDING –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        await this.dataSource.query(`
          UPDATE operations 
          SET 
            status = 'PENDING',
            "assignedMachine" = NULL,
            "assignedAt" = NULL
          WHERE id = $1
        `, [operationId]);

        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞–Ω–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const updatedMachine = await this.machinesService.update(machine.id, {
          isOccupied: false,
          currentOperation: null,
          assignedAt: new Date(),
        });

        return {
          id: updatedMachine.id.toString(),
          machineName: updatedMachine.code,
          machineType: updatedMachine.type,
          isAvailable: true,
          currentOperationId: undefined,
          lastFreedAt: updatedMachine.assignedAt,
          currentOperationDetails: null,
          createdAt: updatedMachine.createdAt.toISOString(),
          updatedAt: updatedMachine.updatedAt.toISOString(),
        };
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è 'continue'
      const currentOperationDetails = await this.getOperationDetails(operationId);
      const currentShiftProgress = await this.getShiftProgress(operationId, machine.id);
      
      return {
        id: machine.id.toString(),
        machineName: machine.code,
        machineType: machine.type,
        isAvailable: false,
        currentOperationId: operationId.toString(),
        lastFreedAt: machine.assignedAt,
        currentOperationDetails: currentOperationDetails ? {
          ...currentOperationDetails,
          producedQuantity: currentShiftProgress.totalProduced || 0
        } : null,
        shiftProgress: {
          totalProduced: currentShiftProgress.totalProduced || 0,
          remainingQuantity: Math.max(0, (currentOperationDetails?.orderQuantity || 0) - (currentShiftProgress.totalProduced || 0)),
          completionPercentage: Math.round(((currentShiftProgress.totalProduced || 0) / (currentOperationDetails?.orderQuantity || 1)) * 100),
          lastUpdateDate: currentShiftProgress.lastUpdateDate
        },
        createdAt: machine.createdAt.toISOString(),
        updatedAt: machine.updatedAt.toISOString(),
      };

    } catch (error) {
      this.logger.error(`üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${machineName}:`, error);
      throw error;
    }
  }

  @Get()
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞–Ω–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º' })
  async findAll(): Promise<MachineAvailability[]> {
    try {
      this.logger.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞–Ω–∫–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º');
      const machines = await this.machinesService.findAll();
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã machines –≤ —Ñ–æ—Ä–º–∞—Ç MachineAvailability
      const result = await Promise.all(machines.map(async (machine) => {
        let currentOperationDetails = null;
        let shiftProgress = null;
        
        // –ï—Å–ª–∏ —É —Å—Ç–∞–Ω–∫–∞ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (machine.currentOperation) {
          this.logger.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ ${machine.currentOperation} –¥–ª—è —Å—Ç–∞–Ω–∫–∞ ${machine.code}`);
          
          currentOperationDetails = await this.getOperationDetails(machine.currentOperation);
          const shiftData = await this.getShiftProgress(machine.currentOperation, machine.id);
          
          if (currentOperationDetails) {
            const totalProduced = shiftData.totalProduced || currentOperationDetails.actualQuantity || 0;
            const targetQuantity = currentOperationDetails.orderQuantity || 0;
            
            currentOperationDetails.producedQuantity = totalProduced;
            currentOperationDetails.isCompleted = totalProduced >= targetQuantity && targetQuantity > 0;
            
            shiftProgress = {
              totalProduced,
              remainingQuantity: Math.max(0, targetQuantity - totalProduced),
              completionPercentage: targetQuantity > 0 ? Math.round((totalProduced / targetQuantity) * 100) : 0,
              lastUpdateDate: shiftData.lastUpdateDate
            };
            
            this.logger.log(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è ${currentOperationDetails.operationNumber}: ${totalProduced}/${targetQuantity} (${shiftProgress.completionPercentage}%)`);
          } else {
            this.logger.warn(`‚ùå –û–ø–µ—Ä–∞—Ü–∏—è ${machine.currentOperation} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î`);
          }
        }
        
        return {
          id: machine.id.toString(),
          machineName: machine.code,
          machineType: machine.type,
          isAvailable: !machine.isOccupied,
          currentOperationId: machine.currentOperation?.toString(),
          lastFreedAt: machine.assignedAt,
          currentOperationDetails,
          shiftProgress,
          createdAt: machine.createdAt.toISOString(),
          updatedAt: machine.updatedAt.toISOString(),
        };
      }));
      
      this.logger.log(`–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${result.length} —Å—Ç–∞–Ω–∫–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º`);
      return result;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–Ω–∫–æ–≤:', error);
      throw error;
    }
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ...
  @Get('available')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏' })
  async findAvailable(): Promise<MachineAvailability[]> {
    try {
      this.logger.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤');
      const machines = await this.machinesService.findAll();
      
      const availableMachines = machines.filter(machine => 
        machine.isActive && !machine.isOccupied
      );
      
      const result = availableMachines.map(machine => ({
        id: machine.id.toString(),
        machineName: machine.code,
        machineType: machine.type,
        isAvailable: true,
        currentOperationId: machine.currentOperation?.toString(),
        lastFreedAt: machine.assignedAt,
        currentOperationDetails: null,
        createdAt: machine.createdAt.toISOString(),
        updatedAt: machine.updatedAt.toISOString(),
      }));
      
      this.logger.log(`–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${result.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤`);
      return result;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤:', error);
      throw error;
    }
  }

  @Get(':machineName')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–æ–∫ –ø–æ –∏–º–µ–Ω–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º' })
  async findByName(@Param('machineName') machineName: string): Promise<MachineAvailability> {
    try {
      this.logger.log(`–ü–æ–∏—Å–∫ —Å—Ç–∞–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏: ${machineName}`);
      const machines = await this.machinesService.findAll();
      const machine = machines.find(m => m.code === machineName);
      
      if (!machine) {
        throw new BadRequestException(`–°—Ç–∞–Ω–æ–∫ —Å –∏–º–µ–Ω–µ–º ${machineName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      let currentOperationDetails = null;
      let shiftProgress = null;
      
      if (machine.currentOperation) {
        currentOperationDetails = await this.getOperationDetails(machine.currentOperation);
        const shiftData = await this.getShiftProgress(machine.currentOperation, machine.id);
        
        if (currentOperationDetails) {
          const totalProduced = shiftData.totalProduced || currentOperationDetails.actualQuantity || 0;
          const targetQuantity = currentOperationDetails.orderQuantity || 0;
          
          currentOperationDetails.producedQuantity = totalProduced;
          currentOperationDetails.isCompleted = totalProduced >= targetQuantity && targetQuantity > 0;
          
          shiftProgress = {
            totalProduced,
            remainingQuantity: Math.max(0, targetQuantity - totalProduced),
            completionPercentage: targetQuantity > 0 ? Math.round((totalProduced / targetQuantity) * 100) : 0,
            lastUpdateDate: shiftData.lastUpdateDate
          };
        }
      }
      
      return {
        id: machine.id.toString(),
        machineName: machine.code,
        machineType: machine.type,
        isAvailable: !machine.isOccupied,
        currentOperationId: machine.currentOperation?.toString(),
        lastFreedAt: machine.assignedAt,
        currentOperationDetails,
        shiftProgress,
        createdAt: machine.createdAt.toISOString(),
        updatedAt: machine.updatedAt.toISOString(),
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞–Ω–∫–∞ ${machineName}:`, error);
      throw error;
    }
  }

  @Put(':machineName/availability')
  @ApiOperation({ summary: '–û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω–∫–∞' })
  async updateAvailability(
    @Param('machineName') machineName: string,
    @Body() body: { isAvailable: boolean },
  ): Promise<MachineAvailability> {
    try {
      this.logger.log(`–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω–∫–∞:`);
      this.logger.log(`  - machineName: ${machineName}`);
      this.logger.log(`  - isAvailable: ${body.isAvailable}`);
      
      const machines = await this.machinesService.findAll();
      this.logger.log(`–ü–æ–ª—É—á–µ–Ω–æ ${machines.length} —Å—Ç–∞–Ω–∫–æ–≤ –∏–∑ –ë–î`);
      
      const machine = machines.find(m => m.code === machineName);
      if (!machine) {
        this.logger.error(`–°—Ç–∞–Ω–æ–∫ —Å –∏–º–µ–Ω–µ–º "${machineName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        this.logger.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏:', machines.map(m => m.code));
        throw new BadRequestException(`–°—Ç–∞–Ω–æ–∫ —Å –∏–º–µ–Ω–µ–º ${machineName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      this.logger.log(`–ù–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–æ–∫: ${machine.code} (ID: ${machine.id})`);
      
      const updateData: any = {
        isOccupied: !body.isAvailable
      };
      
      if (body.isAvailable) {
        // –ü—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if (machine.currentOperation) {
          const completionCheck = await this.checkOperationCompletion(machineName);
          
          if (completionCheck.isCompleted) {
            this.logger.log('üéØ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é');
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            return await this.completeOperation(machineName, { action: 'complete' });
          }
        }
        
        updateData.currentOperation = null;
        updateData.assignedAt = null;
        this.logger.log('–û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (—Å—Ç–∞–Ω–æ–∫ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è)');
      } else {
        updateData.assignedAt = new Date();
        this.logger.log('–û—Ç–º–µ—á–∞–µ–º —Å—Ç–∞–Ω–æ–∫ –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π');
      }
      
      this.logger.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateData);
      
      const updatedMachine = await this.machinesService.update(machine.id, updateData);
      this.logger.log('–°—Ç–∞–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω');
      
      let currentOperationDetails = null;
      if (updatedMachine.currentOperation) {
        currentOperationDetails = await this.getOperationDetails(updatedMachine.currentOperation);
      }
      
      const result = {
        id: updatedMachine.id.toString(),
        machineName: updatedMachine.code,
        machineType: updatedMachine.type,
        isAvailable: !updatedMachine.isOccupied,
        currentOperationId: updatedMachine.currentOperation?.toString(),
        lastFreedAt: updatedMachine.assignedAt,
        currentOperationDetails,
        createdAt: updatedMachine.createdAt.toISOString(),
        updatedAt: updatedMachine.updatedAt.toISOString(),
      };
      
      this.logger.log(`–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω–∫–∞ ${machineName}`);
      return result;
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω–∫–∞ ${machineName}:`, error);
      throw error;
    }
  }

  @Delete(':machineName/assign-operation')
  @ApiOperation({ summary: '–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å–æ —Å—Ç–∞–Ω–∫–∞ (—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π)' })
  async unassignOperation(
    @Param('machineName') machineName: string,
  ): Promise<MachineAvailability> {
    try {
      this.logger.log(`üóëÔ∏è –ù–∞—á–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç–∞–Ω–∫–∞: ${machineName}`);
      
      const machines = await this.machinesService.findAll();
      const machine = machines.find(m => m.code === machineName);
      
      if (!machine) {
        this.logger.error(`‚ùå –°—Ç–∞–Ω–æ–∫ —Å –∏–º–µ–Ω–µ–º "${machineName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        throw new BadRequestException(`–°—Ç–∞–Ω–æ–∫ —Å –∏–º–µ–Ω–µ–º ${machineName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      const currentOperationId = machine.currentOperation;
      this.logger.log(`üîß –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${currentOperationId || '–Ω–µ—Ç'}`);
      
      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞–Ω–æ–∫
      const updateData = {
        isOccupied: false,
        currentOperation: null,
        assignedAt: new Date(),
      };
      
      const updatedMachine = await this.machinesService.update(machine.id, updateData);
      this.logger.log('‚úÖ –°—Ç–∞–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (currentOperationId) {
        try {
          await this.dataSource.query(`
            UPDATE operations 
            SET status = 'PENDING', "assignedMachine" = NULL, "assignedAt" = NULL
            WHERE id = $1
          `, [currentOperationId]);
          
          this.logger.log(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è ${currentOperationId} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å PENDING`);
        } catch (dbError) {
          this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:`, dbError);
        }
      }
      
      const result = {
        id: updatedMachine.id.toString(),
        machineName: updatedMachine.code,
        machineType: updatedMachine.type,
        isAvailable: true,
        currentOperationId: undefined,
        lastFreedAt: updatedMachine.assignedAt,
        currentOperationDetails: null,
        createdAt: updatedMachine.createdAt.toISOString(),
        updatedAt: updatedMachine.updatedAt.toISOString(),
      };
      
      this.logger.log(`üéâ –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç–∞–Ω–∫–∞ ${machineName} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      return result;
      
    } catch (error) {
      this.logger.error(`üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç–∞–Ω–∫–∞ ${machineName}:`, error);
      throw error;
    }
  }

  @Post(':machineName/assign-operation')
  @ApiOperation({ summary: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ —Å—Ç–∞–Ω–æ–∫' })
  async assignOperation(
    @Param('machineName') machineName: string,
    @Body() body: { operationId: string },
  ): Promise<MachineAvailability> {
    try {
      this.logger.log(`–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${body.operationId} –Ω–∞ —Å—Ç–∞–Ω–æ–∫ ${machineName}`);
      const machines = await this.machinesService.findAll();
      const machine = machines.find(m => m.code === machineName);
      
      if (!machine) {
        throw new BadRequestException(`–°—Ç–∞–Ω–æ–∫ —Å –∏–º–µ–Ω–µ–º ${machineName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      
      const operationId = parseInt(body.operationId);
      
      const operationDetails = await this.getOperationDetails(operationId);
      if (!operationDetails) {
        throw new BadRequestException(`–û–ø–µ—Ä–∞—Ü–∏—è —Å ID ${operationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
      
      const updatedMachine = await this.machinesService.update(machine.id, {
        isOccupied: true,
        currentOperation: operationId,
        assignedAt: new Date(),
      });
      
      try {
        await this.dataSource.query(`
          UPDATE operations 
          SET status = 'IN_PROGRESS', "assignedMachine" = $1, "assignedAt" = NOW()
          WHERE id = $2
        `, [machine.id, operationId]);
        
        this.logger.log(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è ${operationId} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω–æ–∫ ${machineName}`);
      } catch (dbError) {
        this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:', dbError);
      }
      
      return {
        id: updatedMachine.id.toString(),
        machineName: updatedMachine.code,
        machineType: updatedMachine.type,
        isAvailable: false,
        currentOperationId: updatedMachine.currentOperation?.toString(),
        lastFreedAt: updatedMachine.assignedAt,
        currentOperationDetails: {
          ...operationDetails,
          producedQuantity: 0
        },
        createdAt: updatedMachine.createdAt.toISOString(),
        updatedAt: updatedMachine.updatedAt.toISOString(),
      };
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞–Ω–æ–∫ ${machineName}:`, error);
      throw error;
    }
  }

  // Legacy –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  @Get('legacy')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞–Ω–∫–∏ (legacy)' })
  async findAllLegacy(): Promise<Machine[]> {
    try {
      return await this.machinesService.findAll();
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –≤ findAllLegacy:', error);
      throw error;
    }
  }

  @Get('legacy/:id')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–æ–∫ –ø–æ ID (legacy)' })
  async findOne(@Param('id') id: string): Promise<Machine> {
    return this.machinesService.findOne(+id);
  }

  @Post('legacy')
  @ApiOperation({ summary: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫ (legacy)' })
  async create(@Body() createMachineDto: CreateMachineDto): Promise<Machine> {
    return this.machinesService.create(createMachineDto);
  }

  @Put('legacy/:id')
  @ApiOperation({ summary: '–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–æ–∫ (legacy)' })
  async update(
    @Param('id') id: string,
    @Body() updateMachineDto: UpdateMachineDto,
  ): Promise<Machine> {
    return this.machinesService.update(+id, updateMachineDto);
  }

  @Put('legacy/:id/toggle')
  @ApiOperation({ summary: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å—Ç–∞–Ω–∫–∞ (legacy)' })
  async toggleOccupancy(@Param('id') id: string): Promise<Machine> {
    return this.machinesService.toggleOccupancy(+id);
  }

  @Delete('legacy/:id')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞–Ω–æ–∫ (legacy)' })
  async remove(@Param('id') id: string): Promise<void> {
    return this.machinesService.remove(+id);
  }
}
