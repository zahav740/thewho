/**
 * @file: operation-completion-check.controller.ts
 * @description: –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
 * @dependencies: operations.service, shifts.service
 * @created: 2025-06-12
 */
import {
  Controller,
  Get,
  Post,
  Body,
  Logger,
  BadRequestException,
  Param,
} from '@nestjs/common';
import { ApiTags, ApiOperation } from '@nestjs/swagger';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Operation } from '../../database/entities/operation.entity';
import { ShiftRecord } from '../../database/entities/shift-record.entity';
import { Order } from '../../database/entities/order.entity';
import { Machine } from '../../database/entities/machine.entity';

interface CompletionCheckResult {
  operationId: number;
  isCompleted: boolean;
  completedQuantity: number;
  plannedQuantity: number;
  progress: number;
  orderInfo: {
    drawingNumber: string;
    quantity: number;
  };
  operationInfo: {
    operationNumber: number;
    operationType: string;
  };
}

interface HandleCompletionDto {
  operationId: number;
  action: 'close' | 'continue' | 'plan';
  completedQuantity: number;
}

@ApiTags('operation-completion-check')
@Controller('operations/completion')
export class OperationCompletionCheckController {
  private readonly logger = new Logger(OperationCompletionCheckController.name);

  constructor(
    @InjectRepository(Operation)
    private readonly operationRepository: Repository<Operation>,
    @InjectRepository(ShiftRecord)
    private readonly shiftRecordRepository: Repository<ShiftRecord>,
    @InjectRepository(Order)
    private readonly orderRepository: Repository<Order>,
    @InjectRepository(Machine)
    private readonly machineRepository: Repository<Machine>,
  ) {}

  @Get('check/:operationId')
  @ApiOperation({ summary: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É' })
  async checkOperationCompletion(@Param('operationId') operationId: number): Promise<CompletionCheckResult> {
    try {
      this.logger.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}`);
      
      // –ù–∞—Ö–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∑–∞–∫–∞–∑–æ–º
      const operation = await this.operationRepository.findOne({
        where: { id: operationId },
        relations: ['order']
      });
      
      if (!operation) {
        throw new BadRequestException('–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      const shiftRecords = await this.shiftRecordRepository.find({
        where: { operationId: operationId, archived: false }
      });

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
      const totalCompleted = shiftRecords.reduce((total, record) => {
        const dayShift = record.dayShiftQuantity || 0;
        const nightShift = record.nightShiftQuantity || 0;
        return total + dayShift + nightShift;
      }, 0);

      // –ü–ª–∞–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∑–∞–∫–∞–∑–µ
      const plannedQuantity = operation.order?.quantity || 0;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const progress = plannedQuantity > 0 ? Math.round((totalCompleted / plannedQuantity) * 100) : 0;
      
      // –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
      // 1. –ï—Å—Ç—å –ø–ª–∞–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      // 2. –í—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–µ –º–µ–Ω—å—à–µ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      const isCompleted = plannedQuantity > 0 && totalCompleted >= plannedQuantity;
      
      this.logger.debug(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ${totalCompleted}, –ø–ª–∞–Ω ${plannedQuantity}, –ø—Ä–æ–≥—Ä–µ—Å—Å ${progress}%, –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${isCompleted}`);

      const result: CompletionCheckResult = {
        operationId: operationId,
        isCompleted,
        completedQuantity: totalCompleted,
        plannedQuantity,
        progress,
        orderInfo: {
          drawingNumber: operation.order?.drawingNumber || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          quantity: plannedQuantity
        },
        operationInfo: {
          operationNumber: operation.operationNumber,
          operationType: operation.operationType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        }
      };

      this.logger.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ${totalCompleted}/${plannedQuantity}, –ø—Ä–æ–≥—Ä–µ—Å—Å ${progress}%, –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${isCompleted}`);
      return result;
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      throw new BadRequestException(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${error.message}`);
    }
  }

  @Get('check-all-active')
  @ApiOperation({ summary: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ' })
  async checkAllActiveOperations(): Promise<CompletionCheckResult[]> {
    try {
      this.logger.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ');
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ IN_PROGRESS –∏–ª–∏ ASSIGNED
      const activeOperations = await this.operationRepository.find({
        where: [
          { status: 'IN_PROGRESS' },
          { status: 'ASSIGNED' }
        ],
        relations: ['order']
      });

      const results: CompletionCheckResult[] = [];

      for (const operation of activeOperations) {
        try {
          const checkResult = await this.checkOperationCompletion(operation.id);
          
          // –í–ê–ñ–ù–û: –æ–ø–µ—Ä–∞—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
          // 1. –µ—Å—Ç—å –ø–ª–∞–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (> 0)
          // 2. –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ >= –ø–ª–∞–Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
          // 3. –ø—Ä–æ–≥—Ä–µ—Å—Å >= 100%
          const isReallyCompleted = checkResult.isCompleted && 
                                   checkResult.plannedQuantity > 0 && 
                                   checkResult.completedQuantity >= checkResult.plannedQuantity &&
                                   checkResult.progress >= 100;
          
          if (isReallyCompleted) {
            this.logger.log(`üéØ –û–ø–µ—Ä–∞—Ü–∏—è ${operation.id} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${checkResult.completedQuantity}/${checkResult.plannedQuantity}`);
            results.push(checkResult);
          } else {
            this.logger.debug(`‚è≥ –û–ø–µ—Ä–∞—Ü–∏—è ${operation.id} –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${checkResult.completedQuantity}/${checkResult.plannedQuantity} (${checkResult.progress}%)`);
          }
        } catch (error) {
          this.logger.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.id}:`, error);
        }
      }

      this.logger.log(`–ù–∞–π–¥–µ–Ω–æ ${results.length} –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ ${activeOperations.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö`);
      return results;
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
      throw new BadRequestException(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π: ${error.message}`);
    }
  }

  @Post('handle')
  @ApiOperation({ summary: '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–∑–∞–∫—Ä—ã—Ç—å/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å/–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å)' })
  async handleCompletion(@Body() dto: HandleCompletionDto) {
    try {
      this.logger.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${dto.operationId}, –¥–µ–π—Å—Ç–≤–∏–µ: ${dto.action}`);
      
      const operation = await this.operationRepository.findOne({
        where: { id: dto.operationId },
        relations: ['order']
      });
      
      if (!operation) {
        throw new BadRequestException('–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      switch (dto.action) {
        case 'close':
          // –ó–∞–∫—Ä—ã—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å COMPLETED –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—ã
          await this.closeOperation(dto.operationId, dto.completedQuantity);
          return {
            success: true,
            message: '–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã',
            action: 'closed'
          };

        case 'continue':
          // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
          this.logger.log(`–û–ø–µ—Ä–∞—Ü–∏—è ${dto.operationId} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è`);
          return {
            success: true,
            message: '–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è, –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ —Å–±—Ä–æ—à–µ–Ω–æ',
            action: 'continued'
          };

        case 'plan':
          // –°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å - –∑–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          await this.closeOperation(dto.operationId, dto.completedQuantity);
          return {
            success: true,
            message: '–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞, –≥–æ—Ç–æ–≤–æ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏',
            action: 'planned',
            shouldOpenPlanning: true,
            machineId: operation.assignedMachine
          };

        default:
          throw new BadRequestException('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
      }
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      throw new BadRequestException(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${error.message}`);
    }
  }

  private async closeOperation(operationId: number, completedQuantity: number) {
    // –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞–Ω–∫–µ
    const operation = await this.operationRepository.findOne({
      where: { id: operationId }
    });

    if (!operation) {
      throw new Error(`–û–ø–µ—Ä–∞—Ü–∏—è ${operationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
    await this.operationRepository.update(operationId, {
      status: 'COMPLETED',
      completedAt: new Date(),
      actualQuantity: completedQuantity,
      assignedMachine: null // –°–Ω–∏–º–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞
    });

    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞–Ω–æ–∫
    if (operation.assignedMachine) {
      await this.machineRepository.update(operation.assignedMachine, {
        isOccupied: false,
        currentOperation: null,
        assignedAt: null,
        updatedAt: new Date()
      });
      
      this.logger.log(`–°—Ç–∞–Ω–æ–∫ ${operation.assignedMachine} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω`);
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ assignedMachine, machineId –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ entity

    // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω
    await this.shiftRecordRepository.update(
      { operationId: operationId },
      { 
        archived: true,
        archivedAt: new Date()
      }
    );

    this.logger.log(`–û–ø–µ—Ä–∞—Ü–∏—è ${operationId} –∑–∞–∫—Ä—ã—Ç–∞, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ${completedQuantity} –¥–µ—Ç–∞–ª–µ–π, —Å—Ç–∞–Ω–æ–∫ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω`);
  }
}
