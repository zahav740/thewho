/**
 * @file: enhanced-excel-import.service.ts
 * @description: –£–õ–£–ß–®–ï–ù–ù–´–ô —Å–µ—Ä–≤–∏—Å –∏–º–ø–æ—Ä—Ç–∞ Excel —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î
 * @dependencies: exceljs, orders.service
 * @created: 2025-06-09
 */
import { Injectable, BadRequestException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as ExcelJS from 'exceljs';
import { Order, Priority } from '../../database/entities/order.entity';
import { Operation, OperationType } from '../../database/entities/operation.entity';
import { OrdersService } from './orders.service';
import type { Express } from 'express';

export interface ColorFilter {
  color: string;
  label: string;
  description: string;
  priority: number;
  selected: boolean;
}

export interface ImportSettings {
  colorFilters: ColorFilter[];
  columnMapping: ColumnMapping[];
  importOnlySelected: boolean;
  clearExistingData?: boolean;
  skipDuplicates?: boolean;
}

export interface ColumnMapping {
  fieldName: string;
  excelColumn: string;
  description: string;
  required?: boolean;
}

export interface EnhancedImportResult {
  totalRows: number;
  processedRows: number;
  skippedRows: number;
  created: number;
  updated: number;
  duplicatesSkipped: number;
  errors: Array<{ row: number; order: string; error: string; color?: string }>;
  colorStatistics: Record<string, number>;
  summary: {
    greenOrders: number;   // –ì–æ—Ç–æ–≤—ã–µ –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É
    yellowOrders: number;  // –û–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    redOrders: number;     // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    blueOrders: number;    // –ü–ª–∞–Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
  };
  filters: {
    applied: ColorFilter[];
    total: number;
    selected: number;
  };
}

interface ParsedOrder {
  drawingNumber: string;
  quantity: number;
  deadline: Date;
  priority: Priority;
  workType?: string;
  rowColor?: string;
  rowNumber: number;
  operations: Array<{
    operationNumber: number;
    operationType: OperationType;
    machineAxes: number;
    estimatedTime: number;
  }>;
}

@Injectable()
export class EnhancedExcelImportService {
  constructor(
    @InjectRepository(Order)
    private readonly orderRepository: Repository<Order>,
    @InjectRepository(Operation)
    private readonly operationRepository: Repository<Operation>,
    private readonly ordersService: OrdersService,
  ) {}

  /**
   * –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î: –ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç Excel —Ñ–∞–π–ª–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  async importFullExcelWithFilters(
    file: Express.Multer.File,
    settings: ImportSettings,
  ): Promise<EnhancedImportResult> {
    console.log('üöÄ –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢ EXCEL: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', {
      originalname: file.originalname,
      size: file.size,
      hasBuffer: !!file.buffer,
      bufferSize: file.buffer?.length,
      importSettings: {
        colorFiltersCount: settings.colorFilters.length,
        selectedFiltersCount: settings.colorFilters.filter(f => f.selected).length,
        importOnlySelected: settings.importOnlySelected,
        clearExisting: settings.clearExistingData,
        skipDuplicates: settings.skipDuplicates
      }
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if (!file || !file.buffer) {
      throw new BadRequestException('–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω');
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if (settings.clearExistingData) {
      console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
      await this.clearExistingOrders();
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞
    const { orders, errors, statistics } = await this.parseExcelWithColors(file, settings);

    // –ò–º–ø–æ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const importResult = await this.importOrdersToDatabase(orders, errors, settings);

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const enhancedResult: EnhancedImportResult = {
      ...importResult,
      colorStatistics: statistics.colorCounts,
      summary: statistics.summary,
      filters: {
        applied: settings.colorFilters.filter(f => f.selected),
        total: settings.colorFilters.length,
        selected: settings.colorFilters.filter(f => f.selected).length
      }
    };

    console.log('‚úÖ –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù:', enhancedResult);
    
    return enhancedResult;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ü–≤–µ—Ç–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  private async parseExcelWithColors(
    file: Express.Multer.File,
    settings: ImportSettings
  ): Promise<{
    orders: ParsedOrder[];
    errors: Array<{ row: number; order: string; error: string; color?: string }>;
    statistics: {
      colorCounts: Record<string, number>;
      summary: { greenOrders: number; yellowOrders: number; redOrders: number; blueOrders: number };
    };
  }> {
    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.load(file.buffer);

    const worksheet = workbook.getWorksheet(1);
    if (!worksheet) {
      throw new BadRequestException('–†–∞–±–æ—á–∏–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    console.log('üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Excel:', {
      name: worksheet.name,
      rowCount: worksheet.rowCount,
      columnCount: worksheet.columnCount
    });

    const orders: ParsedOrder[] = [];
    const errors: Array<{ row: number; order: string; error: string; color?: string }> = [];
    const colorCounts: Record<string, number> = { green: 0, yellow: 0, red: 0, blue: 0, other: 0 };

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for (let rowNumber = 2; rowNumber <= worksheet.rowCount; rowNumber++) {
      try {
        const row = worksheet.getRow(rowNumber);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç—Ä–æ–∫–∏
        const rowColor = this.determineRowColor(row);
        colorCounts[rowColor] = (colorCounts[rowColor] || 0) + 1;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
        if (this.shouldProcessRowByFilters(row, rowColor, settings)) {
          const order = this.parseRowToOrder(row, rowNumber, rowColor);
          if (order) {
            orders.push(order);
            console.log(`‚úÖ –°—Ç—Ä–æ–∫–∞ ${rowNumber}: ${order.drawingNumber} (${rowColor})`);
          }
        } else {
          console.log(`üé® –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É ${rowNumber} (${rowColor}, –Ω–µ –≤ —Ñ–∏–ª—å—Ç—Ä–µ)`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${rowNumber}:`, error.message);
        errors.push({
          row: rowNumber,
          order: `–°—Ç—Ä–æ–∫–∞ ${rowNumber}`,
          error: error.message,
          color: 'unknown'
        });
      }
    }

    const summary = {
      greenOrders: colorCounts.green || 0,
      yellowOrders: colorCounts.yellow || 0,
      redOrders: colorCounts.red || 0,
      blueOrders: colorCounts.blue || 0
    };

    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–≤–µ—Ç–∞–º:', colorCounts);
    console.log('üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤:', orders.length);

    return { orders, errors, statistics: { colorCounts, summary } };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
   */
  private determineRowColor(row: ExcelJS.Row): string {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç —è—á–µ–π–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const firstCell = row.getCell(1);
    const cellColor = this.getCellColor(firstCell);
    if (cellColor) return cellColor;

    // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —è—á–µ–µ–∫
    const values = [];
    for (let i = 1; i <= Math.min(10, row.cellCount); i++) {
      const cellValue = row.getCell(i).value;
      if (cellValue) {
        values.push(String(cellValue).toLowerCase());
      }
    }

    const allText = values.join(' ');

    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
    if (allText.includes('–≥–æ—Ç–æ–≤') || allText.includes('ready') || allText.includes('completed') || allText.includes('done')) {
      return 'green'; // –ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    } else if (allText.includes('–∫—Ä–∏—Ç–∏—á') || allText.includes('—Å—Ä–æ—á–Ω') || allText.includes('critical') || allText.includes('urgent')) {
      return 'red'; // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    } else if (allText.includes('–ø–ª–∞–Ω') || allText.includes('plan') || allText.includes('scheduled')) {
      return 'blue'; // –ü–ª–∞–Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    } else {
      return 'yellow'; // –û–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —è—á–µ–π–∫–∏
   */
  private getCellColor(cell: ExcelJS.Cell): string | null {
    try {
      const fill = cell.style?.fill;
      if (fill && fill.type === 'pattern') {
        const patternFill = fill as ExcelJS.FillPattern;
        const argb = patternFill.fgColor?.argb;
        
        if (argb) {
          // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ Excel
          const colorMap: Record<string, string> = {
            'FF00FF00': 'green',   // –ó–µ–ª–µ–Ω—ã–π
            'FF92D050': 'green',   // –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
            'FFFFFF00': 'yellow',  // –ñ–µ–ª—Ç—ã–π
            'FFFFCC00': 'yellow',  // –ñ–µ–ª—Ç–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
            'FFFF0000': 'red',     // –ö—Ä–∞—Å–Ω—ã–π
            'FFFF6666': 'red',     // –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
            'FF0000FF': 'blue',    // –°–∏–Ω–∏–π
            'FF6699CC': 'blue',    // –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
          };
          
          return colorMap[argb] || null;
        }
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
    }
    
    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
   */
  private shouldProcessRowByFilters(
    row: ExcelJS.Row, 
    rowColor: string, 
    settings: ImportSettings
  ): boolean {
    // –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
    if (!settings.importOnlySelected) {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ü–≤–µ—Ç —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    const selectedColors = settings.colorFilters
      .filter(filter => filter.selected)
      .map(filter => filter.color);

    return selectedColors.includes(rowColor);
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
   * –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ C, E, H, K
   */
  private parseRowToOrder(row: ExcelJS.Row, rowNumber: number, rowColor: string): ParsedOrder | null {
    // –ü–†–ê–í–ò–õ–¨–ù–´–ô –ú–ê–ü–ü–ò–ù–ì: C=–Ω–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞, E=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, H=—Å—Ä–æ–∫, K=–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    const drawingNumber = row.getCell('C').value?.toString()?.trim(); // –ö–æ–ª–æ–Ω–∫–∞ C
    if (!drawingNumber) return null;

    const quantity = parseInt(row.getCell('E').value?.toString() || '1', 10); // –ö–æ–ª–æ–Ω–∫–∞ E
    const deadline = this.parseDate(row.getCell('H').value); // –ö–æ–ª–æ–Ω–∫–∞ H
    const priority = this.parsePriorityFromColorAndText(rowColor, row.getCell('K').value?.toString()); // –ö–æ–ª–æ–Ω–∫–∞ K
    const workType = row.getCell('F').value?.toString()?.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω'; // –ö–æ–ª–æ–Ω–∫–∞ F –¥–ª—è —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã

    // –ü–∞—Ä—Å–∏–º –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∫–æ–ª–æ–Ω–∫–∏ –ø–æ—Å–ª–µ K)
    const operations = this.parseOperations(row);

    console.log(`üìã –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ ${rowNumber}: –ß–µ—Ä—Ç–µ–∂=${drawingNumber}, –ö–æ–ª-–≤–æ=${quantity}, –°—Ä–æ–∫=${deadline?.toLocaleDateString()}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç=${priority}`);

    return {
      drawingNumber,
      quantity,
      deadline,
      priority,
      workType,
      rowColor,
      rowNumber,
      operations,
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–∞ –∏ —Ç–µ–∫—Å—Ç–∞
   */
  private parsePriorityFromColorAndText(color: string, priorityText?: string): Priority {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
    if (priorityText) {
      const text = priorityText.toLowerCase();
      if (text.includes('1') || text.includes('–∫—Ä–∏—Ç–∏—á') || text.includes('critical')) {
        return Priority.HIGH;
      } else if (text.includes('2') || text.includes('–≤—ã—Å–æ–∫') || text.includes('high')) {
        return Priority.HIGH;
      } else if (text.includes('3') || text.includes('—Å—Ä–µ–¥–Ω') || text.includes('medium')) {
        return Priority.MEDIUM;
      } else if (text.includes('4') || text.includes('–Ω–∏–∑–∫') || text.includes('low')) {
        return Priority.LOW;
      }
    }

    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ü–≤–µ—Ç—É
    const colorToPriority: Record<string, Priority> = {
      red: Priority.HIGH,      // –ö—Ä–∞—Å–Ω—ã–π = –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      green: Priority.MEDIUM,  // –ó–µ–ª–µ–Ω—ã–π = —Å—Ä–µ–¥–Ω–∏–π (–≥–æ—Ç–æ–≤—ã–µ)
      yellow: Priority.MEDIUM, // –ñ–µ–ª—Ç—ã–π = —Å—Ä–µ–¥–Ω–∏–π (–æ–±—ã—á–Ω—ã–µ)
      blue: Priority.LOW,      // –°–∏–Ω–∏–π = –Ω–∏–∑–∫–∏–π (–ø–ª–∞–Ω–æ–≤—ã–µ)
    };

    return colorToPriority[color] || Priority.MEDIUM;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
   */
  private parseDate(value: any): Date {
    if (value instanceof Date) return value;
    
    if (typeof value === 'number') {
      // Excel serial date
      return new Date((value - 25569) * 86400 * 1000);
    }
    
    if (typeof value === 'string') {
      const date = new Date(value);
      if (!isNaN(date.getTime())) return date;
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü
    const defaultDate = new Date();
    defaultDate.setMonth(defaultDate.getMonth() + 1);
    return defaultDate;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ —Å—Ç—Ä–æ–∫–∏
   * –û–ë–ù–û–í–õ–ï–ù–û: –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –∫–æ–ª–æ–Ω–∫–∏ K (11)
   */
  private parseOperations(row: ExcelJS.Row): ParsedOrder['operations'] {
    const operations: ParsedOrder['operations'] = [];
    
    // –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∫–æ–ª–æ–Ω–∫–∏ L (12) - –ø–æ—Å–ª–µ K
    for (let i = 12; i <= Math.min(30, row.cellCount); i += 4) {
      const operationNumber = parseInt(row.getCell(i).value?.toString() || '0', 10);
      if (!operationNumber) break;

      const operationType = this.parseOperationType(row.getCell(i + 1).value?.toString());
      const machineAxes = parseInt(row.getCell(i + 2).value?.toString() || '3', 10);
      const estimatedTime = parseInt(row.getCell(i + 3).value?.toString() || '60', 10);

      operations.push({
        operationNumber,
        operationType,
        machineAxes,
        estimatedTime,
      });
    }

    // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
    if (operations.length === 0) {
      operations.push({
        operationNumber: 1,
        operationType: OperationType.MILLING,
        machineAxes: 3,
        estimatedTime: 60,
      });
    }

    return operations;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  private parseOperationType(value?: string): OperationType {
    if (!value) return OperationType.MILLING;

    const text = value.toLowerCase();
    if (text.includes('—Ç–æ–∫') || text.includes('turn') || text.includes('—Ç')) {
      return OperationType.TURNING;
    }
    
    return OperationType.MILLING; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  private async importOrdersToDatabase(
    orders: ParsedOrder[],
    existingErrors: Array<{ row: number; order: string; error: string; color?: string }>,
    settings: ImportSettings
  ): Promise<{
    totalRows: number;
    processedRows: number;
    skippedRows: number;
    created: number;
    updated: number;
    duplicatesSkipped: number;
    errors: Array<{ row: number; order: string; error: string; color?: string }>;
  }> {
    const result = {
      totalRows: orders.length,
      processedRows: 0,
      skippedRows: 0,
      created: 0,
      updated: 0,
      duplicatesSkipped: 0,
      errors: [...existingErrors],
    };

    console.log(`üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ${orders.length} –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);

    for (const orderData of orders) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
        const existingOrder = await this.ordersService.findByDrawingNumber(orderData.drawingNumber);

        if (existingOrder && settings.skipDuplicates) {
          result.duplicatesSkipped++;
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: ${orderData.drawingNumber}`);
          continue;
        }

        if (existingOrder) {
          await this.updateExistingOrder(existingOrder, orderData);
          result.updated++;
          console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: ${orderData.drawingNumber}`);
        } else {
          await this.createNewOrder(orderData);
          result.created++;
          console.log(`‚ú® –°–æ–∑–¥–∞–Ω: ${orderData.drawingNumber}`);
        }

        result.processedRows++;

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–∞ ${orderData.drawingNumber}:`, error.message);
        result.errors.push({
          row: orderData.rowNumber,
          order: orderData.drawingNumber,
          error: error.message,
          color: orderData.rowColor
        });
        result.skippedRows++;
      }
    }

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞:', result);
    return result;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
   */
  private async createNewOrder(orderData: ParsedOrder): Promise<void> {
    const order = this.orderRepository.create({
      drawingNumber: orderData.drawingNumber,
      quantity: orderData.quantity,
      remainingQuantity: orderData.quantity,
      deadline: orderData.deadline,
      priority: orderData.priority,
      workType: orderData.workType,
      status: 'planned',
    });

    const savedOrder = await this.orderRepository.save(order);

    // –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    for (const opData of orderData.operations) {
      const operation = this.operationRepository.create({
        sequenceNumber: opData.operationNumber,
        operationType: opData.operationType,
        estimatedTime: opData.estimatedTime,
        order: savedOrder,
      });
      await this.operationRepository.save(operation);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
   */
  private async updateExistingOrder(existingOrder: Order, orderData: ParsedOrder): Promise<void> {
    existingOrder.quantity = orderData.quantity;
    existingOrder.remainingQuantity = orderData.quantity;
    existingOrder.deadline = orderData.deadline;
    existingOrder.priority = orderData.priority;
    existingOrder.workType = orderData.workType;

    await this.orderRepository.save(existingOrder);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    await this.operationRepository.delete({ order: { id: existingOrder.id } });

    for (const opData of orderData.operations) {
      const operation = this.operationRepository.create({
        sequenceNumber: opData.operationNumber,
        operationType: opData.operationType,
        estimatedTime: opData.estimatedTime,
        order: existingOrder,
      });
      await this.operationRepository.save(operation);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
   */
  private async clearExistingOrders(): Promise<void> {
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏...');
    
    await this.operationRepository.delete({});
    await this.orderRepository.delete({});
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}
