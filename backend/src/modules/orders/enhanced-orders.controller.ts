/**
 * @file: enhanced-orders.controller.ts
 * @description: –£–õ–£–ß–®–ï–ù–ù–´–ô –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –ø–æ–ª–Ω—ã–º –∏–º–ø–æ—Ä—Ç–æ–º Excel –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
 * @dependencies: enhanced-excel-import.service
 * @created: 2025-06-09
 */
import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Param,
  Query,
  UseInterceptors,
  UploadedFile,
  Res,
} from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
import { ApiTags, ApiOperation, ApiConsumes } from '@nestjs/swagger';
import { Response } from 'express';
import type { Express } from 'express';
import { OrdersService } from './orders.service';
import { EnhancedExcelImportService, ImportSettings, EnhancedImportResult } from './enhanced-excel-import.service';
import { ExcelPreviewService, ExcelPreviewResult, ExcelOrderPreview, ImportSelection } from './excel-preview.service';
import { CreateOrderDto } from './dto/create-order.dto';
import { UpdateOrderDto } from './dto/update-order.dto';
import { OrdersFilterDto } from './dto/orders-filter.dto';
import { Order } from '../../database/entities/order.entity';

@ApiTags('enhanced-orders')
@Controller('enhanced-orders')
export class EnhancedOrdersController {
  constructor(
    private readonly ordersService: OrdersService,
    private readonly enhancedExcelImportService: EnhancedExcelImportService,
    private readonly excelPreviewService: ExcelPreviewService,
  ) {}

  @Get()
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π' })
  async findAll(@Query() filterDto: OrdersFilterDto) {
    return this.ordersService.findAll(filterDto);
  }

  @Get(':id')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID' })
  async findOne(@Param('id') id: string): Promise<Order> {
    return this.ordersService.findOne(id);
  }

  @Post()
  @ApiOperation({ summary: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑' })
  async create(@Body() createOrderDto: CreateOrderDto): Promise<Order> {
    return this.ordersService.create(createOrderDto);
  }

  @Put(':id')
  @ApiOperation({ summary: '–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑' })
  async update(
    @Param('id') id: string,
    @Body() updateOrderDto: UpdateOrderDto,
  ): Promise<Order> {
    return this.ordersService.update(id, updateOrderDto);
  }

  @Delete(':id')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑' })
  async remove(@Param('id') id: string): Promise<void> {
    return this.ordersService.remove(id);
  }

  @Delete('batch/selected')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã' })
  async removeBatch(@Body('ids') ids: string[]): Promise<{ deleted: number }> {
    const deleted = await this.ordersService.removeBatch(ids);
    return { deleted };
  }

  @Delete('all/confirm')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã' })
  async removeAll(@Body('confirm') confirm: boolean): Promise<{ deleted: number }> {
    if (!confirm) {
      throw new Error('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }
    const deleted = await this.ordersService.removeAll();
    return { deleted };
  }

  @Post('upload-excel-full')
  @ApiOperation({ 
    summary: 'üöÄ –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢ EXCEL –° –§–ò–õ–¨–¢–†–ê–ú–ò –í –ë–î',
    description: '–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–µ—Å—å Excel —Ñ–∞–π–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–º–ø–æ—Ä—Ç–∞'
  })
  @ApiConsumes('multipart/form-data')
  @UseInterceptors(FileInterceptor('excel', {
    fileFilter: (req, file, cb) => {
      console.log('üîç –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞:', {
        originalname: file.originalname,
        mimetype: file.mimetype,
        size: file.size
      });
      
      const allowedTypes = [
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.ms-excel',
        'application/octet-stream'
      ];
      
      const isValidType = allowedTypes.includes(file.mimetype) || !!file.originalname.match(/\.(xlsx?|csv)$/);
      
      if (isValidType) {
        console.log('‚úÖ –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢: –§–∞–π–ª –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É');
        cb(null, true);
      } else {
        console.error('‚ùå –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', file.mimetype);
        cb(new Error('–¢–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls) —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞'), false);
      }
    },
    limits: {
      fileSize: 100 * 1024 * 1024, // 100MB –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
      fieldSize: 100 * 1024 * 1024,
    },
  }))
  async uploadExcelFull(
    @UploadedFile() file: Express.Multer.File,
    @Body() body: any,
  ): Promise<{
    success: boolean;
    message: string;
    data: EnhancedImportResult;
    file: any;
  }> {
    try {
      console.log('üöÄ –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢ EXCEL: –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª:', {
        originalname: file?.originalname,
        size: file?.size,
        mimetype: file?.mimetype,
        hasBuffer: !!file?.buffer,
        bufferSize: file?.buffer?.length,
        bodyData: Object.keys(body || {})
      });

      if (!file || !file.buffer) {
        throw new Error('–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç buffer');
      }

      // –ü–∞—Ä—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
      let importSettings: ImportSettings;
      
      try {
        importSettings = body.importSettings ? JSON.parse(body.importSettings) : this.getDefaultImportSettings();
        console.log('üìã –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞:', {
          colorFiltersCount: importSettings.colorFilters?.length || 0,
          selectedFiltersCount: importSettings.colorFilters?.filter(f => f.selected)?.length || 0,
          importOnlySelected: importSettings.importOnlySelected,
          clearExisting: importSettings.clearExistingData,
          skipDuplicates: importSettings.skipDuplicates
        });
      } catch (parseError) {
        console.error('‚ö†Ô∏è –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', parseError);
        importSettings = this.getDefaultImportSettings();
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
      console.log('üîÑ –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢: –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
      const result = await this.enhancedExcelImportService.importFullExcelWithFilters(file, importSettings);
      
      console.log('‚úÖ –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢: –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ:', {
        totalRows: result.totalRows,
        processedRows: result.processedRows,
        created: result.created,
        updated: result.updated,
        errors: result.errors?.length || 0,
        summary: result.summary
      });

      return {
        success: true,
        message: `–ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.processedRows} –∏–∑ ${result.totalRows} —Å—Ç—Ä–æ–∫. –°–æ–∑–¥–∞–Ω–æ: ${result.created}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updated}`,
        data: result,
        file: {
          originalname: file.originalname,
          size: file.size,
          fullImport: true,
          bufferProcessed: true
        }
      };

    } catch (error) {
      console.error('‚ùå –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`,
        data: null as any,
        file: {
          originalname: file?.originalname || 'unknown',
          size: file?.size || 0,
          error: error.message
        }
      };
    }
  }

  @Post('analyze-excel')
  @ApiOperation({ 
    summary: 'üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó EXCEL –§–ê–ô–õ–ê',
    description: '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Excel —Ñ–∞–π–ª –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞'
  })
  @ApiConsumes('multipart/form-data')
  @UseInterceptors(FileInterceptor('excel', {
    fileFilter: (req, file, cb) => {
      const allowedTypes = [
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.ms-excel',
        'application/octet-stream'
      ];
      
      const isValidType = allowedTypes.includes(file.mimetype) || !!file.originalname.match(/\.(xlsx?|csv)$/);
      cb(null, isValidType);
    },
    limits: {
      fileSize: 50 * 1024 * 1024, // 50MB
    },
  }))
  async analyzeExcelFile(
    @UploadedFile() file: Express.Multer.File,
  ): Promise<{
    success: boolean;
    data: ExcelPreviewResult;
    message: string;
  }> {
    try {
      console.log('üîç –ê–ù–ê–õ–ò–ó EXCEL: –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:', file.originalname);

      const analysisResult = await this.excelPreviewService.analyzeExcelFile(file);
      
      console.log('‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù:', {
        fileName: analysisResult.fileName,
        totalOrders: analysisResult.orders.length,
        colorsFound: Object.keys(analysisResult.colorStatistics).length
      });

      return {
        success: true,
        data: analysisResult,
        message: `–ù–∞–π–¥–µ–Ω–æ ${analysisResult.orders.length} –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª–µ ${analysisResult.fileName}`
      };

    } catch (error) {
      console.error('‚ùå –ê–ù–ê–õ–ò–ó EXCEL: –û—à–∏–±–∫–∞:', error);
      throw error;
    }
  }
  @ApiOperation({ 
    summary: 'üëÅÔ∏è –ü–†–ï–í–¨–Æ EXCEL –° –ê–ù–ê–õ–ò–ó–û–ú –§–ò–õ–¨–¢–†–û–í',
    description: '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é Excel —Ñ–∞–π–ª–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ü–≤–µ—Ç–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏'
  })
  @ApiConsumes('multipart/form-data')
  @UseInterceptors(FileInterceptor('excel', {
    fileFilter: (req, file, cb) => {
      const allowedTypes = [
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.ms-excel',
        'application/octet-stream'
      ];
      
      const isValidType = allowedTypes.includes(file.mimetype) || !!file.originalname.match(/\.(xlsx?|csv)$/);
      cb(null, isValidType);
    },
    limits: {
      fileSize: 50 * 1024 * 1024,
    },
  }))
  async previewExcel(
    @UploadedFile() file: Express.Multer.File,
  ): Promise<{
    success: boolean;
    preview: any[];
    statistics: any;
    recommendedFilters: any[];
    totalRows: number;
  }> {
    try {
      console.log('üëÅÔ∏è –ü–†–ï–í–¨–Æ EXCEL: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞:', file.originalname);

      // –î–ª—è –ø—Ä–µ–≤—å—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
      const previewSettings: ImportSettings = {
        ...this.getDefaultImportSettings(),
        importOnlySelected: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        clearExistingData: false   // –ù–µ —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø—Ä–µ–≤—å—é
      };

      // –í—ã–ø–æ–ª–Ω—è–µ–º "—Å—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω" –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
      const result = await this.enhancedExcelImportService.importFullExcelWithFilters(file, {
        ...previewSettings,
        clearExistingData: false // –ü—Ä–µ–≤—å—é –Ω–µ –¥–æ–ª–∂–Ω–æ –æ—á–∏—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
      });

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫
      const preview = result.errors.slice(0, 10).map((error, index) => ({
        row: error.row,
        order: error.order,
        color: error.color,
        preview: true
      }));

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
      const recommendedFilters = Object.entries(result.colorStatistics)
        .filter(([color, count]) => count > 0)
        .map(([color, count]) => ({
          color,
          count,
          label: this.getColorLabel(color),
          description: `–ù–∞–π–¥–µ–Ω–æ ${count} —Å—Ç—Ä–æ–∫`,
          recommended: true
        }));

      console.log('‚úÖ –ü–†–ï–í–¨–Æ: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', {
        totalRows: result.totalRows,
        colorsFound: Object.keys(result.colorStatistics).length,
        recommendedFilters: recommendedFilters.length
      });

      return {
        success: true,
        preview,
        statistics: result.colorStatistics,
        recommendedFilters,
        totalRows: result.totalRows
      };

    } catch (error) {
      console.error('‚ùå –ü–†–ï–í–¨–Æ: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  private getDefaultImportSettings(): ImportSettings {
    return {
      colorFilters: [
        { 
          color: 'green', 
          label: '–ó–µ–ª–µ–Ω—ã–π (–ì–æ—Ç–æ–≤—ã–µ)', 
          description: '–ó–∞–∫–∞–∑—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É', 
          priority: 1, 
          selected: true 
        },
        { 
          color: 'yellow', 
          label: '–ñ–µ–ª—Ç—ã–π (–û–±—ã—á–Ω—ã–µ)', 
          description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–∫–∞–∑—ã', 
          priority: 2, 
          selected: true 
        },
        { 
          color: 'red', 
          label: '–ö—Ä–∞—Å–Ω—ã–π (–ö—Ä–∏—Ç–∏—á–Ω—ã–µ)', 
          description: '–°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞', 
          priority: 3, 
          selected: true 
        },
        { 
          color: 'blue', 
          label: '–°–∏–Ω–∏–π (–ü–ª–∞–Ω–æ–≤—ã–µ)', 
          description: '–ü–ª–∞–Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', 
          priority: 4, 
          selected: true 
        },
      ],
      columnMapping: [
        { fieldName: '–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞', excelColumn: 'C', description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞', required: true },
        { fieldName: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', excelColumn: 'E', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π', required: true },
        { fieldName: '–°—Ä–æ–∫', excelColumn: 'H', description: '–î–µ–¥–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' },
        { fieldName: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', excelColumn: 'K', description: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' },
        { fieldName: '–¢–∏–ø —Ä–∞–±–æ—Ç—ã', excelColumn: 'F', description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç' },
      ],
      importOnlySelected: false,  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ
      clearExistingData: false,   // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –æ—á–∏—â–∞–µ–º
      skipDuplicates: true        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∞
   */
  private getColorLabel(color: string): string {
    const labels: Record<string, string> = {
      green: '–ó–µ–ª–µ–Ω—ã–π (–ì–æ—Ç–æ–≤—ã–µ)',
      yellow: '–ñ–µ–ª—Ç—ã–π (–û–±—ã—á–Ω—ã–µ)',
      red: '–ö—Ä–∞—Å–Ω—ã–π (–ö—Ä–∏—Ç–∏—á–Ω—ã–µ)',
      blue: '–°–∏–Ω–∏–π (–ü–ª–∞–Ω–æ–≤—ã–µ)',
      other: '–î—Ä—É–≥–∏–µ —Ü–≤–µ—Ç–∞'
    };
    return labels[color] || `–¶–≤–µ—Ç: ${color}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫
   */
  private getDefaultColumnMapping() {
    return [
      { fieldName: '–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞', excelColumn: 'C', description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞', required: true },
      { fieldName: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', excelColumn: 'E', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π', required: true },
      { fieldName: '–°—Ä–æ–∫', excelColumn: 'H', description: '–î–µ–¥–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' },
      { fieldName: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', excelColumn: 'K', description: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' },
      { fieldName: '–¢–∏–ø —Ä–∞–±–æ—Ç—ã', excelColumn: 'F', description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç' },
    ];
  }

  @Post('import-selected-orders')
  @ApiOperation({ 
    summary: 'üéØ –ò–ú–ü–û–†–¢ –í–´–ë–†–ê–ù–ù–´–• –ó–ê–ö–ê–ó–û–í',
    description: '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ —Ä–∞–Ω–µ–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞'
  })
  @ApiConsumes('multipart/form-data')
  @UseInterceptors(FileInterceptor('excel', {
    fileFilter: (req, file, cb) => {
      const allowedTypes = [
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.ms-excel',
        'application/octet-stream'
      ];
      
      const isValidType = allowedTypes.includes(file.mimetype) || !!file.originalname.match(/\.(xlsx?|csv)$/);
      cb(null, isValidType);
    },
    limits: {
      fileSize: 100 * 1024 * 1024, // 100MB
    },
  }))
  async importSelectedOrders(
    @UploadedFile() file: Express.Multer.File,
    @Body() body: {
      selectedOrders: string; // JSON —Å—Ç—Ä–æ–∫–∞ —Å –º–∞—Å—Å–∏–≤–æ–º –Ω–æ–º–µ—Ä–æ–≤ —á–µ—Ä—Ç–µ–∂–µ–π
      clearExisting: string;
      skipDuplicates: string;
      colorFilters: string;   // JSON —Å—Ç—Ä–æ–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    },
  ): Promise<{
    success: boolean;
    message: string;
    data: EnhancedImportResult;
  }> {
    try {
      console.log('üéØ –í–´–ë–û–†–û–ß–ù–´–ô –ò–ú–ü–û–†–¢: –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', {
        fileName: file.originalname,
        bodyKeys: Object.keys(body)
      });

      // –ü–∞—Ä—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
      const selectedOrders: string[] = JSON.parse(body.selectedOrders || '[]');
      const clearExisting: boolean = body.clearExisting === 'true';
      const skipDuplicates: boolean = body.skipDuplicates !== 'false'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true
      const colorFilters: string[] = JSON.parse(body.colorFilters || '[]');

      console.log('üìã –ù–ê–°–¢–†–û–ô–ö–ò –ò–ú–ü–û–†–¢–ê:', {
        selectedOrdersCount: selectedOrders.length,
        clearExisting,
        skipDuplicates,
        colorFiltersCount: colorFilters.length
      });

      // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º
      const importSettings: ImportSettings = {
        colorFilters: colorFilters.map(color => ({
          color,
          label: this.getColorLabel(color),
          description: `–ó–∞–∫–∞–∑—ã —Ü–≤–µ—Ç–∞ ${color}`,
          priority: 1,
          selected: true
        })),
        columnMapping: this.getDefaultColumnMapping(),
        importOnlySelected: colorFilters.length > 0,
        clearExistingData: clearExisting,
        skipDuplicates: skipDuplicates
      };

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      const result = await this.enhancedExcelImportService.importFullExcelWithFilters(file, importSettings);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
      if (selectedOrders.length > 0) {
        console.log(`üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ ${selectedOrders.length} –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º`);
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä–∞–º —á–µ—Ä—Ç–µ–∂–µ–π
      }

      console.log('‚úÖ –í–´–ë–û–†–û–ß–ù–´–ô –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù:', {
        totalRows: result.totalRows,
        created: result.created,
        updated: result.updated,
        errors: result.errors.length
      });

      return {
        success: true,
        message: `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–∑–¥–∞–Ω–æ: ${result.created}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updated}, –û—à–∏–±–æ–∫: ${result.errors.length}`,
        data: result
      };

    } catch (error) {
      console.error('‚ùå –í–´–ë–û–†–û–ß–ù–´–ô –ò–ú–ü–û–†–¢: –û—à–∏–±–∫–∞:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`,
        data: null as any
      };
    }
  }
}
