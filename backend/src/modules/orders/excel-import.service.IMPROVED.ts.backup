      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${orderData.drawingNumber}:`, error.message);
        result.errors.push({
          order: orderData.drawingNumber,
          error: error.message,
        });
      }
    }

    console.log('üéâ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù:', {
      created: result.created,
      updated: result.updated,
      errors: result.errors.length,
      totalProcessed: result.totalProcessed,
      skippedRows: result.skippedRows,
      actualRowsInFile: result.actualRowsInFile
    });

    return result;
  }

  private async createNewOrder(orderData: ParsedOrder): Promise<void> {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const order = this.orderRepository.create({
      drawingNumber: orderData.drawingNumber,
      quantity: orderData.quantity,
      remainingQuantity: orderData.quantity,
      deadline: orderData.deadline,
      priority: orderData.priority,
      workType: orderData.workType,
      status: 'planned',
    });

    const savedOrder = await this.orderRepository.save(order);

    // –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞
    for (const opData of orderData.operations) {
      const operation = this.operationRepository.create({
        operationNumber: opData.operationNumber,
        operationType: opData.operationType,
        estimatedTime: opData.estimatedTime,
        machineAxes: opData.machineAxes,
        status: 'PENDING',
        order: savedOrder,
      });
      await this.operationRepository.save(operation);
    }
  }

  private async updateExistingOrder(existingOrder: Order, orderData: ParsedOrder): Promise<void> {
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    existingOrder.quantity = orderData.quantity;
    existingOrder.remainingQuantity = orderData.quantity;
    existingOrder.deadline = orderData.deadline;
    existingOrder.priority = orderData.priority;
    existingOrder.workType = orderData.workType;

    await this.orderRepository.save(existingOrder);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
    await this.operationRepository.delete({ order: { id: existingOrder.id } });

    for (const opData of orderData.operations) {
      const operation = this.operationRepository.create({
        operationNumber: opData.operationNumber,
        operationType: opData.operationType,
        estimatedTime: opData.estimatedTime,
        machineAxes: opData.machineAxes,
        status: 'PENDING',
        order: existingOrder,
      });
      await this.operationRepository.save(operation);
    }
  }
}