/**
 * @file: excel-import.service.ts
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Excel
 * @dependencies: exceljs, orders.service
 * @created: 2025-01-28
 */
import { Injectable, BadRequestException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as ExcelJS from 'exceljs';
import { Order, Priority } from '../../database/entities/order.entity';
import { Operation, OperationType } from '../../database/entities/operation.entity';
import { OrdersService } from './orders.service';
import type { Express } from 'express';

export interface ImportResult {
  created: number;
  updated: number;
  errors: Array<{ order: string; error: string }>;
}

interface ParsedOrder {
  drawingNumber: string;
  quantity: number;
  deadline: Date;
  priority: Priority;
  workType?: string;
  operations: Array<{
    operationNumber: number;
    operationType: OperationType;
    machineAxes: number;
    estimatedTime: number;
  }>;
}

@Injectable()
export class ExcelImportService {
  constructor(
    @InjectRepository(Order)
    private readonly orderRepository: Repository<Order>,
    @InjectRepository(Operation)
    private readonly operationRepository: Repository<Operation>,
    private readonly ordersService: OrdersService,
  ) {}

  async importOrders(
    file: Express.Multer.File,
    colorFilters: string[] = [],
  ): Promise<ImportResult> {
    console.log('üîç EXCEL IMPORT SERVICE: –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', {
      originalname: file.originalname,
      size: file.size,
      mimetype: file.mimetype,
      hasBuffer: !!file.buffer,
      bufferSize: file.buffer?.length,
      colorFiltersCount: colorFilters.length
    });
    
    if (!file) {
      throw new BadRequestException('–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
    }

    if (!file.buffer) {
      console.error('‚ùå EXCEL IMPORT SERVICE: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç file.buffer!');
      throw new BadRequestException('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç buffer');
    }

    console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...');

    const workbook = new ExcelJS.Workbook();
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ buffer
      console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º Excel –∏–∑ buffer...');
      await workbook.xlsx.load(file.buffer);
      console.log('‚úÖ Excel —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel:', error);
      throw new BadRequestException(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: ${error.message}`);
    }

    const worksheet = workbook.getWorksheet(1);
    if (!worksheet) {
      throw new BadRequestException('–†–∞–±–æ—á–∏–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    console.log('üìÑ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç:', {
      name: worksheet.name,
      rowCount: worksheet.rowCount,
      columnCount: worksheet.columnCount
    });

    // üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
    console.log('üîç –ü—Ä–µ–≤—å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');
    for (let rowNum = 1; rowNum <= Math.min(3, worksheet.rowCount); rowNum++) {
      const row = worksheet.getRow(rowNum);
      const rowData: any = {};
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö 10 –∫–æ–ª–æ–Ω–æ–∫
      for (let colNum = 1; colNum <= Math.min(10, worksheet.columnCount); colNum++) {
        const cell = row.getCell(colNum);
        const columnLetter = String.fromCharCode(64 + colNum); // A, B, C, etc.
        rowData[columnLetter] = cell.value || '–ø—É—Å—Ç–æ';
      }
      
      console.log(`  –°—Ç—Ä–æ–∫–∞ ${rowNum}:`, rowData);
    }

    const orders: ParsedOrder[] = [];
    const errors: Array<{ order: string; error: string }> = [];

    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Excel:
    // A: –ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞, B: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, C: –°—Ä–æ–∫, D: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç, E: –¢–∏–ø —Ä–∞–±–æ—Ç—ã
    // F-K: –û–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–æ–º–µ—Ä, —Ç–∏–ø, –æ—Å–∏, –≤—Ä–µ–º—è)
    let processedRows = 0;
    worksheet.eachRow((row, rowNumber) => {
      if (rowNumber === 1) {
        console.log('üó∫ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ', rowNumber);
        return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      }

      try {
        if (this.shouldProcessRow(row, colorFilters)) {
          const order = this.parseRowToOrder(row);
          if (order) {
            orders.push(order);
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ${rowNumber}: ${order.drawingNumber}`);
          } else {
            console.log(`‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ${rowNumber}`);
          }
        } else {
          console.log(`üé® –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É ${rowNumber} (–Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ü–≤–µ—Ç–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä)`);
        }
        processedRows++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${rowNumber}:`, error.message);
        errors.push({
          order: `–°—Ç—Ä–æ–∫–∞ ${rowNumber}`,
          error: error.message,
        });
      }
    });

    console.log('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
      totalRows: processedRows,
      parsedOrders: orders.length,
      errors: errors.length
    });

    return this.processImportedOrders(orders, errors);
  }

  private shouldProcessRow(row: ExcelJS.Row, colorFilters: string[]): boolean {
    if (colorFilters.length === 0) return true;

    const cell = row.getCell(1);
    const fill = cell.style?.fill;
    if (!fill || fill.type !== 'pattern') return false;
    
    const cellColor = (fill as any).fgColor?.argb;
    return cellColor ? colorFilters.includes(cellColor) : false;
  }

  private parseRowToOrder(row: ExcelJS.Row): ParsedOrder | null {
    const drawingNumber = row.getCell(1).value?.toString();
    if (!drawingNumber) return null;

    const quantity = parseInt(row.getCell(2).value?.toString() || '0', 10);
    const deadlineValue = row.getCell(3).value;
    const deadline = this.parseDate(deadlineValue);
    const priority = this.parsePriority(row.getCell(4).value?.toString());
    const workType = row.getCell(5).value?.toString();

    const operations = this.parseOperations(row);

    return {
      drawingNumber,
      quantity,
      deadline,
      priority,
      workType,
      operations,
    };
  }

  private parseDate(value: any): Date {
    if (value instanceof Date) {
      return value;
    }
    if (typeof value === 'number') {
      // Excel serial date
      return new Date((value - 25569) * 86400 * 1000);
    }
    if (typeof value === 'string') {
      const date = new Date(value);
      if (isNaN(date.getTime())) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã');
      }
      return date;
    }
    throw new Error('–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞');
  }

  private parsePriority(value?: string): Priority {
    const priorityMap: Record<string, Priority> = {
      '1': Priority.CRITICAL,
      '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π': Priority.CRITICAL,
      '2': Priority.HIGH,
      '–≤—ã—Å–æ–∫–∏–π': Priority.HIGH,
      '3': Priority.MEDIUM,
      '—Å—Ä–µ–¥–Ω–∏–π': Priority.MEDIUM,
      '4': Priority.LOW,
      '–Ω–∏–∑–∫–∏–π': Priority.LOW,
    };

    const priority = priorityMap[value?.toLowerCase() || ''];
    return priority || Priority.MEDIUM;
  }

  private parseOperations(row: ExcelJS.Row): ParsedOrder['operations'] {
    const operations: ParsedOrder['operations'] = [];
    
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∫–æ–ª–æ–Ω–∫–∏ F (6)
    // –∏ –∫–∞–∂–¥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç 4 –∫–æ–ª–æ–Ω–∫–∏
    for (let i = 6; i <= 30; i += 4) {
      const operationNumber = parseInt(row.getCell(i).value?.toString() || '0', 10);
      if (!operationNumber) break;

      const operationType = this.parseOperationType(row.getCell(i + 1).value?.toString());
      const machineAxes = parseInt(row.getCell(i + 2).value?.toString() || '3', 10);
      const estimatedTime = parseInt(row.getCell(i + 3).value?.toString() || '0', 10);

      operations.push({
        operationNumber,
        operationType,
        machineAxes,
        estimatedTime,
      });
    }

    return operations;
  }

  private parseOperationType(value?: string): OperationType {
    const typeMap: Record<string, OperationType> = {
      '—Ñ—Ä–µ–∑–µ—Ä–Ω–∞—è': OperationType.MILLING,
      'milling': OperationType.MILLING,
      '—Ñ': OperationType.MILLING,
      '—Ç–æ–∫–∞—Ä–Ω–∞—è': OperationType.TURNING,
      'turning': OperationType.TURNING,
      '—Ç': OperationType.TURNING,
    };

    const type = typeMap[value?.toLowerCase() || ''];
    return type || OperationType.MILLING;
  }

  private async processImportedOrders(
    orders: ParsedOrder[],
    existingErrors: Array<{ order: string; error: string }>,
  ): Promise<ImportResult> {
    const result: ImportResult = {
      created: 0,
      updated: 0,
      errors: existingErrors,
    };

    for (const orderData of orders) {
      try {
        const existingOrder = await this.ordersService.findByDrawingNumber(
          orderData.drawingNumber,
        );

        if (existingOrder) {
          await this.updateExistingOrder(existingOrder, orderData);
          result.updated++;
        } else {
          await this.createNewOrder(orderData);
          result.created++;
        }
      } catch (error) {
        result.errors.push({
          order: orderData.drawingNumber,
          error: error.message,
        });
      }
    }

    return result;
  }

  private async createNewOrder(orderData: ParsedOrder): Promise<void> {
    const order = this.orderRepository.create({
      drawingNumber: orderData.drawingNumber,
      quantity: orderData.quantity,
      remainingQuantity: orderData.quantity,
      deadline: orderData.deadline,
      priority: orderData.priority,
      status: 'planned',
    });

    const savedOrder = await this.orderRepository.save(order);

    // –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    for (const opData of orderData.operations) {
      const operation = this.operationRepository.create({
        operationNumber: opData.operationNumber,
        operationType: opData.operationType,
        estimatedTime: opData.estimatedTime,
        order: savedOrder,
      });
      await this.operationRepository.save(operation);
    }
  }

  private async updateExistingOrder(
    existingOrder: Order,
    orderData: ParsedOrder,
  ): Promise<void> {
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    existingOrder.quantity = orderData.quantity;
    existingOrder.remainingQuantity = orderData.quantity;
    existingOrder.deadline = orderData.deadline;
    existingOrder.priority = orderData.priority;

    await this.orderRepository.save(existingOrder);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
    await this.operationRepository.delete({ order: { id: existingOrder.id } });

    for (const opData of orderData.operations) {
      const operation = this.operationRepository.create({
        operationNumber: opData.operationNumber,
        operationType: opData.operationType,
        estimatedTime: opData.estimatedTime,
        order: existingOrder,
      });
      await this.operationRepository.save(operation);
    }
  }
}
