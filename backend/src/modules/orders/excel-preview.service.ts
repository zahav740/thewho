/**
 * @file: excel-preview.service.ts
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é Excel —Ñ–∞–π–ª–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –∑–∞–∫–∞–∑–æ–≤
 * @dependencies: exceljs, enhanced-excel-import.service
 * @created: 2025-06-09
 */
import { Injectable, BadRequestException } from '@nestjs/common';
import * as ExcelJS from 'exceljs';
import type { Express } from 'express';

export interface ExcelOrderPreview {
  rowNumber: number;
  drawingNumber: string;
  quantity: number;
  deadline: string;
  priority: string;
  workType: string;
  color: string;
  colorLabel: string;
  operations: Array<{
    number: number;
    type: string;
    time: number;
    axes: number;
  }>;
  selected: boolean; // –î–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–±–æ—Ä–∞
  exists: boolean;   // –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
}

export interface ExcelPreviewResult {
  fileName: string;
  totalRows: number;
  orders: ExcelOrderPreview[];
  colorStatistics: {
    green: { count: number; label: string; description: string };
    yellow: { count: number; label: string; description: string };
    red: { count: number; label: string; description: string };
    blue: { count: number; label: string; description: string };
    other: { count: number; label: string; description: string };
  };
  recommendedFilters: Array<{
    color: string;
    label: string;
    count: number;
    description: string;
    priority: number;
    recommended: boolean;
  }>;
  columnMapping: Array<{
    column: string;
    field: string;
    sample: string;
    detected: boolean;
  }>;
}

export interface ImportSelection {
  selectedOrders: string[]; // –ú–∞—Å—Å–∏–≤ –Ω–æ–º–µ—Ä–æ–≤ —á–µ—Ä—Ç–µ–∂–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
  clearExisting: boolean;
  skipDuplicates: boolean;
  colorFilters: string[];   // –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
}

@Injectable()
export class ExcelPreviewService {
  
  /**
   * –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Excel —Ñ–∞–π–ª–∞ —Å –ø—Ä–µ–≤—å—é –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
   */
  async analyzeExcelFile(file: Express.Multer.File): Promise<ExcelPreviewResult> {
    console.log('üîç –ê–ù–ê–õ–ò–ó EXCEL: –ù–∞—á–∞–ª–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞:', {
      originalname: file.originalname,
      size: file.size,
      hasBuffer: !!file.buffer
    });

    if (!file || !file.buffer) {
      throw new BadRequestException('–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω');
    }

    const workbook = new ExcelJS.Workbook();
    await workbook.xlsx.load(file.buffer);

    const worksheet = workbook.getWorksheet(1);
    if (!worksheet) {
      throw new BadRequestException('–†–∞–±–æ—á–∏–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel —Ñ–∞–π–ª–µ');
    }

    console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Excel —Ñ–∞–π–ª–∞:', {
      worksheetName: worksheet.name,
      totalRows: worksheet.rowCount,
      totalColumns: worksheet.columnCount
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–æ–Ω–æ–∫
    const columnMapping = this.analyzeColumnStructure(worksheet);
    
    // –ü–∞—Ä—Å–∏–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    const orders = await this.parseAllOrders(worksheet);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–≤–µ—Ç–∞–º
    const colorStatistics = this.calculateColorStatistics(orders);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    const recommendedFilters = this.generateRecommendedFilters(colorStatistics);

    const result: ExcelPreviewResult = {
      fileName: file.originalname,
      totalRows: worksheet.rowCount - 1, // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      orders,
      colorStatistics,
      recommendedFilters,
      columnMapping
    };

    console.log('‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù:', {
      ordersFound: orders.length,
      colorsDetected: Object.keys(colorStatistics).length,
      recommendedFilters: recommendedFilters.length
    });

    return result;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ Excel —Ñ–∞–π–ª–∞
   */
  private analyzeColumnStructure(worksheet: ExcelJS.Worksheet): Array<{
    column: string;
    field: string;
    sample: string;
    detected: boolean;
  }> {
    const headerRow = worksheet.getRow(1);
    const dataRow = worksheet.getRow(2); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    
    const mapping = [];
    
    for (let col = 1; col <= Math.min(10, worksheet.columnCount); col++) {
      const headerValue = headerRow.getCell(col).value?.toString()?.trim() || '';
      const sampleValue = dataRow.getCell(col).value?.toString()?.trim() || '';
      const columnLetter = String.fromCharCode(64 + col); // A, B, C...
      
      let fieldName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      let detected = false;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
      if (col === 1 || this.isDrawingNumberField(headerValue, sampleValue)) {
        fieldName = '–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞';
        detected = true;
      } else if (col === 2 || this.isQuantityField(headerValue, sampleValue)) {
        fieldName = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ';
        detected = true;
      } else if (col === 3 || this.isDateField(headerValue, sampleValue)) {
        fieldName = '–î–µ–¥–ª–∞–π–Ω';
        detected = true;
      } else if (col === 4 || this.isPriorityField(headerValue, sampleValue)) {
        fieldName = '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç';
        detected = true;
      } else if (col === 5 || this.isWorkTypeField(headerValue, sampleValue)) {
        fieldName = '–¢–∏–ø —Ä–∞–±–æ—Ç—ã';
        detected = true;
      } else if (col >= 6) {
        fieldName = '–û–ø–µ—Ä–∞—Ü–∏–∏';
        detected = this.isOperationField(headerValue, sampleValue);
      }
      
      mapping.push({
        column: columnLetter,
        field: fieldName,
        sample: sampleValue.length > 20 ? sampleValue.substring(0, 20) + '...' : sampleValue,
        detected
      });
    }
    
    return mapping;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞
   */
  private async parseAllOrders(worksheet: ExcelJS.Worksheet): Promise<ExcelOrderPreview[]> {
    const orders: ExcelOrderPreview[] = [];
    
    for (let rowNumber = 2; rowNumber <= worksheet.rowCount; rowNumber++) {
      try {
        const row = worksheet.getRow(rowNumber);
        const order = this.parseRowToPreview(row, rowNumber);
        
        if (order) {
          orders.push(order);
          console.log(`üìù –°—Ç—Ä–æ–∫–∞ ${rowNumber}: ${order.drawingNumber} (${order.color})`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${rowNumber}:`, error.message);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö
      }
    }
    
    console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤`);
    return orders;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç –ø—Ä–µ–≤—å—é –∑–∞–∫–∞–∑–∞
   * –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ C, E, H, K
   */
  private parseRowToPreview(row: ExcelJS.Row, rowNumber: number): ExcelOrderPreview | null {
    // –ü–†–ê–í–ò–õ–¨–ù–´–ô –ú–ê–ü–ü–ò–ù–ì: C=–Ω–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞, E=–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, H=—Å—Ä–æ–∫, K=–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    const drawingNumber = row.getCell('C').value?.toString()?.trim(); // –ö–æ–ª–æ–Ω–∫–∞ C
    if (!drawingNumber) return null;
    
    const quantity = parseInt(row.getCell('E').value?.toString() || '1', 10); // –ö–æ–ª–æ–Ω–∫–∞ E
    const deadline = this.formatDeadline(row.getCell('H').value); // –ö–æ–ª–æ–Ω–∫–∞ H
    const priority = row.getCell('K').value?.toString()?.trim() || '–°—Ä–µ–¥–Ω–∏–π'; // –ö–æ–ª–æ–Ω–∫–∞ K
    const workType = row.getCell('F').value?.toString()?.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω'; // –ö–æ–ª–æ–Ω–∫–∞ F
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç—Ä–æ–∫–∏
    const color = this.determineRowColor(row);
    const colorLabel = this.getColorLabel(color);
    
    // –ü–∞—Ä—Å–∏–º –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ –∫–æ–ª–æ–Ω–∫–∏ K)
    const operations = this.parseOperationsForPreview(row);
    
    console.log(`üìã –ü—Ä–µ–≤—å—é —Å—Ç—Ä–æ–∫–∏ ${rowNumber}: –ß–µ—Ä—Ç–µ–∂=${drawingNumber}, –ö–æ–ª-–≤–æ=${quantity}, –°—Ä–æ–∫=${deadline}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç=${priority}`);
    
    return {
      rowNumber,
      drawingNumber,
      quantity,
      deadline,
      priority,
      workType,
      color,
      colorLabel,
      operations,
      selected: true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ
      exists: false   // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –ë–î –ø–æ–∑–∂–µ
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
   */
  private determineRowColor(row: ExcelJS.Row): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ü–≤–µ—Ç —è—á–µ–π–∫–∏
    const firstCell = row.getCell(1);
    const cellColor = this.getCellColor(firstCell);
    if (cellColor) return cellColor;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    const values = [];
    for (let i = 1; i <= Math.min(10, row.cellCount); i++) {
      const cellValue = row.getCell(i).value;
      if (cellValue) {
        values.push(String(cellValue).toLowerCase());
      }
    }
    
    const allText = values.join(' ');
    
    if (allText.includes('–≥–æ—Ç–æ–≤') || allText.includes('–≥–æ—Ç–æ–≤–æ') || allText.includes('–∑–∞–≤–µ—Ä—à–µ–Ω')) {
      return 'green';
    } else if (allText.includes('–∫—Ä–∏—Ç–∏—á') || allText.includes('—Å—Ä–æ—á–Ω') || allText.includes('–≤–∞–∂–Ω')) {
      return 'red';
    } else if (allText.includes('–ø–ª–∞–Ω') || allText.includes('–±—É–¥—É—â') || allText.includes('–æ—Ç–ª–æ–∂–µ–Ω')) {
      return 'blue';
    } else {
      return 'yellow';
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —è—á–µ–π–∫–∏ Excel
   */
  private getCellColor(cell: ExcelJS.Cell): string | null {
    try {
      const fill = cell.style?.fill;
      if (fill && fill.type === 'pattern') {
        const patternFill = fill as ExcelJS.FillPattern;
        const argb = patternFill.fgColor?.argb;
        
        if (argb) {
          const colorMap: Record<string, string> = {
            'FF00FF00': 'green',   'FF92D050': 'green',   'FF00B050': 'green',
            'FFFFFF00': 'yellow',  'FFFFCC00': 'yellow',  'FFFFC000': 'yellow',
            'FFFF0000': 'red',     'FFFF6666': 'red',     'FFFF9999': 'red',
            'FF0000FF': 'blue',    'FF6699CC': 'blue',    'FF9BC2E6': 'blue',
          };
          
          return colorMap[argb] || null;
        }
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
    
    return null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∞
   */
  private getColorLabel(color: string): string {
    const labels: Record<string, string> = {
      green: 'üü¢ –ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã',
      yellow: 'üü° –û–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã', 
      red: 'üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã',
      blue: 'üîµ –ü–ª–∞–Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã',
      other: '‚ö™ –î—Ä—É–≥–∏–µ'
    };
    return labels[color] || labels.other;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private formatDeadline(value: any): string {
    if (value instanceof Date) {
      return value.toLocaleDateString('ru-RU');
    }
    
    if (typeof value === 'number') {
      // Excel serial date
      const date = new Date((value - 25569) * 86400 * 1000);
      return date.toLocaleDateString('ru-RU');
    }
    
    if (typeof value === 'string') {
      const date = new Date(value);
      if (!isNaN(date.getTime())) {
        return date.toLocaleDateString('ru-RU');
      }
    }
    
    return '–ù–µ —É–∫–∞–∑–∞–Ω';
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–µ–≤—å—é
   * –û–ë–ù–û–í–õ–ï–ù–û: –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –∫–æ–ª–æ–Ω–∫–∏ K (11)
   */
  private parseOperationsForPreview(row: ExcelJS.Row): Array<{
    number: number;
    type: string;
    time: number;
    axes: number;
  }> {
    const operations = [];
    
    // –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∫–æ–ª–æ–Ω–∫–∏ L (12) - –ø–æ—Å–ª–µ K
    for (let i = 12; i <= Math.min(30, row.cellCount); i += 4) {
      const opNumber = parseInt(row.getCell(i).value?.toString() || '0', 10);
      if (!opNumber) break;
      
      const opType = row.getCell(i + 1).value?.toString()?.trim() || '–§—Ä–µ–∑–µ—Ä–Ω–∞—è';
      const opAxes = parseInt(row.getCell(i + 2).value?.toString() || '3', 10);
      const opTime = parseInt(row.getCell(i + 3).value?.toString() || '60', 10);
      
      operations.push({
        number: opNumber,
        type: opType,
        time: opTime,
        axes: opAxes
      });
    }
    
    if (operations.length === 0) {
      operations.push({
        number: 1,
        type: '–§—Ä–µ–∑–µ—Ä–Ω–∞—è',
        time: 60,
        axes: 3
      });
    }
    
    return operations;
  }

  /**
   * –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ü–≤–µ—Ç–∞–º
   */
  private calculateColorStatistics(orders: ExcelOrderPreview[]) {
    const stats = {
      green: { count: 0, label: 'üü¢ –ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', description: '–ó–∞–∫–∞–∑—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É' },
      yellow: { count: 0, label: 'üü° –û–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã', description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–∫–∞–∑—ã' },
      red: { count: 0, label: 'üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã', description: '–°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞' },
      blue: { count: 0, label: 'üîµ –ü–ª–∞–Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', description: '–ü–ª–∞–Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞ –±—É–¥—É—â–µ–µ' },
      other: { count: 0, label: '‚ö™ –î—Ä—É–≥–∏–µ', description: '–ó–∞–∫–∞–∑—ã –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞' }
    };
    
    orders.forEach(order => {
      if (stats[order.color]) {
        stats[order.color].count++;
      } else {
        stats.other.count++;
      }
    });
    
    return stats;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  private generateRecommendedFilters(statistics: any) {
    const filters = [];
    
    Object.entries(statistics).forEach(([color, data]: [string, any]) => {
      if (data.count > 0) {
        filters.push({
          color,
          label: data.label,
          count: data.count,
          description: `${data.description} (${data.count} —à—Ç.)`,
          priority: this.getColorPriority(color),
          recommended: data.count > 0
        });
      }
    });
    
    return filters.sort((a, b) => a.priority - b.priority);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  private getColorPriority(color: string): number {
    const priorities: Record<string, number> = {
      red: 1,    // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ - –ø–µ—Ä–≤—ã–µ
      yellow: 2, // –û–±—ã—á–Ω—ã–µ - –≤—Ç–æ—Ä—ã–µ  
      green: 3,  // –ì–æ—Ç–æ–≤—ã–µ - —Ç—Ä–µ—Ç—å–∏
      blue: 4,   // –ü–ª–∞–Ω–æ–≤—ã–µ - —á–µ—Ç–≤–µ—Ä—Ç—ã–µ
      other: 5   // –î—Ä—É–≥–∏–µ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ
    };
    return priorities[color] || 5;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
  private isDrawingNumberField(header: string, sample: string): boolean {
    const headerLower = header.toLowerCase();
    return headerLower.includes('–Ω–æ–º–µ—Ä') || headerLower.includes('—á–µ—Ä—Ç–µ–∂') || headerLower.includes('number') || 
           headerLower.includes('drawing') || !!sample.match(/^[A-Z0-9\-_]+$/);
  }

  private isQuantityField(header: string, sample: string): boolean {
    const headerLower = header.toLowerCase();
    return headerLower.includes('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ') || headerLower.includes('qty') || headerLower.includes('quantity') ||
           (!isNaN(parseInt(sample)) && parseInt(sample) > 0 && parseInt(sample) < 10000);
  }

  private isDateField(header: string, sample: string): boolean {
    const headerLower = header.toLowerCase();
    return headerLower.includes('–¥–∞—Ç–∞') || headerLower.includes('—Å—Ä–æ–∫') || headerLower.includes('date') ||
           headerLower.includes('deadline') || !isNaN(Date.parse(sample));
  }

  private isPriorityField(header: string, sample: string): boolean {
    const headerLower = header.toLowerCase();
    const sampleLower = sample.toLowerCase();
    return headerLower.includes('–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç') || headerLower.includes('priority') ||
           sampleLower.includes('–≤—ã—Å–æ–∫') || sampleLower.includes('–∫—Ä–∏—Ç–∏—á') || sampleLower.includes('–Ω–∏–∑–∫');
  }

  private isWorkTypeField(header: string, sample: string): boolean {
    const headerLower = header.toLowerCase();
    return headerLower.includes('—Ç–∏–ø') || headerLower.includes('—Ä–∞–±–æ—Ç–∞') || headerLower.includes('type') ||
           headerLower.includes('work') || headerLower.includes('–æ–ø–∏—Å–∞–Ω–∏–µ');
  }

  private isOperationField(header: string, sample: string): boolean {
    const headerLower = header.toLowerCase();
    const sampleLower = sample.toLowerCase();
    return headerLower.includes('–æ–ø–µ—Ä–∞—Ü–∏—è') || headerLower.includes('operation') ||
           sampleLower.includes('—Ñ—Ä–µ–∑') || sampleLower.includes('—Ç–æ–∫') || sampleLower.includes('—Å–≤–µ—Ä–ª');
  }
}
