/**
 * @file: orders.controller.ts
 * @description: –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
 * @dependencies: services
 * @created: 2025-01-28
 * @updated: 2025-05-28
 */
import {
  Controller,
  Get,
  Post,
  Put,
  Delete,
  Body,
  Param,
  Query,
  UseInterceptors,
  UploadedFile,
  Res,
} from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
import { ApiTags, ApiOperation, ApiConsumes } from '@nestjs/swagger';
import { Response } from 'express';
import type { Express } from 'express';
import { OrdersService } from './orders.service';
import { ExcelImportService, ImportResult } from './excel-import.service';
// import { ExcelImportEnhancedService, ColumnMapping } from './excel-import-enhanced.service';
import { CreateOrderDto } from './dto/create-order.dto';
import { UpdateOrderDto } from './dto/update-order.dto';
import { OrdersFilterDto } from './dto/orders-filter.dto';
import { ImportExcelDto } from './dto/import-excel.dto';
import { Order } from '../../database/entities/order.entity';
import { diskStorage } from 'multer';
import { extname } from 'path';

@ApiTags('orders')
@Controller('orders')
export class OrdersController {
  constructor(
    private readonly ordersService: OrdersService,
    private readonly excelImportService: ExcelImportService,
    // private readonly excelImportEnhancedService: ExcelImportEnhancedService,
  ) {}

  @Get()
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π' })
  async findAll(@Query() filterDto: OrdersFilterDto) {
    try {
      console.log('OrdersController.findAll: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filterDto);
      const result = await this.ordersService.findAll(filterDto);
      console.log(`OrdersController.findAll: –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${result.data?.length || 0} –∑–∞–∫–∞–∑–æ–≤`);
      return result;
    } catch (error) {
      console.error('OrdersController.findAll error:', error);
      throw error;
    }
  }

  @Get(':id')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID' })
  async findOne(@Param('id') id: string): Promise<Order> {
    try {
      return await this.ordersService.findOne(id);
    } catch (error) {
      console.error(`Orders findOne error for id ${id}:`, error);
      throw error;
    }
  }

  @Post()
  @ApiOperation({ summary: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑' })
  async create(@Body() createOrderDto: CreateOrderDto): Promise<Order> {
    return this.ordersService.create(createOrderDto);
  }

  @Put(':id')
  @ApiOperation({ summary: '–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑' })
  async update(
    @Param('id') id: string,
    @Body() updateOrderDto: UpdateOrderDto,
  ): Promise<Order> {
    return this.ordersService.update(id, updateOrderDto);
  }

  @Delete(':id')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑' })
  async remove(@Param('id') id: string): Promise<void> {
    try {
      return await this.ordersService.remove(id);
    } catch (error) {
      console.error(`Orders remove error for id ${id}:`, error);
      throw error;
    }
  }

  @Delete('batch/selected')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã' })
  async removeBatch(@Body('ids') ids: string[]): Promise<{ deleted: number }> {
    try {
      const deleted = await this.ordersService.removeBatch(ids);
      return { deleted };
    } catch (error) {
      console.error('Orders batch remove error:', error);
      throw error;
    }
  }

  @Delete('all/confirm')
  @ApiOperation({ summary: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)' })
  async removeAll(@Body('confirm') confirm: boolean): Promise<{ deleted: number }> {
    if (!confirm) {
      throw new Error('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }
    try {
      const deleted = await this.ordersService.removeAll();
      return { deleted };
    } catch (error) {
      console.error('Orders remove all error:', error);
      throw error;
    }
  }

  @Post('upload-excel')
  @ApiOperation({ summary: '–ü–†–û–î–ê–ö–®–ï–ù: –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –†–ï–ê–õ–¨–ù–´–ô Excel —Ñ–∞–π–ª (—Å buffer)' })
  @ApiConsumes('multipart/form-data')
  @UseInterceptors(FileInterceptor('excel', {
    // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫ - —Ä–∞–±–æ—Ç–∞–µ–º —Å buffer –Ω–∞–ø—Ä—è–º—É—é
    fileFilter: (req, file, cb) => {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', {
        originalname: file.originalname,
        mimetype: file.mimetype,
        size: file.size
      });
      
      const allowedTypes = [
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
        'application/vnd.ms-excel', // .xls
        'application/octet-stream' // –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —ç—Ç–æ—Ç MIME type
      ];
      
      const isValidType = allowedTypes.includes(file.mimetype) || file.originalname.match(/\.(xlsx?|csv)$/);
      
      if (isValidType) {
        console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É');
        cb(null, true);
      } else {
        console.error('‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', file.mimetype);
        cb(new Error('–ü–†–û–î–ê–ö–®–ï–ù: –¢–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls) —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'), false);
      }
    },
    limits: {
      fileSize: 50 * 1024 * 1024, // 50MB –º–∞–∫—Å–∏–º—É–º
    },
  }))
  async uploadExcel(
    @UploadedFile() file: Express.Multer.File,
    @Body() body: any,
  ) {
    try {
      console.log('üìÅ –ü–†–û–î–ê–ö–®–ï–ù: –ü–æ–ª—É—á–µ–Ω –†–ï–ê–õ–¨–ù–´–ô Excel —Ñ–∞–π–ª (—Å buffer):', {
        originalname: file.originalname,
        size: file.size,
        mimetype: file.mimetype,
        hasBuffer: !!file.buffer,
        bufferSize: file.buffer?.length,
        body: body
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –µ—Å—Ç—å buffer
      if (!file || !file.buffer) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç file.buffer!');
        throw new Error('–ü–£–°–¢–û–ô –ò–õ–ò –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–ô –§–ê–ô–õ - –Ω–µ—Ç buffer');
      }

      if (file.buffer.length === 0) {
        console.error('‚ùå –ü—É—Å—Ç–æ–π buffer!');
        throw new Error('–ü–£–°–¢–û–ô –§–ê–ô–õ - buffer –ø—É—Å—Ç–æ–π');
      }

      console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É, buffer –¥–æ—Å—Ç—É–ø–µ–Ω:', file.buffer.length, '–±–∞–π—Ç');

      // –ü–∞—Ä—Å–∏–º —Ñ–∏–ª—å—Ç—Ä—ã —Ü–≤–µ—Ç–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
      let colorFilters: string[] = [];
      if (body.colorFilters) {
        try {
          colorFilters = JSON.parse(body.colorFilters);
          console.log('üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:', colorFilters);
        } catch {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã');
        }
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞ —Å buffer...');
      const result = await this.excelImportService.importOrders(file, colorFilters);
      
      console.log('‚úÖ –ü–†–û–î–ê–ö–®–ï–ù: –ò–º–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω:', {
        created: result.created,
        updated: result.updated,
        errors: result.errors?.length || 0,
        firstErrorExample: result.errors?.[0] || '–ù–µ—Ç –æ—à–∏–±–æ–∫'
      });

      return {
        success: true,
        message: '–ü–†–û–î–ê–ö–®–ï–ù: –†–µ–∞–ª—å–Ω—ã–π Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
        data: {
          created: result.created,
          updated: result.updated,
          totalRows: result.created + result.updated + result.errors.length,
          importedRows: result.created + result.updated,
          skippedRows: result.errors.length,
          errors: result.errors
        },
        file: {
          originalname: file.originalname,
          size: file.size,
          realFile: true, // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
          bufferProcessed: true // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ buffer
        }
      };
    } catch (error) {
      console.error('‚ùå –ü–†–û–î–ê–ö–®–ï–ù: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Excel:', error);
      return {
        success: false,
        error: '–ü–†–û–î–ê–ö–®–ï–ù: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞',
        message: error.message,
        details: {
          hasFile: !!file,
          hasBuffer: !!file?.buffer,
          bufferSize: file?.buffer?.length || 0
        }
      };
    }
  }

  // –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ Excel
  /*
  @Post('upload-excel')
  @ApiOperation({ summary: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Excel —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º –∫–æ–ª–æ–Ω–æ–∫' })
  @ApiConsumes('multipart/form-data')
  @UseInterceptors(FileInterceptor('excel'))
  async uploadExcel(
    @UploadedFile() file: Express.Multer.File,
    @Body('columnMapping') columnMappingStr: string,
  ) {
    // –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è TypeScript –æ—à–∏–±–æ–∫
  }
  */

  // Legacy –º–µ—Ç–æ–¥—ã
  @Post('import-excel')
  @ApiOperation({ summary: '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ Excel —Ñ–∞–π–ª–∞ (legacy)' })
  @ApiConsumes('multipart/form-data')
  @UseInterceptors(FileInterceptor('file'))
  async importExcel(
    @UploadedFile() file: Express.Multer.File,
    @Body() importDto: ImportExcelDto,
  ): Promise<ImportResult> {
    return this.excelImportService.importOrders(file, importDto.colorFilters);
  }

  @Post(':id/upload-pdf')
  @ApiOperation({ summary: '–ü–†–û–î–ê–ö–®–ï–ù: –ó–∞–≥—Ä—É–∑–∏—Ç—å PDF —Ñ–∞–π–ª –¥–ª—è –∑–∞–∫–∞–∑–∞' })
  @ApiConsumes('multipart/form-data')
  @UseInterceptors(
    FileInterceptor('file', {
      storage: diskStorage({
        destination: './uploads/pdf',
        filename: (req, file, cb) => {
          const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
          cb(null, `${uniqueSuffix}${extname(file.originalname)}`);
        },
      }),
      fileFilter: (req, file, cb) => {
        console.log('üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ PDF —Ñ–∞–π–ª–∞:', {
          originalname: file.originalname,
          mimetype: file.mimetype,
          size: file.size
        });
        
        if (file.mimetype === 'application/pdf') {
          console.log('‚úÖ PDF —Ñ–∞–π–ª –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É');
          cb(null, true);
        } else {
          console.error('‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è PDF:', file.mimetype);
          cb(new Error('–ü–†–û–î–ê–ö–®–ï–ù: –¢–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'), false);
        }
      },
      limits: {
        fileSize: 100 * 1024 * 1024, // 100MB –º–∞–∫—Å–∏–º—É–º –¥–ª—è PDF
      },
    }),
  )
  async uploadPdf(
    @Param('id') id: string,
    @UploadedFile() file: Express.Multer.File,
  ): Promise<Order> {
    try {
      console.log(`üìÅ –ü–†–û–î–ê–ö–®–ï–ù: –ó–∞–≥—Ä—É–∑–∫–∞ PDF –¥–ª—è –∑–∞–∫–∞–∑–∞ ${id}:`, {
        originalname: file.originalname,
        filename: file.filename,
        size: file.size,
        path: file.path
      });
      
      if (!file || !file.filename) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF —Ñ–∞–π–ª–∞');
      }
      
      const result = await this.ordersService.uploadPdf(id, file.filename);
      console.log(`‚úÖ PDF —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ ${id}`);
      
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF –¥–ª—è –∑–∞–∫–∞–∑–∞ ${id}:`, error);
      throw error;
    }
  }

  @Get(':id/pdf')
  @ApiOperation({ summary: '–ü–æ–ª—É—á–∏—Ç—å PDF —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞' })
  async getPdf(
    @Param('id') id: string,
    @Res() res: Response,
  ): Promise<void> {
    const order = await this.ordersService.findOne(id);
    if (!order.pdfUrl) {
      res.status(404).send('PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    res.sendFile(order.pdfUrl, { root: './uploads/pdf' });
  }
}