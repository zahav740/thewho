/**
 * @file: orders.service.ts
 * @description: –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–´–ô —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ (–ë–ï–ó –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•)
 * @dependencies: typeorm, entities
 * @created: 2025-01-28
 * @updated: 2025-06-07 // –£–ë–†–ê–ù–´ –í–°–ï –ó–ê–ì–õ–£–®–ö–ò - –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
 */
import { Injectable, NotFoundException, InternalServerErrorException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Order } from '../../database/entities/order.entity';
import { Operation } from '../../database/entities/operation.entity';
import { CreateOrderDto } from './dto/create-order.dto';
import { UpdateOrderDto } from './dto/update-order.dto';
import { OrdersFilterDto } from './dto/orders-filter.dto';
import { OrderFileSystemService, OrderFileSystemData } from './order-filesystem.service';

@Injectable()
export class OrdersService {
  constructor(
    @InjectRepository(Order)
    private readonly orderRepository: Repository<Order>,
    @InjectRepository(Operation)
    private readonly operationRepository: Repository<Operation>,
    private readonly orderFileSystemService: OrderFileSystemService,
  ) {}

  async findAll(filterDto?: OrdersFilterDto) {
    console.log('OrdersService.findAll: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤');
    console.log('OrdersService.findAll: Filter:', filterDto);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    let query = this.orderRepository.createQueryBuilder('order')
      .leftJoinAndSelect('order.operations', 'operation')
      .orderBy('operation.operationNumber', 'ASC'); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É

    if (filterDto?.search) {
      query = query.where(
        'order.drawingNumber ILIKE :search OR order.workType ILIKE :search',
        { search: `%${filterDto.search}%` }
      );
    }

    if (filterDto?.priority) {
      query = query.andWhere('order.priority = :priority', { priority: filterDto.priority });
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    query = query.addOrderBy('order.priority', 'ASC')
              .addOrderBy('order.deadline', 'ASC');

    let page = filterDto?.page || 1;
    let limit = filterDto?.limit || 10;

    const skip = (page - 1) * limit;
    query = query.skip(skip).take(limit);

    const [orders, total] = await query.getManyAndCount();

    console.log(`OrdersService.findAll: –ù–∞–π–¥–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ ${total}`);

    // –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
    const enrichedOrders = orders.map(order => {
      return {
        ...order,
        name: order.drawingNumber || '–ë–µ–∑ –∏–º–µ–Ω–∏',
        clientName: '–ù–µ —É–∫–∞–∑–∞–Ω', // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤ –ë–î –ø–æ–∑–∂–µ
        remainingQuantity: order.quantity,
        status: this.calculateOrderStatus(order),
        completionPercentage: this.calculateCompletionPercentage(order),
        forecastedCompletionDate: order.deadline,
        isOnSchedule: this.isOrderOnSchedule(order),
        lastRecalculationAt: order.updatedAt || order.createdAt || new Date(),
        operations: order.operations || []
      };
    });

    return {
      data: enrichedOrders,
      total,
      page: page,
      limit: limit,
      totalPages: Math.ceil(total / limit) || 1
    };
  }

  async findOne(id: string): Promise<Order> {
    console.log(`OrdersService.findOne: –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ —Å ID ${id}`);

    const numericId = parseInt(id, 10);
    if (isNaN(numericId)) {
      throw new NotFoundException(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞: ${id}`);
    }

    // –ü–æ–∏—Å–∫ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–π
    const order = await this.orderRepository.findOne({
      where: { id: numericId },
      relations: ['operations']
    });

    if (!order) {
      throw new NotFoundException(`–ó–∞–∫–∞–∑ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    console.log(`OrdersService.findOne: –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ ${order.drawingNumber} —Å ${order.operations?.length || 0} –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏`);

    // –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–∫–∞–∑
    const enrichedOrder = this.enrichOrder(order);
    return enrichedOrder;
  }

  async findByDrawingNumber(drawingNumber: string): Promise<Order | null> {
    const order = await this.orderRepository.findOne({
      where: { drawingNumber },
      relations: ['operations']
    });

    return order ? this.enrichOrder(order) : null;
  }

  async create(createOrderDto: CreateOrderDto): Promise<Order> {
    console.log('OrdersService.create: –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', createOrderDto);

    const { operations: operationsDto, ...orderData } = createOrderDto;

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Entity
    const orderEntityData = {
      ...orderData,
      priority: Number(orderData.priority), 
      deadline: new Date(orderData.deadline)
    };

    console.log('OrdersService.create: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', orderEntityData);

    // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    const orderEntity = this.orderRepository.create(orderEntityData);
    const savedOrder = await this.orderRepository.save(orderEntity);

    console.log(`OrdersService.create: –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ID ${savedOrder.id}`);

    // –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (operationsDto && operationsDto.length > 0) {
      console.log(`OrdersService.create: –°–æ–∑–¥–∞–Ω–∏–µ ${operationsDto.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
      
      const operationEntities = operationsDto.map(opDto => {
        return this.operationRepository.create({
          operationNumber: Number(opDto.operationNumber),
          operationType: opDto.operationType,
          estimatedTime: Number(opDto.estimatedTime),
          machineAxes: Number(opDto.machineAxes),
          status: 'PENDING',
          order: savedOrder, // –°–≤—è–∑—å —Å –∑–∞–∫–∞–∑–æ–º
        });
      });
      
      const savedOperations = await this.operationRepository.save(operationEntities);
      console.log(`OrdersService.create: –°–æ–∑–¥–∞–Ω–æ ${savedOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑ —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    const orderWithOperations = await this.orderRepository.findOne({
      where: { id: savedOrder.id },
      relations: ['operations']
    });

    if (!orderWithOperations) {
      throw new InternalServerErrorException('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑');
    }

    console.log(`OrdersService.create: –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ${orderWithOperations.operations?.length || 0} –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏`);

    // üÜï –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    await this.saveOrderToFileSystem(orderWithOperations, orderWithOperations.operations || []);

    return this.enrichOrder(orderWithOperations);
  }

  async update(id: string, updateOrderDto: UpdateOrderDto): Promise<Order> {
    console.log(`OrdersService.update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ${id}:`, updateOrderDto);

    const numericId = parseInt(id, 10);
    if (isNaN(numericId)) {
      throw new NotFoundException(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞: ${id}`);
    }

    const order = await this.orderRepository.findOne({
      where: { id: numericId },
      relations: ['operations']
    });

    if (!order) {
      throw new NotFoundException(`–ó–∞–∫–∞–∑ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∑–∞–∫–∞–∑–∞
    if (updateOrderDto.drawingNumber !== undefined) {
      order.drawingNumber = updateOrderDto.drawingNumber;
    }
    if (updateOrderDto.quantity !== undefined) {
      order.quantity = updateOrderDto.quantity;
    }
    if (updateOrderDto.workType !== undefined) {
      order.workType = updateOrderDto.workType;
    }
    if (updateOrderDto.priority !== undefined) {
      order.priority = Number(updateOrderDto.priority);
    }
    if (updateOrderDto.deadline !== undefined) {
      order.deadline = new Date(updateOrderDto.deadline);
    }

    const savedOrder = await this.orderRepository.save(order);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (updateOrderDto.operations) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      await this.operationRepository.delete({ order: { id: numericId } });
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (updateOrderDto.operations.length > 0) {
        const operationEntities = updateOrderDto.operations.map(opDto => {
          return this.operationRepository.create({
            operationNumber: Number(opDto.operationNumber),
            operationType: opDto.operationType,
            estimatedTime: Number(opDto.estimatedTime),
            machineAxes: Number(opDto.machineAxes),
            status: 'PENDING',
            order: savedOrder,
          });
        });
        
        await this.operationRepository.save(operationEntities);
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    const updatedOrder = await this.orderRepository.findOne({
      where: { id: numericId },
      relations: ['operations']
    });

    // üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    await this.updateOrderInFileSystem(updatedOrder, updatedOrder.operations || []);

    return this.enrichOrder(updatedOrder);
  }

  async remove(id: string): Promise<void> {
    console.log(`OrdersService.remove: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ${id}`);
    
    const numericId = parseInt(id, 10);
    if (isNaN(numericId)) {
      console.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID: ${id}`);
      throw new NotFoundException(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞: ${id}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const order = await this.orderRepository.findOne({
      where: { id: numericId },
      relations: ['operations']
    });
    
    if (!order) {
      console.error(`–ó–∞–∫–∞–∑ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      throw new NotFoundException(`–ó–∞–∫–∞–∑ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    console.log(`–ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ ${order.drawingNumber} —Å ${order.operations?.length || 0} –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏`);

    try {
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é (–≤ –∫–∞—á–µ—Å—Ç–≤–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏)
      if (order.operations && order.operations.length > 0) {
        console.log(`–£–¥–∞–ª—è–µ–º ${order.operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
        await this.operationRepository.delete({ order: { id: numericId } });
        console.log('–û–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã');
      }
      
      // –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —Å–∞–º –∑–∞–∫–∞–∑
      const result = await this.orderRepository.delete(numericId);
      
      if (result.affected === 0) {
        throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω');
      }
      
      console.log(`‚úÖ –ó–∞–∫–∞–∑ ${id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ ${id}:`, error);
      throw new InternalServerErrorException(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ${error.message}`);
    }
  }

  async removeBatch(ids: string[]): Promise<number> {
    console.log(`OrdersService.removeBatch: –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ ${ids.join(', ')}`);
    
    const numericIds = ids.map(id => parseInt(id, 10)).filter(id => !isNaN(id));
    
    if (numericIds.length === 0) {
      return 0;
    }

    const result = await this.orderRepository.delete(numericIds);
    
    console.log(`OrdersService.removeBatch: –£–¥–∞–ª–µ–Ω–æ ${result.affected} –∑–∞–∫–∞–∑–æ–≤`);
    return result.affected || 0;
  }

  async removeAll(): Promise<number> {
    console.log(`OrdersService.removeAll: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤`);
    
    const result = await this.orderRepository.delete({});
    
    console.log(`OrdersService.removeAll: –£–¥–∞–ª–µ–Ω–æ ${result.affected} –∑–∞–∫–∞–∑–æ–≤`);
    return result.affected || 0;
  }

  async uploadPdf(id: string, filename: string): Promise<Order> {
    console.log(`OrdersService.uploadPdf: –ó–∞–≥—Ä—É–∑–∫–∞ PDF –¥–ª—è –∑–∞–∫–∞–∑–∞ ${id}`);
    
    const order = await this.findOne(id);
    order.pdfPath = filename;
    
    const numericId = parseInt(id, 10);
    await this.orderRepository.update(numericId, { pdfPath: filename });
    
    return order;
  }

  async deletePdf(id: string): Promise<Order> {
    console.log(`OrdersService.deletePdf: –£–¥–∞–ª–µ–Ω–∏–µ PDF –¥–ª—è –∑–∞–∫–∞–∑–∞ ${id}`);
    
    const order = await this.findOne(id);
    
    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    if (order.pdfPath) {
      try {
        const fs = require('fs');
        const path = require('path');
        const filePath = path.join('./uploads/pdf', order.pdfPath);
        
        if (fs.existsSync(filePath)) {
          fs.unlinkSync(filePath);
          console.log(`‚úÖ –§–∞–π–ª ${order.pdfPath} —É–¥–∞–ª–µ–Ω —Å –¥–∏—Å–∫–∞`);
        }
      } catch (error) {
        console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${order.pdfPath}:`, error);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      }
    }
    
    // –û–±–Ω—É–ª—è–µ–º –ø–æ–ª–µ –≤ –ë–î
    const numericId = parseInt(id, 10);
    await this.orderRepository.update(numericId, { pdfPath: null });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    const updatedOrder = await this.findOne(id);
    return updatedOrder;
  }

  private enrichOrder(order: Order): Order {
    const enriched = { ...order } as any;

    enriched.name = enriched.drawingNumber || '–ë–µ–∑ –∏–º–µ–Ω–∏';
    enriched.clientName = '–ù–µ —É–∫–∞–∑–∞–Ω'; // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤ –ë–î
    enriched.remainingQuantity = enriched.quantity;
    enriched.status = this.calculateOrderStatus(order);
    enriched.completionPercentage = this.calculateCompletionPercentage(order);
    enriched.forecastedCompletionDate = enriched.deadline;
    enriched.isOnSchedule = this.isOrderOnSchedule(order);
    enriched.lastRecalculationAt = enriched.updatedAt || enriched.createdAt || new Date();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    enriched.operations = enriched.operations || [];

    return enriched as Order;
  }

  private calculateOrderStatus(order: Order): string {
    if (!order.operations || order.operations.length === 0) {
      return 'planned';
    }

    const completedOps = order.operations.filter(op => op.status === 'COMPLETED').length;
    const totalOps = order.operations.length;

    if (completedOps === 0) return 'planned';
    if (completedOps === totalOps) return 'completed';
    return 'in_progress';
  }

  private calculateCompletionPercentage(order: Order): number {
    if (!order.operations || order.operations.length === 0) {
      return 0;
    }

    const completedOps = order.operations.filter(op => op.status === 'COMPLETED').length;
    return Math.round((completedOps / order.operations.length) * 100);
  }

  private isOrderOnSchedule(order: Order): boolean {
    const now = new Date();
    const deadline = new Date(order.deadline);
    const daysUntilDeadline = Math.ceil((deadline.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –±–æ–ª—å—à–µ 3 –¥–Ω–µ–π - –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    return daysUntilDeadline > 3;
  }

  // üÜï –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
   */
  private async saveOrderToFileSystem(order: Order, operations: Operation[]): Promise<void> {
    try {
      const fileSystemData: OrderFileSystemData = {
        order: {
          ...order,
          operations: undefined // –£–¥–∞–ª—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
        },
        operations: operations.map(op => ({
          ...op,
          order: undefined // –£–¥–∞–ª—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É
        })),
        metadata: {
          version: '1.0',
          created_at: order.createdAt?.toISOString() || new Date().toISOString(),
          updated_at: order.updatedAt?.toISOString() || new Date().toISOString(),
          changes_summary: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
          data_source: 'orders_service',
          export_date: new Date().toISOString()
        }
      };

      await this.orderFileSystemService.createOrderVersion(order.drawingNumber, fileSystemData);
      console.log(`OrdersService: –ó–∞–∫–∞–∑ ${order.drawingNumber} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${order.drawingNumber} –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É:`, error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
   */
  private async updateOrderInFileSystem(order: Order, operations: Operation[]): Promise<void> {
    try {
      const fileSystemData: OrderFileSystemData = {
        order: {
          ...order,
          operations: undefined
        },
        operations: operations.map(op => ({
          ...op,
          order: undefined
        })),
        metadata: {
          version: '1.1',
          created_at: order.createdAt?.toISOString() || new Date().toISOString(),
          updated_at: new Date().toISOString(),
          changes_summary: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
          data_source: 'orders_service',
          export_date: new Date().toISOString()
        }
      };

      await this.orderFileSystemService.updateOrderVersion(order.drawingNumber, fileSystemData);
      console.log(`OrdersService: –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–∫–∞–∑–∞ ${order.drawingNumber} –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${order.drawingNumber} –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ:`, error);
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
   */
  async exportAllOrdersToFileSystem(): Promise<{ success: number; errors: number }> {
    console.log('OrdersService: –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É');
    
    const orders = await this.orderRepository.find({ relations: ['operations'] });
    let success = 0;
    let errors = 0;

    for (const order of orders) {
      try {
        await this.orderFileSystemService.exportOrderFromDatabase(order, order.operations || []);
        success++;
        console.log(`–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∑–∞–∫–∞–∑ ${order.drawingNumber}`);
      } catch (error) {
        errors++;
        console.error(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–∞ ${order.drawingNumber}:`, error);
      }
    }

    console.log(`OrdersService: –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ: ${success}, –û—à–∏–±–æ–∫: ${errors}`);
    return { success, errors };
  }
}
