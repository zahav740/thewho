/**
 * @file: improved-operation-finder.service.ts
 * @description: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–π - –Ω–∞—Ö–æ–¥–∏—Ç –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @created: 2025-06-07
 */
import { Injectable, Logger } from '@nestjs/common';
import { InjectDataSource } from '@nestjs/typeorm';
import { DataSource } from 'typeorm';

interface OperationInfo {
  id: number;
  orderId: number;
  operationNumber: number;
  operationType: string;
  estimatedTime: number;
  machineAxes: number;
  status: string;
  description: string;
  orderInfo: {
    drawingNumber: string;
    priority: number;
    quantity: number;
    deadline: string;
    workType: string;
  };
  canStart: boolean;
  blockingReason?: string;
  compatibleMachines: any[];
}

@Injectable()
export class ImprovedOperationFinderService {
  private readonly logger = new Logger(ImprovedOperationFinderService.name);

  constructor(
    @InjectDataSource()
    private readonly dataSource: DataSource,
  ) {}

  /**
   * –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö - –Ω–∞—Ö–æ–¥–∏—Ç –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async findAllAvailableOperations(selectedMachineIds?: number[]): Promise<{
    totalOrders: number;
    totalOperations: number;
    availableOperations: OperationInfo[];
    readyToStart: number;
    needsPrerequisites: number;
    summary: string;
  }> {
    this.logger.log('üîç === –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –í–°–ï–• –î–û–°–¢–£–ü–ù–´–• –û–ü–ï–†–ê–¶–ò–ô ===');

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–∫–∞–∑—ã (–Ω–µ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ 1-3)
      const allOrders = await this.dataSource.query(`
        SELECT 
          id,
          drawing_number as "drawingNumber",
          priority,
          quantity,
          deadline,
          "workType"
        FROM orders 
        ORDER BY priority ASC, deadline ASC
      `);

      this.logger.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${allOrders.length} –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ`);

      // 2. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏
      const availableMachines = await this.getAvailableMachines(selectedMachineIds);
      this.logger.log(`üè≠ –î–æ—Å—Ç—É–ø–Ω–æ ${availableMachines.length} —Å—Ç–∞–Ω–∫–æ–≤`);

      // 3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏—â–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
      const allAvailableOperations: OperationInfo[] = [];
      let readyToStart = 0;
      let needsPrerequisites = 0;

      for (const order of allOrders) {
        this.logger.log(`\nüì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑: ${order.drawingNumber} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ${order.priority})`);

        // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        const orderOperations = await this.dataSource.query(`
          SELECT 
            id,
            "orderId",
            "operationNumber",
            operationtype as "operationType",
            "estimatedTime",
            machineaxes as "machineAxes",
            status,
            description
          FROM operations 
          WHERE "orderId" = $1
          ORDER BY "operationNumber" ASC
        `, [order.id]);

        this.logger.log(`  üîß –ù–∞–π–¥–µ–Ω–æ ${orderOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        for (const operation of orderOperations) {
          let canStart = true;
          let blockingReason: string | undefined;

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
          if (operation.status === 'COMPLETED') {
            this.logger.log(`    ‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è ${operation.operationNumber} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
          }

          if (operation.status === 'IN_PROGRESS') {
            this.logger.log(`    ‚è≥ –û–ø–µ—Ä–∞—Ü–∏—è ${operation.operationNumber} –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è`);
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞ —Å—Ç–∞–Ω–∫–µ
          const isInProgress = await this.isOperationInProgress(operation.id);
          if (isInProgress) {
            this.logger.log(`    üö´ –û–ø–µ—Ä–∞—Ü–∏—è ${operation.operationNumber} –∑–∞–Ω—è—Ç–∞ –Ω–∞ —Å—Ç–∞–Ω–∫–µ`);
            continue;
          }

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
          if (operation.operationNumber > 1) {
            const prevOperations = await this.dataSource.query(`
              SELECT id, "operationNumber", status 
              FROM operations 
              WHERE "orderId" = $1 AND "operationNumber" < $2
              ORDER BY "operationNumber" DESC
            `, [order.id, operation.operationNumber]);

            const uncompletedPrev = prevOperations.find(op => op.status !== 'COMPLETED');
            if (uncompletedPrev) {
              canStart = false;
              blockingReason = `–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${uncompletedPrev.operationNumber}`;
              needsPrerequisites++;
            }
          }

          // –ù–∞–π—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å—Ç–∞–Ω–∫–∏
          const compatibleMachines = this.findCompatibleMachines(operation, availableMachines);

          if (compatibleMachines.length === 0) {
            canStart = false;
            if (!blockingReason) {
              blockingReason = `–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–∞–Ω–∫–æ–≤ –¥–ª—è ${operation.operationType}`;
            }
          }

          if (canStart) {
            readyToStart++;
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å–ø–∏—Å–æ–∫ (–¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)
          allAvailableOperations.push({
            id: operation.id,
            orderId: operation.orderId,
            operationNumber: operation.operationNumber,
            operationType: operation.operationType,
            estimatedTime: operation.estimatedTime || 60, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 –º–∏–Ω—É—Ç
            machineAxes: operation.machineAxes || 3,
            status: operation.status || 'PENDING',
            description: operation.description || '',
            orderInfo: {
              drawingNumber: order.drawingNumber,
              priority: order.priority,
              quantity: order.quantity,
              deadline: order.deadline,
              workType: order.workType
            },
            canStart,
            blockingReason,
            compatibleMachines
          });

          this.logger.log(`    ${canStart ? '‚úÖ' : '‚è∏Ô∏è'} –û–ø–µ—Ä–∞—Ü–∏—è ${operation.operationNumber}: ${canStart ? '–ì–û–¢–û–í–ê' : blockingReason}`);
        }
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏: —Å–Ω–∞—á–∞–ª–∞ –≥–æ—Ç–æ–≤—ã–µ, –ø–æ—Ç–æ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
      allAvailableOperations.sort((a, b) => {
        // –°–Ω–∞—á–∞–ª–∞ –≥–æ—Ç–æ–≤—ã–µ –∫ —Å—Ç–∞—Ä—Ç—É
        if (a.canStart && !b.canStart) return -1;
        if (!a.canStart && b.canStart) return 1;
        
        // –ü–æ—Ç–æ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∑–∞–∫–∞–∑–∞
        const priorityDiff = a.orderInfo.priority - b.orderInfo.priority;
        if (priorityDiff !== 0) return priorityDiff;
        
        // –ü–æ—Ç–æ–º –ø–æ –Ω–æ–º–µ—Ä—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        return a.operationNumber - b.operationNumber;
      });

      const summary = `–ù–∞–π–¥–µ–Ω–æ ${allAvailableOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π: ${readyToStart} –≥–æ—Ç–æ–≤—ã –∫ —Å—Ç–∞—Ä—Ç—É, ${needsPrerequisites} –æ–∂–∏–¥–∞—é—Ç`;
      
      this.logger.log(`\nüéØ –ò–¢–û–ì–û: ${summary}`);

      return {
        totalOrders: allOrders.length,
        totalOperations: allAvailableOperations.length,
        availableOperations: allAvailableOperations,
        readyToStart,
        needsPrerequisites,
        summary
      };

    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
      throw error;
    }
  }

  /**
   * –ù–∞–π—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å—Ç–∞–Ω–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
   */
  private findCompatibleMachines(operation: any, availableMachines: any[]): any[] {
    const operationType = (operation.operationType || '').toLowerCase();
    
    this.logger.log(`üîç –ò—â–µ–º —Å—Ç–∞–Ω–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏: "${operation.operationType}" (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: "${operationType}")`);
    
    return availableMachines.filter(machine => {
      const machineType = (machine.type || '').toLowerCase();
      this.logger.log(`  –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–æ–∫ ${machine.code}: —Ç–∏–ø "${machine.type}" (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: "${machineType}")`);
      
      let isCompatible = false;
      
      // –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø
      if (operationType.includes('turn') || operationType.includes('—Ç–æ–∫–∞—Ä')) {
        // –¢–æ–∫–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        isCompatible = machineType.includes('turn') || machineType.includes('—Ç–æ–∫–∞—Ä');
        this.logger.log(`    –¢–æ–∫–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${isCompatible}`);
      } 
      else if (operationType.includes('mill') || operationType.includes('—Ñ—Ä–µ–∑')) {
        // –§—Ä–µ–∑–µ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (operation.machineAxes === 4 || operationType.includes('4')) {
          isCompatible = machineType.includes('mill') && machine.axes >= 4;
          this.logger.log(`    –§—Ä–µ–∑–µ—Ä–Ω–∞—è 4-–æ—Å–µ–≤–∞—è: ${isCompatible}`);
        } else {
          isCompatible = machineType.includes('mill') || machineType.includes('—Ñ—Ä–µ–∑');
          this.logger.log(`    –§—Ä–µ–∑–µ—Ä–Ω–∞—è 3-–æ—Å–µ–≤–∞—è: ${isCompatible}`);
        }
      }
      else if (operationType.includes('drill') || operationType.includes('—Å–≤–µ—Ä–ª')) {
        // –°–≤–µ—Ä–ª–µ–Ω–∏–µ
        isCompatible = machineType.includes('mill') || machineType.includes('—Ñ—Ä–µ–∑');
        this.logger.log(`    –°–≤–µ—Ä–ª–µ–Ω–∏–µ (–Ω–∞ —Ñ—Ä–µ–∑–µ—Ä–Ω—ã—Ö): ${isCompatible}`);
      }
      else if (operationType.includes('grind') || operationType.includes('—à–ª–∏—Ñ')) {
        // –®–ª–∏—Ñ–æ–≤–∞–Ω–∏–µ
        isCompatible = true;
        this.logger.log(`    –®–ª–∏—Ñ–æ–≤–∞–Ω–∏–µ (–Ω–∞ –ª—é–±–æ–º): ${isCompatible}`);
      }
      else {
        // –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü - –ø—Ä–æ–±—É–µ–º —É–≥–∞–¥–∞—Ç—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        this.logger.warn(`    ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: "${operation.operationType}"`);
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Ñ—Ä–µ–∑–µ—Ä–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π
        isCompatible = machineType.includes('mill') || machineType.includes('—Ñ—Ä–µ–∑');
        this.logger.log(`    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ñ—Ä–µ–∑–µ—Ä–Ω–∞—è): ${isCompatible}`);
      }
      
      if (isCompatible) {
        this.logger.log(`    ‚úÖ –°—Ç–∞–Ω–æ–∫ ${machine.code} –°–û–í–ú–ï–°–¢–ò–ú`);
      } else {
        this.logger.log(`    ‚ùå –°—Ç–∞–Ω–æ–∫ ${machine.code} –ù–ï —Å–æ–≤–º–µ—Å—Ç–∏–º`);
      }
      
      return isCompatible;
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏
   */
  private async getAvailableMachines(selectedMachineIds?: number[]): Promise<any[]> {
    let query = `
      SELECT 
        id,
        code,
        type,
        axes,
        "isActive",
        "isOccupied"
      FROM machines 
      WHERE "isActive" = true AND "isOccupied" = false
    `;
    
    let params = [];
    
    if (selectedMachineIds && selectedMachineIds.length > 0) {
      query += ' AND id = ANY($1)';
      params = [selectedMachineIds];
    }
    
    const machines = await this.dataSource.query(query, params);
    
    this.logger.log(`üè≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏:`);
    machines.forEach(m => {
      this.logger.log(`  - ${m.code}: ${m.type}, ${m.axes} –æ—Å–µ–π`);
    });
    
    return machines;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞ —Å—Ç–∞–Ω–∫–µ
   */
  private async isOperationInProgress(operationId: number): Promise<boolean> {
    const result = await this.dataSource.query(`
      SELECT COUNT(*) as count 
      FROM machines 
      WHERE "currentOperation" = $1 AND "isOccupied" = true
    `, [operationId]);
    
    return parseInt(result[0].count) > 0;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-3 –ª—É—á—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async getTopRecommendedOperations(selectedMachineIds?: number[]): Promise<OperationInfo[]> {
    const result = await this.findAllAvailableOperations(selectedMachineIds);
    
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ –∫ —Å—Ç–∞—Ä—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏
    const readyOperations = result.availableOperations.filter(op => op.canStart);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –±–µ—Ä–µ–º —Ç–æ–ø-3
    const topOperations = readyOperations
      .sort((a, b) => {
        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1) - —Å–Ω–∞—á–∞–ª–∞
        if (a.orderInfo.priority === 1 && b.orderInfo.priority !== 1) return -1;
        if (a.orderInfo.priority !== 1 && b.orderInfo.priority === 1) return 1;
        
        // –ü–æ—Ç–æ–º –ø–æ –¥–µ–¥–ª–∞–π–Ω—É
        const aDeadline = new Date(a.orderInfo.deadline);
        const bDeadline = new Date(b.orderInfo.deadline);
        return aDeadline.getTime() - bDeadline.getTime();
      })
      .slice(0, 3);

    this.logger.log(`üåü –¢–æ–ø-${topOperations.length} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:`);
    topOperations.forEach((op, i) => {
      this.logger.log(`  ${i+1}. ${op.orderInfo.drawingNumber} - –û–ø–µ—Ä–∞—Ü–∏—è ${op.operationNumber} (${op.operationType})`);
    });

    return topOperations;
  }
}
