/**
 * @file: production-planning-extensions.service.ts
 * @description: –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 * @created: 2025-06-07
 */
import { Injectable, Logger } from '@nestjs/common';
import { InjectDataSource } from '@nestjs/typeorm';
import { DataSource } from 'typeorm';
import { 
  OrderWithPriority, 
  OperationData, 
  MachineAvailability,
  PlanningResult 
} from './production-planning.service';

@Injectable()
export class ProductionPlanningExtensionsService {
  private readonly logger = new Logger(ProductionPlanningExtensionsService.name);

  constructor(
    @InjectDataSource()
    private readonly dataSource: DataSource,
  ) {}

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   */
  async getAvailableOperations(selectedMachineIds?: number[]): Promise<{
    orders: OrderWithPriority[];
    availableOperations: (OperationData & { 
      orderInfo: OrderWithPriority; 
      compatibleMachines: MachineAvailability[];
      canStart: boolean;
      blockingReason?: string;
    })[];
    totalOperations: number;
  }> {
    this.logger.log('=== –ü–û–õ–£–ß–ï–ù–ò–ï –î–û–°–¢–£–ü–ù–´–• –û–ü–ï–†–ê–¶–ò–ô –î–õ–Ø –í–´–ë–û–†–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú ===');

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
      const orders = await this.getOrdersWithPriorities();
      
      // 2. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏
      const machines = await this.getAvailableMachines(selectedMachineIds || []);
      
      // 3. –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–∏—Ö –∑–∞–∫–∞–∑–æ–≤
      const allAvailableOperations = await this.getAvailableOperationsForOrders(orders);
      
      // 4. –†–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
      const enhancedOperations = [];
      
      for (const operation of allAvailableOperations) {
        const orderInfo = orders.find(o => o.id === operation.orderId);
        
        if (!orderInfo) continue;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å—Ç–∞–Ω–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
        const compatibleMachines = machines.filter(machine => {
          const operationType = (operation.operationType || '').toLowerCase();
          const machineType = (machine.type || '').toLowerCase();
          
          this.logger.log(`  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –æ–ø–µ—Ä–∞—Ü–∏—è "${operation.operationType}" —Å–æ —Å—Ç–∞–Ω–∫–æ–º ${machine.code} (${machine.type})`);
          
          // –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø
          if (operationType.includes('turn') || operationType.includes('—Ç–æ–∫–∞—Ä')) {
            return machineType.includes('turn') || machineType.includes('—Ç–æ–∫–∞—Ä');
          } else if (operationType.includes('mill') || operationType.includes('—Ñ—Ä–µ–∑')) {
            if (operation.machineAxes === 4 || operationType.includes('4')) {
              return machineType.includes('mill') && machine.axes >= 4;
            } else {
              return machineType.includes('mill') || machineType.includes('—Ñ—Ä–µ–∑');
            }
          } else if (operationType.includes('drill') || operationType.includes('—Å–≤–µ—Ä–ª')) {
            return machineType.includes('mill') || machineType.includes('—Ñ—Ä–µ–∑');
          } else if (operationType.includes('grind') || operationType.includes('—à–ª–∏—Ñ')) {
            return true; // –õ—é–±–æ–π —Å—Ç–∞–Ω–æ–∫
          } else {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Ñ—Ä–µ–∑–µ—Ä–Ω–æ–π
            this.logger.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: "${operation.operationType}", —Å—á–∏—Ç–∞–µ–º —Ñ—Ä–µ–∑–µ—Ä–Ω–æ–π`);
            return machineType.includes('mill') || machineType.includes('—Ñ—Ä–µ–∑');
          }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞—á–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
        let canStart = true;
        let blockingReason: string | undefined;
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º WAITING
        if (operation.status === 'WAITING') {
          canStart = false;
          blockingReason = `–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π`;
        } else {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
          if (operation.operationNumber > 1) {
            const prevOperations = await this.dataSource.query(`
              SELECT status FROM operations 
              WHERE "orderId" = $1 AND "operationNumber" < $2
              ORDER BY "operationNumber" DESC
            `, [operation.orderId, operation.operationNumber]);
            
            const uncompletedPrev = prevOperations.find(op => op.status !== 'COMPLETED');
            if (uncompletedPrev) {
              canStart = false;
              blockingReason = `–û–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.operationNumber - 1}`;
            }
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω–∫–æ–≤
        if (compatibleMachines.length === 0) {
          canStart = false;
          blockingReason = `–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.operationType}`;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (operation.status === 'IN_PROGRESS') {
          canStart = false;
          blockingReason = '–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è';
        }
        
        enhancedOperations.push({
          ...operation,
          orderInfo,
          compatibleMachines,
          canStart,
          blockingReason
        });
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∑–∞–∫–∞–∑–∞ –∏ –Ω–æ–º–µ—Ä—É –æ–ø–µ—Ä–∞—Ü–∏–∏
      enhancedOperations.sort((a, b) => {
        const priorityDiff = a.orderInfo.priority - b.orderInfo.priority;
        if (priorityDiff !== 0) return priorityDiff;
        return a.operationNumber - b.operationNumber;
      });
      
      this.logger.log(`–ù–∞–π–¥–µ–Ω–æ ${enhancedOperations.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ ${orders.length} –∑–∞–∫–∞–∑–æ–≤`);
      
      return {
        orders,
        availableOperations: enhancedOperations,
        totalOperations: enhancedOperations.length
      };
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:', error);
      throw error;
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
   */
  async planWithSelectedOperations(request: {
    selectedMachines: number[];
    selectedOperations: { operationId: number; machineId: number; }[];
  }): Promise<PlanningResult> {
    this.logger.log('=== –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –° –í–´–ë–†–ê–ù–ù–´–ú–ò –û–ü–ï–†–ê–¶–ò–Ø–ú–ò ===');
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      const operations = [];
      const orders = [];
      
      for (const selected of request.selectedOperations) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
        const operationData = await this.dataSource.query(`
          SELECT 
            o.id,
            o."orderId",
            o."operationNumber",
            o.operationtype as "operationType",
            o."estimatedTime",
            o.machineaxes as "machineAxes",
            o.status,
            ord.drawing_number as "drawingNumber",
            ord.priority,
            ord.quantity,
            ord.deadline,
            ord."workType"
          FROM operations o
          JOIN orders ord ON o."orderId" = ord.id
          WHERE o.id = $1
        `, [selected.operationId]);
        
        if (operationData.length === 0) {
          throw new Error(`–û–ø–µ—Ä–∞—Ü–∏—è —Å ID ${selected.operationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
        
        const opData = operationData[0];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–æ–∫
        const machineData = await this.dataSource.query(`
          SELECT * FROM machines 
          WHERE id = $1 AND "isActive" = true AND "isOccupied" = false
        `, [selected.machineId]);
        
        if (machineData.length === 0) {
          throw new Error(`–°—Ç–∞–Ω–æ–∫ —Å ID ${selected.machineId} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
        }
        
        operations.push({
          id: opData.id,
          orderId: opData.orderId,
          operationNumber: opData.operationNumber,
          operationType: opData.operationType,
          estimatedTime: opData.estimatedTime,
          machineAxes: opData.machineAxes,
          status: opData.status
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
        if (!orders.find(o => o.id === opData.orderId)) {
          orders.push({
            id: opData.orderId,
            drawingNumber: opData.drawingNumber,
            priority: opData.priority,
            quantity: opData.quantity,
            deadline: opData.deadline,
            workType: opData.workType
          });
        }
      }
      
      // –°—Ç—Ä–æ–∏–º –æ—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–π
      const operationsQueue = request.selectedOperations.map((selected, index) => {
        const operation = operations.find(op => op.id === selected.operationId);
        const order = orders.find(o => o.id === operation?.orderId);
        
        return {
          orderId: operation!.orderId,
          operationId: operation!.id,
          operationNumber: operation!.operationNumber,
          operationType: operation!.operationType,
          machineId: selected.machineId,
          machineAxes: operation!.machineAxes,
          priority: order!.priority,
          estimatedTime: operation!.estimatedTime
        };
      });
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è
      const result = this.calculateTimelines(operationsQueue, orders);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      await this.saveResults(result);
      
      this.logger.log('–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return result;
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏:', error);
      throw error;
    }
  }

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  private async getOrdersWithPriorities(): Promise<OrderWithPriority[]> {
    this.logger.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• –∑–∞–∫–∞–∑–æ–≤ (–Ω–µ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ 1-3)');
    
    const orders = await this.dataSource.query(`
      SELECT 
        id,
        drawing_number as "drawingNumber",
        priority,
        quantity,
        deadline,
        "workType"
      FROM orders 
      ORDER BY priority ASC, deadline ASC
    `);

    this.logger.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    orders.forEach(order => {
      this.logger.log(`  - ${order.drawingNumber}: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ${order.priority}, —Å—Ä–æ–∫ ${order.deadline}`);
    });
    
    return orders;
  }

  private async getAvailableMachines(selectedMachineIds: number[]): Promise<MachineAvailability[]> {
    let query = `
      SELECT 
        id,
        code,
        type,
        axes,
        "isActive",
        "isOccupied"
      FROM machines 
      WHERE "isActive" = true AND "isOccupied" = false
    `;
    
    let params = [];
    
    if (selectedMachineIds && selectedMachineIds.length > 0) {
      query += ' AND id = ANY($1)';
      params = [selectedMachineIds];
    }
    
    return await this.dataSource.query(query, params);
  }

  private async getAvailableOperationsForOrders(orders: OrderWithPriority[]): Promise<OperationData[]> {
    this.logger.log('üîß === –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –û–ü–ï–†–ê–¶–ò–ô ===');
    const availableOperations: OperationData[] = [];
    
    for (const order of orders) {
      this.logger.log(`\nüì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑: ${order.drawingNumber} (ID: ${order.id})`);
      
      // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
      const allOperations = await this.dataSource.query(`
        SELECT 
          id,
          "orderId",
          "operationNumber",
          operationtype as "operationType",
          "estimatedTime",
          machineaxes as "machineAxes",
          status,
          description
        FROM operations 
        WHERE "orderId" = $1
        ORDER BY "operationNumber" ASC
      `, [order.id]);

      this.logger.log(`  üîß –ù–∞–π–¥–µ–Ω–æ ${allOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
      
      if (allOperations.length === 0) {
        this.logger.warn(`  ‚ö†Ô∏è –£ –∑–∞–∫–∞–∑–∞ ${order.drawingNumber} –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π!`);
        continue;
      }

      // –ò—â–µ–º –ü–ï–†–í–£–Æ –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥—É—é—â—É—é –ø–æ –ø–æ—Ä—è–¥–∫—É)
      for (const operation of allOperations) {
        this.logger.log(`    –û–ø–µ—Ä–∞—Ü–∏—è ${operation.operationNumber}: ${operation.operationType}, —Å—Ç–∞—Ç—É—Å: ${operation.status || 'PENDING'}`);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (operation.status === 'COMPLETED') {
          this.logger.log(`      ‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (operation.status === 'IN_PROGRESS') {
          this.logger.log(`      ‚è≥ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç–∞ –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞ —Å—Ç–∞–Ω–∫–µ
        const isInProgress = await this.isOperationInProgress(operation.id);
        if (isInProgress) {
          this.logger.log(`      üö´ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è—Ç–∞ –Ω–∞ —Å—Ç–∞–Ω–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }
        
        // –î–ª—è –ø–µ—Ä–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ - –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (operation.operationNumber === 1) {
          this.logger.log(`      üéØ –ü–µ—Ä–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º`);
          availableOperations.push({
            id: operation.id,
            orderId: operation.orderId,
            operationNumber: operation.operationNumber,
            operationType: operation.operationType || 'MILLING',
            estimatedTime: operation.estimatedTime || 60,
            machineAxes: operation.machineAxes || 3,
            status: operation.status || 'PENDING'
          });
          break; // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ –∑–∞–∫–∞–∑
        }
        
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
        const prevOperations = await this.dataSource.query(`
          SELECT "operationNumber", status 
          FROM operations 
          WHERE "orderId" = $1 AND "operationNumber" < $2
          ORDER BY "operationNumber" DESC
        `, [order.id, operation.operationNumber]);
        
        const allPrevCompleted = prevOperations.every(op => op.status === 'COMPLETED');
        
        if (allPrevCompleted) {
          this.logger.log(`      üéØ –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã - –¥–æ–±–∞–≤–ª—è–µ–º`);
          availableOperations.push({
            id: operation.id,
            orderId: operation.orderId,
            operationNumber: operation.operationNumber,
            operationType: operation.operationType || 'MILLING',
            estimatedTime: operation.estimatedTime || 60,
            machineAxes: operation.machineAxes || 3,
            status: operation.status || 'PENDING'
          });
          break; // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ –∑–∞–∫–∞–∑
        } else {
          this.logger.log(`      ‚è∏Ô∏è –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π`);
          
          // –î–û–ë–ê–í–õ–Ø–ï–ú –î–ê–ñ–ï –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          availableOperations.push({
            id: operation.id,
            orderId: operation.orderId,
            operationNumber: operation.operationNumber,
            operationType: operation.operationType || 'MILLING',
            estimatedTime: operation.estimatedTime || 60,
            machineAxes: operation.machineAxes || 3,
            status: 'WAITING' // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–∂–∏–¥–∞—é—â—É—é
          });
          break;
        }
      }
    }
    
    this.logger.log(`\nüéØ –ò–¢–û–ì–û: –ù–∞–π–¥–µ–Ω–æ ${availableOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`);
    availableOperations.forEach(op => {
      this.logger.log(`  - –ó–∞–∫–∞–∑ ${op.orderId}, –û–ø–µ—Ä–∞—Ü–∏—è ${op.operationNumber} (${op.operationType}) - ${op.status}`);
    });
    
    return availableOperations;
  }

  private async isOperationInProgress(operationId: number): Promise<boolean> {
    const result = await this.dataSource.query(`
      SELECT COUNT(*) as count 
      FROM machines 
      WHERE "currentOperation" = $1 AND "isOccupied" = true
    `, [operationId]);
    
    return parseInt(result[0].count) > 0;
  }

  private calculateTimelines(queue: any[], orders: OrderWithPriority[]): PlanningResult {
    let currentTime = new Date();
    let totalTime = 0;
    
    const operationsQueue = queue.map(queueItem => {
      const startTime = new Date(currentTime);
      const endTime = new Date(currentTime.getTime() + queueItem.estimatedTime * 60000);
      
      totalTime += queueItem.estimatedTime;
      currentTime = endTime;
      
      return {
        ...queueItem,
        startTime,
        endTime
      };
    });

    return {
      selectedOrders: orders,
      operationsQueue,
      totalTime,
      calculationDate: new Date()
    };
  }

  private async saveResults(result: PlanningResult): Promise<void> {
    try {
      await this.dataSource.query(`
        INSERT INTO planning_results (
          calculation_date,
          selected_orders,
          selected_machines,
          queue_plan,
          total_time
        ) VALUES ($1, $2, $3, $4, $5)
      `, [
        result.calculationDate,
        JSON.stringify(result.selectedOrders),
        JSON.stringify(result.operationsQueue.map(op => op.machineId)),
        JSON.stringify(result.operationsQueue),
        result.totalTime
      ]);

      for (const order of result.selectedOrders) {
        const orderOperations = result.operationsQueue.filter(op => op.orderId === order.id);
        
        await this.dataSource.query(`
          INSERT INTO operation_progress (
            order_id,
            calculation_date,
            deadline,
            quantity,
            total_production_time,
            operations
          ) VALUES ($1, $2, $3, $4, $5, $6)
        `, [
          order.id,
          result.calculationDate,
          order.deadline,
          order.quantity,
          orderOperations.reduce((sum, op) => sum + op.estimatedTime, 0),
          JSON.stringify(orderOperations)
        ]);
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      throw error;
    }
  }
}
