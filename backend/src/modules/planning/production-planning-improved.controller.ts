/**
 * @file: production-planning-improved.controller.ts
 * @description: –£–õ–£–ß–®–ï–ù–ù–´–ô –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É—á–µ—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ä–∞–±–æ—Ç–µ
 * @dependencies: production-planning-improved.service
 * @created: 2025-06-08
 */
import {
  Controller,
  Post,
  Get,
  Body,
  Query,
  Logger,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';
import { 
  ProductionPlanningImprovedService, 
  PlanningRequest, 
  PlanningResult 
} from './production-planning-improved.service';

@ApiTags('planning-improved')
@Controller('planning-improved')
export class ProductionPlanningImprovedController {
  private readonly logger = new Logger(ProductionPlanningImprovedController.name);

  constructor(
    private readonly planningService: ProductionPlanningImprovedService,
  ) {}

  @Post('plan')
  @ApiOperation({ 
    summary: 'üöÄ –£–õ–£–ß–®–ï–ù–ù–û–ï –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
    description: '–†–µ–∞–ª–∏–∑—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É—á–µ—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ä–∞–±–æ—Ç–µ'
  })
  @ApiResponse({ status: 200, description: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' })
  @ApiResponse({ status: 400, description: '–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞' })
  async planProductionImproved(@Body() request: PlanningRequest): Promise<any> {
    try {
      this.logger.log('üöÄ –£–õ–£–ß–®–ï–ù–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å');
      this.logger.log(`–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏: ${request.selectedMachines.join(', ')}`);
      
      const result = await this.planningService.planProduction(request);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      const response = {
        success: true,
        message: '–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
        result: {
          selectedOrdersCount: result.selectedOrders.length,
          operationsQueueLength: result.operationsQueue.length,
          totalTime: result.totalTime,
          totalTimeFormatted: this.formatTime(result.totalTime),
          calculationDate: result.calculationDate,
          hasWarnings: result.warnings && result.warnings.length > 0,
          warnings: result.warnings || [],
          details: result
        },
        analysis: {
          availableOperations: result.operationsQueue.length,
          totalEstimatedTime: result.totalTime,
          operationsByType: this.groupOperationsByType(result.operationsQueue),
          operationsByPriority: this.groupOperationsByPriority(result.operationsQueue, result.selectedOrders)
        }
      };
      
      this.logger.log('‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï: –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return response;
      
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
        message: error.message,
        suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω–∫–æ–≤ –∏ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –ë–î'
      };
    }
  }

  @Post('demo')
  @ApiOperation({ 
    summary: 'üéØ –î–ï–ú–û —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
    description: '–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ç–∞–Ω–∫–∞–º–∏'
  })
  async demoImprovedPlanning() {
    try {
      this.logger.log('üéØ –î–ï–ú–û –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø: –ó–∞–ø—É—Å–∫');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏
      const availableMachines = await this.getAvailableMachinesFromDB();
      const machineIds = availableMachines.map(m => m.id);
      
      if (machineIds.length === 0) {
        return {
          success: false,
          error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤ –¥–ª—è –¥–µ–º–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
          suggestion: '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ –ë–î –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ (isActive=true, isOccupied=false)',
          analysis: {
            availableMachines: 0,
            activeMachines: await this.getActiveMachinesCount(),
            occupiedMachines: await this.getOccupiedMachinesCount()
          }
        };
      }
      
      this.logger.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º ${machineIds.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤: ${machineIds.join(', ')}`);
      
      const planningRequest: PlanningRequest = {
        selectedMachines: machineIds
      };
      
      const result = await this.planningService.planProduction(planningRequest);
      
      return {
        success: true,
        message: `–î–µ–º–æ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å ${machineIds.length} —Å—Ç–∞–Ω–∫–∞–º–∏`,
        result: {
          selectedOrdersCount: result.selectedOrders.length,
          operationsQueueLength: result.operationsQueue.length,
          totalTime: result.totalTime,
          totalTimeFormatted: this.formatTime(result.totalTime),
          calculationDate: result.calculationDate,
          hasWarnings: result.warnings && result.warnings.length > 0,
          warnings: result.warnings || [],
          details: result
        },
        machinesUsed: {
          total: machineIds.length,
          machineIds: machineIds,
          machineDetails: availableMachines.map(m => ({
            id: m.id,
            code: m.code,
            type: m.type,
            axes: m.axes
          }))
        }
      };
      
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–º–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
        message: error.message,
        suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤ –ë–î –µ—Å—Ç—å –∑–∞–∫–∞–∑—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ 1, 2, 3 –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'
      };
    }
  }

  @Get('analysis')
  @ApiOperation({ 
    summary: 'üìä –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã',
    description: '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Å—Ç–∞–Ω–∫–æ–≤'
  })
  async getSystemAnalysis() {
    try {
      this.logger.log('üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã');
      
      const analysis = {
        machines: await this.getMachinesAnalysis(),
        operations: await this.getOperationsAnalysis(),
        orders: await this.getOrdersAnalysis(),
        recommendations: await this.getRecommendations()
      };
      
      return {
        success: true,
        timestamp: new Date(),
        analysis
      };
      
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏—Å—Ç–µ–º—ã:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏—Å—Ç–µ–º—ã',
        message: error.message
      };
    }
  }

  // ==========================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ==========================================

  private async getAvailableMachinesFromDB() {
    return await this.planningService['dataSource'].query(`
      SELECT id, code, type, axes, "isActive", "isOccupied"
      FROM machines 
      WHERE "isActive" = true AND "isOccupied" = false
      ORDER BY type, code
    `);
  }

  private async getActiveMachinesCount(): Promise<number> {
    const result = await this.planningService['dataSource'].query(`
      SELECT COUNT(*) as count FROM machines WHERE "isActive" = true
    `);
    return parseInt(result[0].count);
  }

  private async getOccupiedMachinesCount(): Promise<number> {
    const result = await this.planningService['dataSource'].query(`
      SELECT COUNT(*) as count FROM machines WHERE "isOccupied" = true
    `);
    return parseInt(result[0].count);
  }

  private async getMachinesAnalysis() {
    const total = await this.planningService['dataSource'].query(`
      SELECT COUNT(*) as count FROM machines
    `);
    
    const active = await this.planningService['dataSource'].query(`
      SELECT COUNT(*) as count FROM machines WHERE "isActive" = true
    `);
    
    const available = await this.planningService['dataSource'].query(`
      SELECT COUNT(*) as count FROM machines WHERE "isActive" = true AND "isOccupied" = false
    `);
    
    const byType = await this.planningService['dataSource'].query(`
      SELECT type, COUNT(*) as count 
      FROM machines 
      WHERE "isActive" = true 
      GROUP BY type
    `);

    return {
      total: parseInt(total[0].count),
      active: parseInt(active[0].count),
      available: parseInt(available[0].count),
      occupied: parseInt(active[0].count) - parseInt(available[0].count),
      byType: byType.reduce((acc, item) => {
        acc[item.type] = parseInt(item.count);
        return acc;
      }, {})
    };
  }

  private async getOperationsAnalysis() {
    const total = await this.planningService['dataSource'].query(`
      SELECT COUNT(*) as count FROM operations
    `);
    
    const byStatus = await this.planningService['dataSource'].query(`
      SELECT 
        COALESCE(status, 'PENDING') as status, 
        COUNT(*) as count 
      FROM operations 
      GROUP BY status
    `);
    
    const inProgress = await this.planningService['dataSource'].query(`
      SELECT COUNT(*) as count 
      FROM operations 
      WHERE status = 'IN_PROGRESS' OR id IN (
        SELECT "currentOperation" FROM machines WHERE "currentOperation" IS NOT NULL
      )
    `);

    return {
      total: parseInt(total[0].count),
      inProgress: parseInt(inProgress[0].count),
      byStatus: byStatus.reduce((acc, item) => {
        acc[item.status || 'PENDING'] = parseInt(item.count);
        return acc;
      }, {})
    };
  }

  private async getOrdersAnalysis() {
    const total = await this.planningService['dataSource'].query(`
      SELECT COUNT(*) as count FROM orders
    `);
    
    const withPriorities = await this.planningService['dataSource'].query(`
      SELECT COUNT(*) as count FROM orders WHERE priority IN (1, 2, 3)
    `);
    
    const byPriority = await this.planningService['dataSource'].query(`
      SELECT priority, COUNT(*) as count 
      FROM orders 
      WHERE priority IN (1, 2, 3)
      GROUP BY priority
      ORDER BY priority
    `);

    return {
      total: parseInt(total[0].count),
      withPriorities: parseInt(withPriorities[0].count),
      byPriority: byPriority.reduce((acc, item) => {
        acc[`priority_${item.priority}`] = parseInt(item.count);
        return acc;
      }, {})
    };
  }

  private async getRecommendations() {
    const recommendations = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏
    const availableMachines = await this.getAvailableMachinesFromDB();
    if (availableMachines.length === 0) {
      recommendations.push({
        type: 'warning',
        message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
        action: '–û—Å–≤–æ–±–æ–¥–∏—Ç–µ —Å—Ç–∞–Ω–∫–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö —Å—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–µ'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    const ordersWithPriorities = await this.planningService['dataSource'].query(`
      SELECT COUNT(*) as count FROM orders WHERE priority IN (1, 2, 3)
    `);
    
    if (parseInt(ordersWithPriorities[0].count) === 0) {
      recommendations.push({
        type: 'error',
        message: '–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ 1, 2, 3',
        action: '–î–æ–±–∞–≤—å—Ç–µ –∑–∞–∫–∞–∑—ã —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º—É'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    const operationsInProgress = await this.planningService['dataSource'].query(`
      SELECT COUNT(*) as count FROM operations WHERE status = 'IN_PROGRESS'
    `);
    
    if (parseInt(operationsInProgress[0].count) > 0) {
      recommendations.push({
        type: 'info',
        message: `${operationsInProgress[0].count} –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`,
        action: '–°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏'
      });
    }

    return recommendations;
  }

  private groupOperationsByType(operations: any[]) {
    return operations.reduce((acc, op) => {
      acc[op.operationType] = (acc[op.operationType] || 0) + 1;
      return acc;
    }, {});
  }

  private groupOperationsByPriority(operations: any[], orders: any[]) {
    return operations.reduce((acc, op) => {
      const order = orders.find(o => o.id === op.orderId);
      if (order) {
        const priority = `priority_${order.priority}`;
        acc[priority] = (acc[priority] || 0) + 1;
      }
      return acc;
    }, {});
  }

  private formatTime(minutes: number): string {
    if (!minutes || minutes <= 0) return '0 –º–∏–Ω';
    
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    
    if (hours === 0) {
      return `${remainingMinutes} –º–∏–Ω`;
    } else if (remainingMinutes === 0) {
      return `${hours} —á`;
    } else {
      return `${hours} —á ${remainingMinutes} –º–∏–Ω`;
    }
  }
}
