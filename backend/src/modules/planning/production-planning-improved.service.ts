/**
 * @file: production-planning-improved.service.ts
 * @description: –£–õ–£–ß–®–ï–ù–ù–´–ô —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–±–æ—Ç–µ
 * @dependencies: typeorm, operations, orders, machines
 * @created: 2025-06-08
 * @improvement: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —É—á–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ä–∞–±–æ—Ç–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω–∫–æ–≤
 */
import { Injectable, Logger, NotFoundException } from '@nestjs/common';
import { InjectDataSource } from '@nestjs/typeorm';
import { DataSource } from 'typeorm';

export interface OrderWithPriority {
  id: number;
  drawingNumber: string;
  priority: number;
  quantity: number;
  deadline: Date;
  workType: string;
}

export interface OperationData {
  id: number;
  orderId: number;
  operationNumber: number;
  operationType: string;
  estimatedTime: number;
  machineAxes: number;
  status?: string;
}

export interface MachineAvailability {
  id: number;
  code: string;
  type: string;
  axes: number;
  isActive: boolean;
  isOccupied: boolean;
  currentOperation?: number;
}

export interface PlanningRequest {
  selectedMachines: number[];
  excelData?: any;
}

export interface PlanningResult {
  selectedOrders: OrderWithPriority[];
  operationsQueue: {
    orderId: number;
    operationId: number;
    operationNumber: number;
    operationType: string;
    machineId: number;
    machineAxes: number;
    priority: number;
    estimatedTime: number;
    startTime?: Date;
    endTime?: Date;
  }[];
  totalTime: number;
  calculationDate: Date;
  warnings?: string[];
}

export interface OperationAvailabilityCheck {
  operation: OperationData;
  isAvailable: boolean;
  reason?: string;
  compatibleMachines: MachineAvailability[];
  availableMachines: MachineAvailability[];
}

@Injectable()
export class ProductionPlanningImprovedService {
  private readonly logger = new Logger(ProductionPlanningImprovedService.name);

  constructor(
    @InjectDataSource()
    private readonly dataSource: DataSource,
  ) {}

  /**
   * üéØ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
   */
  async planProduction(request: PlanningRequest): Promise<PlanningResult> {
    this.logger.log('üöÄ –£–õ–£–ß–®–ï–ù–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï: –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑');

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const orders = await this.getOrdersWithPriorities();
      const selectedOrders = await this.selectOrdersWithDifferentPriorities(orders);
      
      // 2. üÜï –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      const availabilityChecks = await this.getDetailedOperationAvailability(selectedOrders, request.selectedMachines);
      
      // 3. –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      const availableOperations = availabilityChecks
        .filter(check => check.isAvailable)
        .map(check => check.operation);
      
      // 4. –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
      this.logAvailabilityAnalysis(availabilityChecks);
      
      if (availableOperations.length === 0) {
        this.logger.warn('‚ùå –ù–ï–¢ –î–û–°–¢–£–ü–ù–´–• –û–ü–ï–†–ê–¶–ò–ô –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!');
        return this.createEmptyResult(selectedOrders, availabilityChecks);
      }
      
      // 5. –°—Ç—Ä–æ–∏–º –ø–ª–∞–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      const operationsQueue = await this.buildSmartQueue(availableOperations, selectedOrders, request.selectedMachines);
      
      // 6. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
      const result = this.calculateTimelines(operationsQueue, selectedOrders);
      
      // 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      await this.saveResults(result);
      
      this.logger.log('‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï: –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return result;
      
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      throw error;
    }
  }

  /**
   * üÜï –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–û–°–¢–£–ü–ù–û–°–¢–ò –û–ü–ï–†–ê–¶–ò–ô
   */
  private async getDetailedOperationAvailability(
    orders: OrderWithPriority[], 
    selectedMachineIds: number[]
  ): Promise<OperationAvailabilityCheck[]> {
    this.logger.log('üîç –ê–ù–ê–õ–ò–ó –î–û–°–¢–£–ü–ù–û–°–¢–ò: –ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π');
    
    const checks: OperationAvailabilityCheck[] = [];
    
    for (const order of orders) {
      this.logger.log(`\nüìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ ID:${order.id} (${order.drawingNumber})`);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
      const allOperations = await this.getAllOperationsForOrder(order.id);
      
      // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const nextOperation = await this.findNextAvailableOperation(allOperations);
      
      if (nextOperation) {
        this.logger.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç-–æ–ø–µ—Ä–∞—Ü–∏—è: ${nextOperation.operationNumber} (${nextOperation.operationType})`);
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        const availabilityCheck = await this.checkOperationAvailability(nextOperation, selectedMachineIds);
        checks.push(availabilityCheck);
        
        this.logger.log(`${availabilityCheck.isAvailable ? '‚úÖ' : '‚ùå'} –û–ø–µ—Ä–∞—Ü–∏—è ${nextOperation.operationNumber}: ${availabilityCheck.reason || '–¥–æ—Å—Ç—É–ø–Ω–∞'}`);
      } else {
        this.logger.warn(`‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.drawingNumber}`);
      }
    }
    
    return checks;
  }

  /**
   * üÜï –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –ö–û–ù–ö–†–ï–¢–ù–û–ô –û–ü–ï–†–ê–¶–ò–ò
   */
  private async checkOperationAvailability(
    operation: OperationData, 
    selectedMachineIds: number[]
  ): Promise<OperationAvailabilityCheck> {
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (operation.status === 'IN_PROGRESS') {
      return {
        operation,
        isAvailable: false,
        reason: '–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
        compatibleMachines: [],
        availableMachines: []
      };
    }
    
    if (operation.status === 'COMPLETED') {
      return {
        operation,
        isAvailable: false,
        reason: '–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        compatibleMachines: [],
        availableMachines: []
      };
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞ –∫–∞–∫–æ–º-—Ç–æ —Å—Ç–∞–Ω–∫–µ
    const isInProgress = await this.isOperationCurrentlyInProgress(operation.id);
    if (isInProgress) {
      return {
        operation,
        isAvailable: false,
        reason: '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–º —Å—Ç–∞–Ω–∫–µ',
        compatibleMachines: [],
        availableMachines: []
      };
    }
    
    // 3. –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å—Ç–∞–Ω–∫–∏
    const compatibleMachines = await this.getCompatibleMachines(operation, selectedMachineIds);
    
    if (compatibleMachines.length === 0) {
      return {
        operation,
        isAvailable: false,
        reason: `–ù–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.operationType}`,
        compatibleMachines: [],
        availableMachines: []
      };
    }
    
    // 4. –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏
    const availableMachines = compatibleMachines.filter(machine => !machine.isOccupied);
    
    if (availableMachines.length === 0) {
      return {
        operation,
        isAvailable: false,
        reason: `–í—Å–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å—Ç–∞–Ω–∫–∏ –∑–∞–Ω—è—Ç—ã (${compatibleMachines.length} —Å—Ç–∞–Ω–∫–æ–≤)`,
        compatibleMachines,
        availableMachines: []
      };
    }
    
    // 5. –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞!
    return {
      operation,
      isAvailable: true,
      reason: `–î–æ—Å—Ç—É–ø–Ω–æ ${availableMachines.length} —Å—Ç–∞–Ω–∫–æ–≤`,
      compatibleMachines,
      availableMachines
    };
  }

  /**
   * üÜï –ü–û–õ–£–ß–ï–ù–ò–ï –°–û–í–ú–ï–°–¢–ò–ú–´–• –°–¢–ê–ù–ö–û–í –î–õ–Ø –û–ü–ï–†–ê–¶–ò–ò
   */
  private async getCompatibleMachines(
    operation: OperationData, 
    selectedMachineIds: number[]
  ): Promise<MachineAvailability[]> {
    
    let query = `
      SELECT 
        id, code, type, axes, "isActive", "isOccupied", "currentOperation"
      FROM machines 
      WHERE "isActive" = true
    `;
    
    let params = [];
    
    if (selectedMachineIds && selectedMachineIds.length > 0) {
      query += ' AND id = ANY($1)';
      params = [selectedMachineIds];
    }
    
    const allMachines = await this.dataSource.query(query, params);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ–ø–µ—Ä–∞—Ü–∏–µ–π
    const compatibleMachines = allMachines.filter(machine => {
      return this.isOperationCompatibleWithMachine(operation, machine);
    });
    
    return compatibleMachines;
  }

  /**
   * üÜï –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –û–ü–ï–†–ê–¶–ò–ò –ò –°–¢–ê–ù–ö–ê (–¢–û–õ–¨–ö–û 3 –¢–ò–ü–ê)
   */
  private isOperationCompatibleWithMachine(operation: OperationData, machine: MachineAvailability): boolean {
    const opType = operation.operationType?.toUpperCase();
    const machineType = machine.type?.toUpperCase();
    
    switch (opType) {
      case 'TURNING':
        // –¢–æ–ª—å–∫–æ —Ç–æ–∫–∞—Ä–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ (Okuma, JohnFord)
        return machineType === 'TURNING';
        
      case 'MILLING':
        if (operation.machineAxes === 4) {
          // 4-–æ—Å–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ 4+ –æ—Å–µ–≤—ã—Ö —Ñ—Ä–µ–∑–µ—Ä–Ω—ã—Ö —Å—Ç–∞–Ω–∫–∞—Ö
          return machineType === 'MILLING' && machine.axes >= 4;
        } else {
          // 3-–æ—Å–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –ª—é–±—ã—Ö —Ñ—Ä–µ–∑–µ—Ä–Ω—ã—Ö —Å—Ç–∞–Ω–∫–∞—Ö (3 –∏–ª–∏ 4+ –æ—Å–∏)
          return machineType === 'MILLING';
        }
        
      default:
        this.logger.warn(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ${opType}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ: TURNING, MILLING (3-–æ—Å–µ–≤–∞—è), MILLING (4-–æ—Å–µ–≤–∞—è)`);
        return false;
    }
  }

  /**
   * üÜï –ü–†–û–í–ï–†–ö–ê, –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø –õ–ò –û–ü–ï–†–ê–¶–ò–Ø –í –î–ê–ù–ù–´–ô –ú–û–ú–ï–ù–¢
   */
  private async isOperationCurrentlyInProgress(operationId: number): Promise<boolean> {
    const result = await this.dataSource.query(`
      SELECT COUNT(*) as count 
      FROM machines 
      WHERE "currentOperation" = $1 AND "isOccupied" = true
    `, [operationId]);
    
    return parseInt(result[0].count) > 0;
  }

  /**
   * üÜï –ü–û–ò–°–ö –°–õ–ï–î–£–Æ–©–ï–ô –î–û–°–¢–£–ü–ù–û–ô –û–ü–ï–†–ê–¶–ò–ò –î–õ–Ø –ó–ê–ö–ê–ó–ê (–ò–°–ü–†–ê–í–õ–ï–ù–û)
   */
  private async findNextAvailableOperation(operations: OperationData[]): Promise<OperationData | null> {
    if (!operations || operations.length === 0) {
      return null;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É
    const sortedOperations = operations.sort((a, b) => a.operationNumber - b.operationNumber);
    
    for (const operation of sortedOperations) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (operation.status === 'COMPLETED') {
        continue;
      }
      
      // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–Ω–æ–º–µ—Ä 1), –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
      if (operation.operationNumber === 1) {
        return operation;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
      const prevOperation = sortedOperations.find(op => op.operationNumber === operation.operationNumber - 1);
      
      // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –≤–æ–æ–±—â–µ, —Ç–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
      if (!prevOperation) {
        this.logger.log(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è ${operation.operationNumber} –¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.operationNumber - 1})`);
        return operation;
      }
      
      // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–µ–∫—É—â–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞
      if (prevOperation.status === 'COMPLETED') {
        return operation;
      }
      
      // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
      if (prevOperation.status !== 'COMPLETED') {
        this.logger.log(`‚ùå –û–ø–µ—Ä–∞—Ü–∏—è ${operation.operationNumber} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–æ–ø–µ—Ä–∞—Ü–∏—è ${prevOperation.operationNumber} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${prevOperation.status})`);
        break; // –î–∞–ª—å—à–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ—Ç —Å–º—ã—Å–ª–∞
      }
    }
    
    return null;
  }

  /**
   * üÜï –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –û–ü–ï–†–ê–¶–ò–ô –î–õ–Ø –ó–ê–ö–ê–ó–ê
   */
  private async getAllOperationsForOrder(orderId: number): Promise<OperationData[]> {
    const operations = await this.dataSource.query(`
      SELECT 
        id,
        "orderId",
        "operationNumber",
        operationtype as "operationType",
        "estimatedTime",
        machineaxes as "machineAxes",
        status,
        "assignedMachine",
        "assignedAt"
      FROM operations 
      WHERE "orderId" = $1
      ORDER BY "operationNumber" ASC
    `, [orderId]);
    
    return operations;
  }

  /**
   * üÜï –£–ú–ù–û–ï –ü–û–°–¢–†–û–ï–ù–ò–ï –û–ß–ï–†–ï–î–ò
   */
  private async buildSmartQueue(
    operations: OperationData[], 
    orders: OrderWithPriority[], 
    selectedMachineIds: number[]
  ) {
    this.logger.log('üèóÔ∏è –°—Ç—Ä–æ–∏–º —É–º–Ω—É—é –æ—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–π');
    
    const queue = [];
    
    for (const operation of operations) {
      const order = orders.find(o => o.id === operation.orderId);
      if (!order) continue;
      
      // –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
      const bestMachine = await this.findBestMachineForOperation(operation, selectedMachineIds);
      
      if (bestMachine) {
        queue.push({
          orderId: operation.orderId,
          operationId: operation.id,
          operationNumber: operation.operationNumber,
          operationType: operation.operationType,
          machineId: bestMachine.id,
          machineAxes: operation.machineAxes,
          priority: order.priority,
          estimatedTime: operation.estimatedTime
        });
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    queue.sort((a, b) => a.priority - b.priority);
    
    this.logger.log(`‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å –∏–∑ ${queue.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
    return queue;
  }

  /**
   * üÜï –ü–û–ò–°–ö –õ–£–ß–®–ï–ì–û –°–¢–ê–ù–ö–ê –î–õ–Ø –û–ü–ï–†–ê–¶–ò–ò
   */
  private async findBestMachineForOperation(
    operation: OperationData, 
    selectedMachineIds: number[]
  ): Promise<MachineAvailability | null> {
    
    const compatibleMachines = await this.getCompatibleMachines(operation, selectedMachineIds);
    const availableMachines = compatibleMachines.filter(m => !m.isOccupied);
    
    if (availableMachines.length === 0) {
      return null;
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    // –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å: –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ, –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç.–¥.
    return availableMachines[0];
  }

  /**
   * üÜï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ê–ù–ê–õ–ò–ó–ê
   */
  private logAvailabilityAnalysis(checks: OperationAvailabilityCheck[]) {
    this.logger.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò:');
    this.logger.log('='.repeat(60));
    
    const available = checks.filter(c => c.isAvailable);
    const unavailable = checks.filter(c => !c.isAvailable);
    
    this.logger.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${available.length}`);
    this.logger.log(`‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${unavailable.length}`);
    
    if (available.length > 0) {
      this.logger.log('\nüéØ –î–û–°–¢–£–ü–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò:');
      available.forEach(check => {
        this.logger.log(`  - –û–ø–µ—Ä–∞—Ü–∏—è ${check.operation.operationNumber} (${check.operation.operationType}): ${check.reason}`);
      });
    }
    
    if (unavailable.length > 0) {
      this.logger.log('\n‚ö†Ô∏è –ù–ï–î–û–°–¢–£–ü–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò:');
      unavailable.forEach(check => {
        this.logger.log(`  - –û–ø–µ—Ä–∞—Ü–∏—è ${check.operation.operationNumber} (${check.operation.operationType}): ${check.reason}`);
      });
    }
    
    this.logger.log('='.repeat(60));
  }

  /**
   * üÜï –°–û–ó–î–ê–ù–ò–ï –ü–£–°–¢–û–ì–û –†–ï–ó–£–õ–¨–¢–ê–¢–ê –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò
   */
  private createEmptyResult(orders: OrderWithPriority[], checks: OperationAvailabilityCheck[]): PlanningResult {
    const warnings = [
      '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
      ...checks.filter(c => !c.isAvailable).map(c => `${c.operation.operationType} ${c.operation.operationNumber}: ${c.reason}`)
    ];
    
    return {
      selectedOrders: orders,
      operationsQueue: [],
      totalTime: 0,
      calculationDate: new Date(),
      warnings
    };
  }

  // ==========================================
  // –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  // ==========================================

  private async getOrdersWithPriorities(): Promise<OrderWithPriority[]> {
    this.logger.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏');
    
    const orders = await this.dataSource.query(`
      SELECT 
        id,
        drawing_number as "drawingNumber",
        priority,
        quantity,
        deadline,
        "workType"
      FROM orders 
      WHERE priority IN (1, 2, 3)
      ORDER BY priority ASC, deadline ASC
    `);

    this.logger.log(`–ù–∞–π–¥–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏`);
    return orders;
  }

  private async selectOrdersWithDifferentPriorities(orders: OrderWithPriority[]): Promise<OrderWithPriority[]> {
    this.logger.log('üéØ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–±–æ—Ä –í–°–ï–• –∑–∞–∫–∞–∑–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    // üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –±–µ—Ä–µ–º –í–°–ï –∑–∞–∫–∞–∑—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const selectedOrders = orders.filter(order => order.priority >= 1 && order.priority <= 3);
    
    if (selectedOrders.length === 0) {
      throw new NotFoundException('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ 1, 2 –∏–ª–∏ 3');
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –¥–µ–¥–ª–∞–π–Ω—É –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    selectedOrders.sort((a, b) => {
      if (a.priority !== b.priority) {
        return a.priority - b.priority; // –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      }
      return new Date(a.deadline).getTime() - new Date(b.deadline).getTime(); // –ü–æ –¥–µ–¥–ª–∞–π–Ω—É
    });
    
    const priorityStats = selectedOrders.reduce((stats, order) => {
      stats[order.priority] = (stats[order.priority] || 0) + 1;
      return stats;
    }, {} as Record<number, number>);
    
    this.logger.log(`–í—ã–±—Ä–∞–Ω–æ ${selectedOrders.length} –∑–∞–∫–∞–∑–æ–≤:`);
    this.logger.log(`  - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: ${priorityStats[1] || 0} –∑–∞–∫–∞–∑–æ–≤`);
    this.logger.log(`  - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: ${priorityStats[2] || 0} –∑–∞–∫–∞–∑–æ–≤`);
    this.logger.log(`  - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: ${priorityStats[3] || 0} –∑–∞–∫–∞–∑–æ–≤`);
    
    return selectedOrders;
  }

  private calculateTimelines(queue: any[], orders: OrderWithPriority[]): PlanningResult {
    this.logger.log('‚è±Ô∏è –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫');
    
    let currentTime = new Date();
    let totalTime = 0;
    
    const operationsQueue = queue.map(queueItem => {
      const startTime = new Date(currentTime);
      const endTime = new Date(currentTime.getTime() + queueItem.estimatedTime * 60000);
      
      totalTime += queueItem.estimatedTime;
      currentTime = endTime;
      
      return {
        ...queueItem,
        startTime,
        endTime
      };
    });

    return {
      selectedOrders: orders,
      operationsQueue,
      totalTime,
      calculationDate: new Date()
    };
  }

  private async saveResults(result: PlanningResult): Promise<void> {
    this.logger.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    try {
      await this.dataSource.query(`
        INSERT INTO planning_results (
          calculation_date,
          selected_orders,
          selected_machines,
          queue_plan,
          total_time
        ) VALUES ($1, $2, $3, $4, $5)
      `, [
        result.calculationDate,
        JSON.stringify(result.selectedOrders),
        JSON.stringify(result.operationsQueue.map(op => op.machineId)),
        JSON.stringify(result.operationsQueue),
        result.totalTime
      ]);

      this.logger.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      throw error;
    }
  }
}
