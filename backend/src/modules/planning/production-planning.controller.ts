/**
 * @file: production-planning.controller.ts
 * @description: API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
 * @dependencies: production-planning.service
 * @created: 2025-05-28
 */
import {
  Controller,
  Post,
  Get,
  Body,
  Query,
  Param,
  Logger,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';
import { ProductionPlanningService, PlanningRequest, PlanningResult } from './production-planning.service';
import { SynchronizationService } from '../synchronization/synchronization.service';

@ApiTags('production-planning')
@Controller('planning')
export class ProductionPlanningController {
  private readonly logger = new Logger(ProductionPlanningController.name);

  constructor(
    private readonly planningService: ProductionPlanningService,
    private readonly syncService: SynchronizationService, // üÜï –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  ) {}

  @Post('plan')
  @ApiOperation({ 
    summary: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
    description: '–†–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è 3 –∑–∞–∫–∞–∑–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏'
  })
  @ApiResponse({ status: 200, description: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' })
  @ApiResponse({ status: 400, description: '–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞' })
  async planProduction(@Body() request: PlanningRequest): Promise<PlanningResult> {
    try {
      this.logger.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞');
      this.logger.log(`–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏: ${request.selectedMachines.join(', ')}`);
      
      const result = await this.planningService.planProduction(request);
      
      this.logger.log('–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return result;
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      throw error;
    }
  }

  @Get('results/latest')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—á–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞'
  })
  async getLatestResults() {
    try {
      this.logger.log('–ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      
      const results = await this.planningService.getLatestPlanningResults();
      
      if (!results) {
        return {
          message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
          hasResults: false
        };
      }
      
      return {
        hasResults: true,
        data: {
          id: results.id,
          calculationDate: results.calculation_date,
          selectedOrders: results.selected_orders,
          selectedMachines: results.selected_machines,
          queuePlan: results.queue_plan,
          totalTime: results.total_time,
          totalTimeFormatted: this.formatTime(results.total_time)
        }
      };
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      throw error;
    }
  }

  @Get('progress')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–π',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤'
  })
  async getOperationProgress(@Query('orderIds') orderIds?: string) {
    try {
      this.logger.log('–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–π');
      
      let orderIdArray: number[] | undefined;
      if (orderIds) {
        orderIdArray = orderIds.split(',').map(id => parseInt(id.trim(), 10)).filter(id => !isNaN(id));
      }
      
      const progress = await this.planningService.getOperationProgress(orderIdArray);
      
      return {
        count: progress.length,
        data: progress.map(p => ({
          id: p.id,
          orderId: p.order_id,
          calculationDate: p.calculation_date,
          deadline: p.deadline,
          quantity: p.quantity,
          totalProductionTime: p.total_production_time,
          totalProductionTimeFormatted: this.formatTime(p.total_production_time),
          operations: p.operations
        }))
      };
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
      throw error;
    }
  }

  @Post('demo')
  @ApiOperation({ 
    summary: '–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ç–∞–Ω–∫–∞–º–∏',
    description: '–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ –∏–∑ –ë–î'
  })
  async demoPlanning() {
    try {
      this.logger.log('–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ç–∞–Ω–∫–∞–º–∏');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ –∏–∑ –ë–î
      const availableMachines = await this.planningService['getAvailableMachines']([]);
      const machineIds = availableMachines.map(m => m.id);
      
      if (machineIds.length === 0) {
        return {
          success: false,
          error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
          suggestion: '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ –ë–î –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ (isActive=true, isOccupied=false)'
        };
      }
      
      this.logger.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º ${machineIds.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤: ${machineIds.join(', ')}`);
      
      const planningRequest: PlanningRequest = {
        selectedMachines: machineIds
      };
      
      const result = await this.planningService.planProduction(planningRequest);
      
      return {
        success: true,
        message: `–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å ${machineIds.length} —Å—Ç–∞–Ω–∫–∞–º–∏`,
        result: {
          selectedOrdersCount: result.selectedOrders.length,
          operationsQueueLength: result.operationsQueue.length,
          totalTime: result.totalTime,
          totalTimeFormatted: this.formatTime(result.totalTime),
          calculationDate: result.calculationDate,
          details: result
        }
      };
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
        message: error.message,
        suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤ –ë–î –µ—Å—Ç—å –∑–∞–∫–∞–∑—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ 1, 2, 3 –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'
      };
    }
  }

  /**
   * üÜï –£–õ–£–ß–®–ï–ù–ù–û–ï –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
   */
  @Post('assign-operation')
  @ApiOperation({ 
    summary: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ —Å—Ç–∞–Ω–æ–∫ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π',
    description: '–ù–∞–∑–Ω–∞—á–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ —Å—Ç–∞–Ω–æ–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å —Å–º–µ–Ω—ã'
  })
  async assignOperation(@Body() request: { operationId: number; machineId: number; }) {
    try {
      this.logger.log(`üîó –ù–û–í–û–ï –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${request.operationId} –Ω–∞ —Å—Ç–∞–Ω–æ–∫ ${request.machineId} —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π`);
      
      if (!request.operationId || !request.machineId) {
        return {
          success: false,
          error: 'operationId –∏ machineId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
        };
      }

      // üÜï –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const syncResult = await this.syncService.assignOperationWithSync(
        request.operationId,
        request.machineId
      );

      this.logger.log(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:`);
      this.logger.log(`   - –û–ø–µ—Ä–∞—Ü–∏—è ID: ${request.operationId}`);
      this.logger.log(`   - –°—Ç–∞–Ω–æ–∫ ID: ${request.machineId}`);
      this.logger.log(`   - –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:`, syncResult);
      
      return {
        success: true,
        message: `–û–ø–µ—Ä–∞—Ü–∏—è ${request.operationId} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`,
        data: {
          operationId: request.operationId,
          machineId: request.machineId,
          assignedAt: new Date(),
          syncedWithShifts: true, // üÜï –ù–æ–≤—ã–π —Ñ–ª–∞–≥
          synchronizationStatus: syncResult
        }
      };
      
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏',
        message: error.message
      };
    }
  }

  /**
   * üÜï –ù–û–í–´–ô –º–µ—Ç–æ–¥: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  @Get('sync-status/:operationId')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏–µ–π –∏ —Å–º–µ–Ω–∞–º–∏'
  })
  async getSyncStatus(@Param('operationId') operationId: string) {
    try {
      const status = await this.syncService.getSynchronizationStatus(Number(operationId));
      
      return {
        success: true,
        operationId: Number(operationId),
        status,
        timestamp: new Date()
      };
      
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}:`, error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –£–°–¢–ê–†–ï–í–®–ò–ô –º–µ—Ç–æ–¥ - –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   */
  @Post('assign-operation-legacy')
  @ApiOperation({ 
    summary: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ —Å—Ç–∞–Ω–æ–∫ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)',
    description: '–£–°–¢–ê–†–ï–õ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ assign-operation –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'
  })
  async assignOperationLegacy(@Body() request: { operationId: number; machineId: number; }) {
    try {
      this.logger.log(`‚ö†Ô∏è –£–°–¢–ê–†–ï–í–®–ò–ô –º–µ—Ç–æ–¥: –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${request.operationId} –Ω–∞ —Å—Ç–∞–Ω–æ–∫ ${request.machineId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const operation = await this.planningService['dataSource'].query(
        'SELECT * FROM operations WHERE id = $1',
        [request.operationId]
      );
      
      if (!operation || operation.length === 0) {
        return {
          success: false,
          error: '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞–Ω–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω
      const machine = await this.planningService['dataSource'].query(
        'SELECT * FROM machines WHERE id = $1 AND "isActive" = true AND "isOccupied" = false',
        [request.machineId]
      );
      
      if (!machine || machine.length === 0) {
        return {
          success: false,
          error: '–°—Ç–∞–Ω–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–Ω—è—Ç'
        };
      }
      
      const machineName = machine[0].code; // –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ –∏–∑ –ø–æ–ª—è code
      
      // 1. –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –º–∞—à–∏–Ω
      await this.planningService['dataSource'].query(
        'UPDATE machines SET "isOccupied" = true, "currentOperation" = $1, "assignedAt" = NOW() WHERE id = $2',
        [request.operationId, request.machineId]
      );
      
      // 2. –û—Ç–º–µ—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∫–∞–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é
      await this.planningService['dataSource'].query(
        'UPDATE operations SET "assignedMachine" = $1, "assignedAt" = NOW(), status = \'ASSIGNED\' WHERE id = $2',
        [request.machineId, request.operationId]
      );
      
      return {
        success: true,
        message: `–û–ø–µ—Ä–∞—Ü–∏—è ${operation[0].operationNumber || request.operationId} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω–æ–∫ ${machineName} (–ë–ï–ó —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)`,
        warning: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ —Å–º–µ–Ω–∞–º–∏',
        data: {
          operationId: request.operationId,
          machineId: request.machineId,
          machineName: machineName,
          assignedAt: new Date(),
          syncedWithShifts: false
        }
      };
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥):', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏',
        message: error.message
      };
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å—Ç–∞–Ω–∫–∞ –ø–æ –∫–æ–¥—É
   */
  private getMachineTypeFromCode(machineCode: string): string {
    if (machineCode.startsWith('F')) {
      return 'milling-4axis'; // –§—Ä–µ–∑–µ—Ä–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏
    } else if (machineCode.startsWith('T')) {
      return 'turning'; // –¢–æ–∫–∞—Ä–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏
    } else {
      return 'milling-3axis'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  }
  private formatTime(minutes: number): string {
    if (!minutes || minutes <= 0) return '0 –º–∏–Ω';
    
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    
    if (hours === 0) {
      return `${remainingMinutes} –º–∏–Ω`;
    } else if (remainingMinutes === 0) {
      return `${hours} —á`;
    } else {
      return `${hours} —á ${remainingMinutes} –º–∏–Ω`;
    }
  }
}
