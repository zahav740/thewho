/**
 * @file: production-planning.service.ts
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (–ò–°–ü–†–ê–í–õ–ï–ù - —É—á–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–π)
 * @dependencies: typeorm, operations, orders, machines
 * @created: 2025-05-28
 * @fixed: 2025-06-07 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º –∏—Ö —Å—Ç–∞—Ç—É—Å–∞
 */
import { Injectable, Logger, NotFoundException } from '@nestjs/common';
import { InjectDataSource } from '@nestjs/typeorm';
import { DataSource } from 'typeorm';

export interface OrderWithPriority {
  id: number;
  drawingNumber: string;
  priority: number;
  quantity: number;
  deadline: Date;
  workType: string;
}

export interface OperationData {
  id: number;
  orderId: number;
  operationNumber: number;
  operationType: string; // 3-axis, 4-axis, turning
  estimatedTime: number;
  machineAxes: number;
  status?: string; // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
}

export interface MachineAvailability {
  id: number;
  code: string;
  type: string;
  axes: number;
  isActive: boolean;
  isOccupied: boolean;
}

export interface PlanningRequest {
  selectedMachines: number[]; // ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤
  excelData?: any; // –î–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞
}

export interface PlanningResult {
  selectedOrders: OrderWithPriority[];
  operationsQueue: {
    orderId: number;
    operationId: number;
    machineId: number;
    priority: number;
    estimatedTime: number;
    startTime?: Date;
    endTime?: Date;
  }[];
  totalTime: number;
  calculationDate: Date;
}

@Injectable()
export class ProductionPlanningService {
  private readonly logger = new Logger(ProductionPlanningService.name);

  constructor(
    @InjectDataSource()
    private readonly dataSource: DataSource,
  ) {}

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  async planProduction(request: PlanningRequest): Promise<PlanningResult> {
    this.logger.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞');

    try {
      // 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      const orders = await this.getOrdersWithPriorities();
      const machines = await this.getAvailableMachines(request.selectedMachines);
      
      // 2. –í—ã–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ (–¥–æ 3)
      const selectedOrders = await this.selectOrdersWithDifferentPriorities(orders);
      
      // 3. –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ (—Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞)
      const operations = await this.getAvailableOperationsForOrders(selectedOrders);
      
      // 4. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ —Å—Ç–∞–Ω–∫–∞–º–∏
      const machineMatching = this.matchOperationsWithMachines(operations, machines);
      
      // 5. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
      const queue = this.buildPriorityQueue(machineMatching, selectedOrders);
      
      // 6. –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫
      const result = this.calculateTimelines(queue, selectedOrders);
      
      // 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await this.saveResults(result);
      
      this.logger.log('–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return result;
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏–∑ –ë–î
   */
  private async getOrdersWithPriorities(): Promise<OrderWithPriority[]> {
    this.logger.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏');
    
    const orders = await this.dataSource.query(`
      SELECT 
        id,
        drawing_number as "drawingNumber",
        priority,
        quantity,
        deadline,
        "workType"
      FROM orders 
      WHERE priority IN (1, 2, 3)
      ORDER BY priority ASC, deadline ASC
    `);

    this.logger.log(`–ù–∞–π–¥–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏`);
    return orders;
  }

  /**
   * –í—ã–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ (–¥–æ 3, –Ω–æ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ - —Ç–æ —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å)
   */
  private async selectOrdersWithDifferentPriorities(orders: OrderWithPriority[]): Promise<OrderWithPriority[]> {
    this.logger.log('–í—ã–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏');
    
    const selectedOrders: OrderWithPriority[] = [];
    
    // –í—ã–±–∏—Ä–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–∫–∞–∑—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (1, 2, 3)
    for (let priority = 1; priority <= 3; priority++) {
      const orderWithPriority = orders.find(order => order.priority === priority);
      if (orderWithPriority) {
        selectedOrders.push(orderWithPriority);
      }
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ –Ω–µ—Ç 3 –∑–∞–∫–∞–∑–æ–≤, —Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ç–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º, –∫–æ—Ç–æ—Ä–æ–µ –µ—Å—Ç—å
    if (selectedOrders.length === 0) {
      throw new NotFoundException('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ 1, 2 –∏–ª–∏ 3');
    }
    
    this.logger.log(`–í—ã–±—Ä–∞–Ω–æ ${selectedOrders.length} –∑–∞–∫–∞–∑–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏: ${selectedOrders.map(o => o.priority).join(', ')}`);
    return selectedOrders;
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞
   */
  private async getAvailableOperationsForOrders(orders: OrderWithPriority[]): Promise<OperationData[]> {
    this.logger.log('=== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ ===');
    
    const orderIds = orders.map(o => o.id);
    const availableOperations: OperationData[] = [];
    
    for (const order of orders) {
      this.logger.log(`\n--- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ ID:${order.id} (${order.drawingNumber}) ---`);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä—É
      const allOperations = await this.dataSource.query(`
        SELECT 
          id,
          "orderId",
          "operationNumber",
          operationtype as "operationType",
          "estimatedTime",
          machineaxes as "machineAxes",
          status,
          "assignedMachine",
          "assignedAt"
        FROM operations 
        WHERE "orderId" = $1
        ORDER BY "operationNumber" ASC
      `, [order.id]);

      this.logger.log(`–ù–∞–π–¥–µ–Ω–æ ${allOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –Ω–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
      let nextOperation = null;
      
      for (const operation of allOperations) {
        this.logger.log(`–û–ø–µ—Ä–∞—Ü–∏—è ${operation.operationNumber}: —Å—Ç–∞—Ç—É—Å="${operation.status}", –Ω–∞–∑–Ω–∞—á–µ–Ω–∞=${operation.assignedMachine}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞ –∫–∞–∫–æ–º-—Ç–æ —Å—Ç–∞–Ω–∫–µ
        const isInProgress = await this.isOperationInProgress(operation.id);
        
        if (isInProgress) {
          this.logger.log(`  ‚ùå –û–ø–µ—Ä–∞—Ü–∏—è ${operation.operationNumber} —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —Å—Ç–∞–Ω–∫–µ`);
          continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è—Ç–∞
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (operation.status === 'COMPLETED') {
          this.logger.log(`  ‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è ${operation.operationNumber} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π`);
          continue; // –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏—â–µ–º —Å–ª–µ–¥—É—é—â—É—é
        }
        
        if (operation.status === 'IN_PROGRESS') {
          this.logger.log(`  ‚è≥ –û–ø–µ—Ä–∞—Ü–∏—è ${operation.operationNumber} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue; // –û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        }
        
        // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING –∏–ª–∏ null, —Ç–æ —ç—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç
        if (!operation.status || operation.status === 'PENDING') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è)
          if (operation.operationNumber === 1) {
            this.logger.log(`  üéØ –ü–µ—Ä–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è ${operation.operationNumber} –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è`);
            nextOperation = operation;
            break;
          } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
            const prevOperation = allOperations.find(op => op.operationNumber === operation.operationNumber - 1);
            if (prevOperation && prevOperation.status === 'COMPLETED') {
              this.logger.log(`  üéØ –û–ø–µ—Ä–∞—Ü–∏—è ${operation.operationNumber} –¥–æ—Å—Ç—É–ø–Ω–∞ (–ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞)`);
              nextOperation = operation;
              break;
            } else {
              this.logger.log(`  ‚è∏Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è ${operation.operationNumber} –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π`);
            }
          }
        }
      }
      
      if (nextOperation) {
        this.logger.log(`‚úÖ –î–ª—è –∑–∞–∫–∞–∑–∞ ${order.drawingNumber} –≤—ã–±—Ä–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è ${nextOperation.operationNumber}`);
        availableOperations.push({
          id: nextOperation.id,
          orderId: nextOperation.orderId,
          operationNumber: nextOperation.operationNumber,
          operationType: nextOperation.operationType,
          estimatedTime: nextOperation.estimatedTime,
          machineAxes: nextOperation.machineAxes,
          status: nextOperation.status
        });
      } else {
        this.logger.warn(`‚ùå –î–ª—è –∑–∞–∫–∞–∑–∞ ${order.drawingNumber} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π`);
      }
    }

    this.logger.log(`\n=== –ò–¢–û–ì–û: –ù–∞–π–¥–µ–Ω–æ ${availableOperations.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π ===`);
    availableOperations.forEach(op => {
      this.logger.log(`- –ó–∞–∫–∞–∑ ${op.orderId}, –û–ø–µ—Ä–∞—Ü–∏—è ${op.operationNumber} (${op.operationType})`);
    });
    
    return availableOperations;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞ –∫–∞–∫–æ–º-—Ç–æ —Å—Ç–∞–Ω–∫–µ
   */
  private async isOperationInProgress(operationId: number): Promise<boolean> {
    const result = await this.dataSource.query(`
      SELECT COUNT(*) as count 
      FROM machines 
      WHERE "currentOperation" = $1 AND "isOccupied" = true
    `, [operationId]);
    
    return parseInt(result[0].count) > 0;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏
   */
  private async getAvailableMachines(selectedMachineIds: number[]): Promise<MachineAvailability[]> {
    this.logger.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤');
    
    let query = `
      SELECT 
        id,
        code,
        type,
        axes,
        "isActive",
        "isOccupied"
      FROM machines 
      WHERE "isActive" = true AND "isOccupied" = false
    `;
    
    let params = [];
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∏–º
    if (selectedMachineIds && selectedMachineIds.length > 0) {
      query += ' AND id = ANY($1)';
      params = [selectedMachineIds];
    }
    
    const machines = await this.dataSource.query(query, params);

    this.logger.log(`–ù–∞–π–¥–µ–Ω–æ ${machines.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏
    machines.forEach(machine => {
      this.logger.log(`–°—Ç–∞–Ω–æ–∫ ID:${machine.id}, –ö–æ–¥:${machine.code}, –¢–∏–ø:${machine.type}, –û—Å–∏:${machine.axes}`);
    });
    
    return machines;
  }

  /**
   * –°–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç–∞–Ω–∫–∞–º–∏ –ø–æ —Ç–∏–ø—É
   */
  private matchOperationsWithMachines(operations: OperationData[], machines: MachineAvailability[]) {
    this.logger.log('=== –ù–ê–ß–ê–õ–û –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø –û–ü–ï–†–ê–¶–ò–ô –°–û –°–¢–ê–ù–ö–ê–ú–ò ===');
    this.logger.log(`–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations.length}`);
    this.logger.log(`–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤: ${machines.length}`);
    
    const matching = [];
    
    for (const operation of operations) {
      this.logger.log(`\n--- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é ID:${operation.id} ---`);
      this.logger.log(`–¢–∏–ø: ${operation.operationType}, –û—Å–∏: ${operation.machineAxes}, –ó–∞–∫–∞–∑: ${operation.orderId}`);
      
      const compatibleMachines = machines.filter(machine => {
        this.logger.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–æ–∫ ${machine.code} (${machine.type}, ${machine.axes} –æ—Å–µ–π)`);
        
        let isCompatible = false;
        
        // –õ–æ–≥–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–¢–û–õ–¨–ö–û 3 –¢–ò–ü–ê –û–ü–ï–†–ê–¶–ò–ô)
        if (operation.operationType === 'TURNING') {
          // –¢–æ–ª—å–∫–æ —Ç–æ–∫–∞—Ä–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ (Okuma, JohnFord)
          isCompatible = machine.type === 'TURNING';
          this.logger.log(`TURNING –æ–ø–µ—Ä–∞—Ü–∏—è: —Å–æ–≤–º–µ—Å—Ç–∏–º = ${isCompatible}`);
        } else if (operation.operationType === 'MILLING') {
          // –î–ª—è —Ñ—Ä–µ–∑–µ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
          if (operation.machineAxes === 4) {
            // 4-–æ—Å–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ 4+ –æ—Å–µ–≤—ã—Ö —Ñ—Ä–µ–∑–µ—Ä–Ω—ã—Ö —Å—Ç–∞–Ω–∫–∞—Ö
            isCompatible = machine.type === 'MILLING' && machine.axes >= 4;
            this.logger.log(`MILLING 4-–æ—Å–µ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: —Å–æ–≤–º–µ—Å—Ç–∏–º = ${isCompatible}`);
          } else {
            // 3-–æ—Å–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –ª—é–±—ã—Ö —Ñ—Ä–µ–∑–µ—Ä–Ω—ã—Ö —Å—Ç–∞–Ω–∫–∞—Ö (3 –∏–ª–∏ 4+ –æ—Å–∏)
            isCompatible = machine.type === 'MILLING';
            this.logger.log(`MILLING 3-–æ—Å–µ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: —Å–æ–≤–º–µ—Å—Ç–∏–º = ${isCompatible}`);
          }
        } else {
          this.logger.warn(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operation.operationType}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ: TURNING, MILLING (3-–æ—Å–µ–≤–∞—è), MILLING (4-–æ—Å–µ–≤–∞—è)`);
          isCompatible = false;
        }
        
        return isCompatible;
      });

      this.logger.log(`–ù–∞–π–¥–µ–Ω–æ ${compatibleMachines.length} —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.operationType}`);
      
      if (compatibleMachines.length > 0) {
        const selectedMachine = compatibleMachines[0]; // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
        this.logger.log(`‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∞–Ω–æ–∫: ${selectedMachine.code} (ID:${selectedMachine.id}, —Ç–∏–ø: ${selectedMachine.type}, –æ—Å–∏: ${selectedMachine.axes})`);
        
        matching.push({
          operation,
          machines: compatibleMachines,
          selectedMachine
        });
      } else {
        this.logger.error(`‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.operationType}!`);
        this.logger.error(`–û–ø–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç: ${operation.operationType}, –æ—Å–∏: ${operation.machineAxes}`);
        this.logger.error(`–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏:`);
        machines.forEach(m => {
          this.logger.error(`- ${m.code}: ${m.type}, ${m.axes} –æ—Å–µ–π`);
        });
      }
    }
    
    this.logger.log(`\n=== –ò–¢–û–ì –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø ===`);
    this.logger.log(`–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ${matching.length} –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ ${operations.length}`);
    
    if (matching.length === 0) {
      this.logger.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–ï –°–û–ü–û–°–¢–ê–í–õ–ï–ù–û –ù–ò –û–î–ù–û–ô –û–ü–ï–†–ê–¶–ò–ò!');
    }
    
    return matching;
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
   */
  private buildPriorityQueue(machineMatching: any[], orders: OrderWithPriority[]) {
    this.logger.log('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º');
    
    const queue = machineMatching.map(match => {
      const order = orders.find(o => o.id === match.operation.orderId);
      return {
        orderId: match.operation.orderId,
        operationId: match.operation.id,
        operationNumber: match.operation.operationNumber, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
        operationType: match.operation.operationType, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
        machineId: match.selectedMachine.id,
        machineAxes: match.operation.machineAxes, // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–µ–π
        priority: order?.priority || 999,
        estimatedTime: match.operation.estimatedTime
      };
    });

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (1 - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    queue.sort((a, b) => a.priority - b.priority);
    
    this.logger.log(`–ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å –∏–∑ ${queue.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
    return queue;
  }

  /**
   * –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫
   */
  private calculateTimelines(queue: any[], orders: OrderWithPriority[]): PlanningResult {
    this.logger.log('–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫');
    
    let currentTime = new Date();
    let totalTime = 0;
    
    // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationsQueue = queue.map(queueItem => {
      const startTime = new Date(currentTime);
      const endTime = new Date(currentTime.getTime() + queueItem.estimatedTime * 60000); // –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
      
      totalTime += queueItem.estimatedTime;
      currentTime = endTime;
      
      return {
        ...queueItem,
        startTime,
        endTime
      };
    });

    return {
      selectedOrders: orders,
      operationsQueue,
      totalTime,
      calculationDate: new Date()
    };
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î
   */
  private async saveResults(result: PlanningResult): Promise<void> {
    this.logger.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    try {
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ planning_results
      await this.dataSource.query(`
        INSERT INTO planning_results (
          calculation_date,
          selected_orders,
          selected_machines,
          queue_plan,
          total_time
        ) VALUES ($1, $2, $3, $4, $5)
      `, [
        result.calculationDate,
        JSON.stringify(result.selectedOrders),
        JSON.stringify(result.operationsQueue.map(op => op.machineId)),
        JSON.stringify(result.operationsQueue),
        result.totalTime
      ]);

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ operation_progress
      for (const order of result.selectedOrders) {
        const orderOperations = result.operationsQueue.filter(op => op.orderId === order.id);
        
        await this.dataSource.query(`
          INSERT INTO operation_progress (
            order_id,
            calculation_date,
            deadline,
            quantity,
            total_production_time,
            operations
          ) VALUES ($1, $2, $3, $4, $5, $6)
        `, [
          order.id,
          result.calculationDate,
          order.deadline,
          order.quantity,
          orderOperations.reduce((sum, op) => sum + op.estimatedTime, 0),
          JSON.stringify(orderOperations)
        ]);
      }
      
      this.logger.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async getLatestPlanningResults(): Promise<any> {
    this.logger.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    const results = await this.dataSource.query(`
      SELECT * FROM planning_results 
      ORDER BY calculation_date DESC 
      LIMIT 1
    `);

    return results[0] || null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
   */
  async getOperationProgress(orderIds?: number[]): Promise<any[]> {
    this.logger.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–π');
    
    let query = 'SELECT * FROM operation_progress ORDER BY calculation_date DESC';
    let params = [];
    
    if (orderIds && orderIds.length > 0) {
      query = 'SELECT * FROM operation_progress WHERE order_id = ANY($1) ORDER BY calculation_date DESC';
      params = [orderIds];
    }

    return await this.dataSource.query(query, params);
  }
}
