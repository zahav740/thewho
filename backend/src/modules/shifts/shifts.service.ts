/**
 * @file: shifts.service.ts
 * @description: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–º–µ–Ω–∞–º–∏ (–ò–°–ü–†–ê–í–õ–ï–ù - –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å relations)
 * @dependencies: typeorm, shift-record.entity
 * @created: 2025-01-28
 * @fixed: 2025-06-07 - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
import { Injectable, NotFoundException, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, Between } from 'typeorm';
// import { EventEmitter2 } from '@nestjs/event-emitter'; // –ü–∞–∫–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
import { ShiftRecord } from '../../database/entities/shift-record.entity';
import { CreateShiftRecordDto } from './dto/create-shift-record.dto';
import { UpdateShiftRecordDto } from './dto/update-shift-record.dto';
import { ShiftsFilterDto } from './dto/shifts-filter.dto';
import { ShiftStatisticsDto } from './dto/shift-statistics.dto';

@Injectable()
export class ShiftsService {
  private readonly logger = new Logger(ShiftsService.name);

  constructor(
    @InjectRepository(ShiftRecord)
    private readonly shiftRecordRepository: Repository<ShiftRecord>,
    // private readonly eventEmitter: EventEmitter2, // üÜï –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–û–¢–ö–õ–Æ–ß–ï–ù–û)
  ) {}

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∏—Å–ª–∞ –∏ –æ–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–º–∏
   */
  private normalizeShiftRecord(record: any): any {
    if (record) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ë–î –≤ —á–∏—Å–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã frontend
      record.dayShiftTimePerUnit = record.dayShiftTimePerUnit ? 
        parseFloat(record.dayShiftTimePerUnit.toString()) : null;
      
      record.nightShiftTimePerUnit = record.nightShiftTimePerUnit ? 
        parseFloat(record.nightShiftTimePerUnit.toString()) : null;
      
      record.setupTime = record.setupTime ? 
        parseInt(record.setupTime.toString()) : null;
      
      record.dayShiftQuantity = record.dayShiftQuantity ? 
        parseInt(record.dayShiftQuantity.toString()) : null;
      
      record.nightShiftQuantity = record.nightShiftQuantity ? 
        parseInt(record.nightShiftQuantity.toString()) : null;

      // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è frontend
      if (record.machine) {
        record.machineCode = record.machine.code;
        record.machineType = record.machine.type;
      }

      if (record.operation) {
        record.operationNumber = record.operation.operationNumber;
        record.operationType = record.operation.operationType;
        
        if (record.operation.order) {
          record.orderDrawingNumber = record.operation.order.drawingNumber;
          record.orderId = record.operation.order.id;
        }
      }

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ —á–µ—Ä—Ç–µ–∂–∞
      if (record.drawingnumber) {
        record.drawingNumber = record.drawingnumber;
      }
    }
    return record;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π
   */
  private normalizeShiftRecords(records: any[]): any[] {
    return records.map(record => this.normalizeShiftRecord(record));
  }

  async findAll(filterDto: ShiftsFilterDto): Promise<any[]> {
    const { startDate, endDate, machineId, operationId } = filterDto;
    const queryBuilder = this.shiftRecordRepository
      .createQueryBuilder('shift')
      .leftJoinAndSelect('shift.machine', 'machine')
      .leftJoinAndSelect('shift.operation', 'operation')
      .leftJoinAndSelect('operation.order', 'order')
      .orderBy('shift.createdAt', 'DESC'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º createdAt –¥–ª—è –ø–æ—Ä—è–¥–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (startDate && endDate) {
      queryBuilder.andWhere('shift.date BETWEEN :startDate AND :endDate', {
        startDate: new Date(startDate),
        endDate: new Date(endDate),
      });
    }

    if (machineId) {
      queryBuilder.andWhere('shift.machineId = :machineId', { machineId });
    }

    if (operationId) {
      queryBuilder.andWhere('shift.operationId = :operationId', { operationId });
    }

    const records = await queryBuilder.getMany();
    return this.normalizeShiftRecords(records);
  }

  async findOne(id: number): Promise<any> {
    const shiftRecord = await this.shiftRecordRepository
      .createQueryBuilder('shift')
      .leftJoinAndSelect('shift.machine', 'machine')
      .leftJoinAndSelect('shift.operation', 'operation')
      .leftJoinAndSelect('operation.order', 'order')
      .where('shift.id = :id', { id })
      .getOne();

    if (!shiftRecord) {
      throw new NotFoundException(`–ó–∞–ø–∏—Å—å —Å–º–µ–Ω—ã —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    return this.normalizeShiftRecord(shiftRecord);
  }

  async create(createShiftRecordDto: CreateShiftRecordDto): Promise<any> {
    try {
      this.logger.log(`üÜï –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω—ã —Å –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π: ${JSON.stringify(createShiftRecordDto)}`);

      const shiftRecord = this.shiftRecordRepository.create(createShiftRecordDto);
      const savedRecord = await this.shiftRecordRepository.save(shiftRecord);
      
      this.logger.log(`‚úÖ –ó–∞–ø–∏—Å—å —Å–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${savedRecord.id}`);
      
      // üÜï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ (–û–¢–ö–õ–Æ–ß–ï–ù–û)
      /*
      if (savedRecord.operationId) {
        const totalQuantity = (savedRecord.dayShiftQuantity || 0) + (savedRecord.nightShiftQuantity || 0);
        
        this.eventEmitter.emit('shift.record.created', {
          shiftRecordId: savedRecord.id,
          operationId: savedRecord.operationId,
          machineId: savedRecord.machineId,
          date: savedRecord.date,
          dayShiftQuantity: savedRecord.dayShiftQuantity,
          nightShiftQuantity: savedRecord.nightShiftQuantity,
          totalQuantity,
        });
        
        this.logger.log(`üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${savedRecord.operationId}`);
      }
      */
    
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å relations –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      return this.findOne(savedRecord.id);
      
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω—ã: ${error.message}`, error.stack);
      throw error;
    }
  }

  async update(
    id: number,
    updateShiftRecordDto: UpdateShiftRecordDto,
  ): Promise<any> {
    try {
      this.logger.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω—ã ${id} —Å –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π: ${JSON.stringify(updateShiftRecordDto)}`);

      const existingRecord = await this.shiftRecordRepository.findOne({ where: { id } });
      if (!existingRecord) {
        throw new NotFoundException(`–ó–∞–ø–∏—Å—å —Å–º–µ–Ω—ã —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      Object.assign(existingRecord, updateShiftRecordDto);
      const updatedRecord = await this.shiftRecordRepository.save(existingRecord);
      
      this.logger.log(`‚úÖ –ó–∞–ø–∏—Å—å —Å–º–µ–Ω—ã ${id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
      
      // üÜï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ (–û–¢–ö–õ–Æ–ß–ï–ù–û)
      /*
      if (updatedRecord.operationId) {
        const totalQuantity = (updatedRecord.dayShiftQuantity || 0) + (updatedRecord.nightShiftQuantity || 0);
        
        this.eventEmitter.emit('shift.record.updated', {
          shiftRecordId: updatedRecord.id,
          operationId: updatedRecord.operationId,
          machineId: updatedRecord.machineId,
          date: updatedRecord.date,
          dayShiftQuantity: updatedRecord.dayShiftQuantity,
          nightShiftQuantity: updatedRecord.nightShiftQuantity,
          totalQuantity,
        });
        
        this.logger.log(`üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${updatedRecord.operationId}`);
      }
      */
    
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å relations –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      return this.findOne(id);
      
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω—ã ${id}: ${error.message}`, error.stack);
      throw error;
    }
  }

  async remove(id: number): Promise<void> {
    const shiftRecord = await this.shiftRecordRepository.findOne({ where: { id } });
    if (!shiftRecord) {
      throw new NotFoundException(`–ó–∞–ø–∏—Å—å —Å–º–µ–Ω—ã —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
    await this.shiftRecordRepository.remove(shiftRecord);
  }

  async getStatistics(filterDto: ShiftsFilterDto): Promise<ShiftStatisticsDto> {
    const records = await this.findAll(filterDto);

    const totalSetupTime = records.reduce(
      (sum, record) => sum + (record.setupTime || 0),
      0,
    );

    const totalDayQuantity = records.reduce(
      (sum, record) => sum + (record.dayShiftQuantity || 0),
      0,
    );

    const totalNightQuantity = records.reduce(
      (sum, record) => sum + (record.nightShiftQuantity || 0),
      0,
    );

    const totalQuantity = totalDayQuantity + totalNightQuantity;

    const dayShiftTime = records.reduce(
      (sum, record) =>
        sum + (record.dayShiftQuantity || 0) * (record.dayShiftTimePerUnit || 0),
      0,
    );

    const nightShiftTime = records.reduce(
      (sum, record) =>
        sum + (record.nightShiftQuantity || 0) * (record.nightShiftTimePerUnit || 0),
      0,
    );

    const totalProductionTime = dayShiftTime + nightShiftTime;

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
    const operatorStats: Record<string, { quantity: number; time: number }> = {};

    records.forEach((record) => {
      if (record.dayShiftOperator) {
        if (!operatorStats[record.dayShiftOperator]) {
          operatorStats[record.dayShiftOperator] = { quantity: 0, time: 0 };
        }
        operatorStats[record.dayShiftOperator].quantity += record.dayShiftQuantity || 0;
        operatorStats[record.dayShiftOperator].time +=
          (record.dayShiftQuantity || 0) * (record.dayShiftTimePerUnit || 0);
      }

      if (record.nightShiftOperator) {
        if (!operatorStats[record.nightShiftOperator]) {
          operatorStats[record.nightShiftOperator] = { quantity: 0, time: 0 };
        }
        operatorStats[record.nightShiftOperator].quantity += record.nightShiftQuantity || 0;
        operatorStats[record.nightShiftOperator].time +=
          (record.nightShiftQuantity || 0) * (record.nightShiftTimePerUnit || 0);
      }
    });

    return {
      totalRecords: records.length,
      totalSetupTime,
      totalProductionTime,
      totalQuantity,
      dayShiftStats: {
        totalQuantity: totalDayQuantity,
        totalTime: dayShiftTime,
      },
      nightShiftStats: {
        totalQuantity: totalNightQuantity,
        totalTime: nightShiftTime,
      },
      operatorStats: Object.entries(operatorStats).map(([name, stats]) => ({
        operatorName: name,
        totalQuantity: stats.quantity,
        totalTime: stats.time,
      })),
    };
  }

  async getShiftsByDate(date: Date): Promise<any[]> {
    const records = await this.shiftRecordRepository
      .createQueryBuilder('shift')
      .leftJoinAndSelect('shift.machine', 'machine')
      .leftJoinAndSelect('shift.operation', 'operation')
      .leftJoinAndSelect('operation.order', 'order')
      .where('shift.date = :date', { date })
      .getMany();
    
    return this.normalizeShiftRecords(records);
  }

  async getShiftsByOperator(operatorName: string): Promise<any[]> {
    const records = await this.shiftRecordRepository
      .createQueryBuilder('shift')
      .leftJoinAndSelect('shift.machine', 'machine')
      .leftJoinAndSelect('shift.operation', 'operation')
      .leftJoinAndSelect('operation.order', 'order')
      .where(
        '(shift.dayShiftOperator = :operatorName OR shift.nightShiftOperator = :operatorName)',
        { operatorName },
      )
      .orderBy('shift.date', 'DESC')
      .getMany();
    
    return this.normalizeShiftRecords(records);
  }

  async getShiftsByMachine(machineId: number): Promise<any[]> {
    const records = await this.shiftRecordRepository
      .createQueryBuilder('shift')
      .leftJoinAndSelect('shift.machine', 'machine')
      .leftJoinAndSelect('shift.operation', 'operation')
      .leftJoinAndSelect('operation.order', 'order')
      .where('shift.machineId = :machineId', { machineId })
      .orderBy('shift.date', 'DESC')
      .getMany();
    
    return this.normalizeShiftRecords(records);
  }
}
