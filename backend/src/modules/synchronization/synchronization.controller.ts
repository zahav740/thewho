/**
 * @file: synchronization.controller.ts
 * @description: API –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –º–µ–∂–¥—É Production –∏ Shifts
 * @dependencies: synchronization.service
 * @created: 2025-06-15
 */
import {
  Controller,
  Post,
  Get,
  Body,
  Param,
  Logger,
  BadRequestException,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';
import { SynchronizationService } from './synchronization.service';

@ApiTags('synchronization')
@Controller('sync')
export class SynchronizationController {
  private readonly logger = new Logger(SynchronizationController.name);

  constructor(
    private readonly syncService: SynchronizationService,
  ) {}

  @Post('assign-operation')
  @ApiOperation({ 
    summary: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π',
    description: '–ù–∞–∑–Ω–∞—á–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ —Å—Ç–∞–Ω–æ–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å —Å–º–µ–Ω—ã'
  })
  @ApiResponse({ status: 200, description: '–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' })
  async assignOperationWithSync(@Body() request: { operationId: number; machineId: number; }) {
    try {
      this.logger.log(`üîó –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${request.operationId} –Ω–∞ —Å—Ç–∞–Ω–æ–∫ ${request.machineId} —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π`);
      
      if (!request.operationId || !request.machineId) {
        throw new BadRequestException('operationId –∏ machineId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      }

      const result = await this.syncService.assignOperationWithSync(
        request.operationId,
        request.machineId
      );

      return {
        success: true,
        message: `–û–ø–µ—Ä–∞—Ü–∏—è ${request.operationId} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω–æ–∫ ${request.machineId} –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`,
        synchronizationStatus: result,
        timestamp: new Date(),
      };

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π:', error);
      throw error;
    }
  }

  @Post('update-progress/:operationId')
  @ApiOperation({ 
    summary: '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏',
    description: '–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω'
  })
  async updateOperationProgress(@Param('operationId') operationId: string) {
    try {
      this.logger.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}`);

      const result = await this.syncService.updateOperationProgress(Number(operationId));

      return {
        success: true,
        message: `–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId} –æ–±–Ω–æ–≤–ª–µ–Ω`,
        synchronizationStatus: result,
        timestamp: new Date(),
      };

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}:`, error);
      throw error;
    }
  }

  @Get('status/:operationId')
  @ApiOperation({ 
    summary: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏–µ–π –∏ —Å–º–µ–Ω–∞–º–∏'
  })
  async getSynchronizationStatus(@Param('operationId') operationId: string) {
    try {
      this.logger.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}`);

      const status = await this.syncService.getSynchronizationStatus(Number(operationId));

      return {
        success: true,
        operationId: Number(operationId),
        status,
        timestamp: new Date(),
      };

    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}:`, error);
      throw error;
    }
  }

  @Post('sync-all')
  @ApiOperation({ 
    summary: '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π',
    description: '–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω'
  })
  async syncAllActiveOperations() {
    try {
      this.logger.log(`üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π`);

      const results = await this.syncService.syncAllActiveOperations();

      return {
        success: true,
        message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.length} –æ–ø–µ—Ä–∞—Ü–∏–π`,
        results,
        timestamp: new Date(),
      };

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  @Get('health')
  @ApiOperation({ 
    summary: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'
  })
  async healthCheck() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      const activeOpsCount = await this.syncService['dataSource'].query(`
        SELECT COUNT(*) as count FROM operations 
        WHERE status IN ('ASSIGNED', 'IN_PROGRESS')
      `);

      const shiftsCount = await this.syncService['dataSource'].query(`
        SELECT COUNT(*) as count FROM shift_records 
        WHERE date >= CURRENT_DATE - INTERVAL '7 days'
      `);

      return {
        success: true,
        message: '–°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
        statistics: {
          activeOperations: Number(activeOpsCount[0].count),
          recentShifts: Number(shiftsCount[0].count),
        },
        timestamp: new Date(),
      };

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
        error: error.message,
        timestamp: new Date(),
      };
    }
  }
}
