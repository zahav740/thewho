/**
 * @file: synchronization.service.ts
 * @description: –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ Production –∏ Shifts (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 * @dependencies: TypeORM, Operations, ShiftRecords, Machines
 * @created: 2025-06-15
 * @updated: 2025-06-16 - –£–±—Ä–∞–Ω EventEmitter –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
import { Injectable, Logger } from '@nestjs/common';
import { InjectDataSource } from '@nestjs/typeorm';
import { DataSource } from 'typeorm';
// import { EventEmitter2, OnEvent } from '@nestjs/event-emitter'; // –ü–∞–∫–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

export interface OperationAssignedEvent {
  operationId: number;
  machineId: number;
  operationNumber: number;
  orderDrawingNumber: string;
  estimatedTime: number;
  operationType: string;
  assignedAt: Date;
}

export interface ShiftRecordCreatedEvent {
  shiftRecordId: number;
  operationId: number;
  machineId: number;
  date: Date;
  dayShiftQuantity?: number;
  nightShiftQuantity?: number;
  totalQuantity: number;
}

export interface SynchronizationStatus {
  operationId: number;
  machineId: number;
  operationStatus: string;
  hasShiftRecords: boolean;
  totalProduced: number;
  targetQuantity: number;
  progress: number;
  lastSyncAt: Date;
}

@Injectable()
export class SynchronizationService {
  private readonly logger = new Logger(SynchronizationService.name);

  constructor(
    @InjectDataSource()
    private readonly dataSource: DataSource,
    // private readonly eventEmitter: EventEmitter2, // –ü–∞–∫–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
  ) {}

  /**
   * üéØ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
   */
  async assignOperationWithSync(operationId: number, machineId: number): Promise<SynchronizationStatus> {
    this.logger.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId} –Ω–∞ —Å—Ç–∞–Ω–æ–∫ ${machineId}`);
    
    const queryRunner = this.dataSource.createQueryRunner();
    await queryRunner.connect();
    await queryRunner.startTransaction();

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      const [operation] = await queryRunner.query(`
        SELECT op.*, ord.drawing_number as "orderDrawingNumber", ord.quantity as "orderQuantity"
        FROM operations op
        LEFT JOIN orders ord ON op."orderId" = ord.id
        WHERE op.id = $1
      `, [operationId]);

      if (!operation) {
        throw new Error(`–û–ø–µ—Ä–∞—Ü–∏—è ${operationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–∫–∞
      const [machine] = await queryRunner.query(`
        SELECT * FROM machines WHERE id = $1 AND "isActive" = true
      `, [machineId]);

      if (!machine) {
        throw new Error(`–°—Ç–∞–Ω–æ–∫ ${machineId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`);
      }

      // 3. –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ —Å—Ç–∞–Ω–æ–∫
      await queryRunner.query(`
        UPDATE operations 
        SET "assignedMachine" = $1, "assignedAt" = NOW(), status = 'ASSIGNED'
        WHERE id = $2
      `, [machineId, operationId]);

      // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω–∫–∞
      await queryRunner.query(`
        UPDATE machines 
        SET "isOccupied" = true, "currentOperation" = $1, "assignedAt" = NOW()
        WHERE id = $2
      `, [operationId, machineId]);

      // 5. üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ—Ç–æ–≤–∫—É –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω—ã
      const today = new Date().toISOString().split('T')[0];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å–º–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      const [existingShift] = await queryRunner.query(`
        SELECT id FROM shift_records 
        WHERE "operationId" = $1 AND "machineId" = $2 AND date = $3
      `, [operationId, machineId, today]);

      let shiftRecordId: number;
      
      if (!existingShift) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å–º–µ–Ω—ã
        const [newShift] = await queryRunner.query(`
          INSERT INTO shift_records (
            date, "shiftType", "operationId", "machineId", "drawingnumber",
            "dayShiftQuantity", "nightShiftQuantity", 
            "dayShiftTimePerUnit", "nightShiftTimePerUnit",
            "dayShiftOperator", "nightShiftOperator",
            "createdAt", "updatedAt"
          ) VALUES (
            $1, 'DAY', $2, $3, $4,
            0, 0,
            0, 0,
            null, null,
            NOW(), NOW()
          ) RETURNING id
        `, [today, operationId, machineId, operation.orderDrawingNumber]);
        
        shiftRecordId = newShift.id;
        this.logger.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–º–µ–Ω—ã ${shiftRecordId} –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}`);
      } else {
        shiftRecordId = existingShift.id;
        this.logger.log(`‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å —Å–º–µ–Ω—ã ${shiftRecordId}`);
      }

      await queryRunner.commitTransaction();

      // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–û–¢–ö–õ–Æ–ß–ï–ù–û)
      /*
      const assignedEvent: OperationAssignedEvent = {
        operationId,
        machineId,
        operationNumber: operation.operationNumber,
        orderDrawingNumber: operation.orderDrawingNumber,
        estimatedTime: operation.estimatedTime,
        operationType: operation.operationtype,
        assignedAt: new Date(),
      };

      this.eventEmitter.emit('operation.assigned', assignedEvent);
      */

      // 7. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const syncStatus = await this.getSynchronizationStatus(operationId);
      
      this.logger.log(`üéâ –û–ø–µ—Ä–∞—Ü–∏—è ${operationId} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`);
      return syncStatus;

    } catch (error) {
      await queryRunner.rollbackTransaction();
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}:`, error);
      throw error;
    } finally {
      await queryRunner.release();
    }
  }

  /**
   * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω—ã
   */
  async updateOperationProgress(operationId: number): Promise<SynchronizationStatus> {
    this.logger.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
      const shiftRecords = await this.dataSource.query(`
        SELECT * FROM shift_records 
        WHERE "operationId" = $1 AND archived = false
        ORDER BY date DESC
      `, [operationId]);

      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
      const totalProduced = shiftRecords.reduce((sum, record) => {
        return sum + (record.dayShiftQuantity || 0) + (record.nightShiftQuantity || 0);
      }, 0);

      // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
      const targetQuantity = 30; // TODO: –ë—Ä–∞—Ç—å –∏–∑ –∑–∞–∫–∞–∑–∞

      // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const progress = Math.min((totalProduced / targetQuantity) * 100, 100);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
      let newStatus = 'ASSIGNED';
      if (progress >= 100) {
        newStatus = 'COMPLETED';
      } else if (totalProduced > 0) {
        newStatus = 'IN_PROGRESS';
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
      await this.dataSource.query(`
        UPDATE operations 
        SET 
          status = $1,
          "actualQuantity" = $2,
          "completedAt" = CASE WHEN $1 = 'COMPLETED' THEN NOW() ELSE "completedAt" END,
          "updatedAt" = NOW()
        WHERE id = $3
      `, [newStatus, totalProduced, operationId]);

      // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞–Ω–æ–∫
      if (newStatus === 'COMPLETED') {
        await this.dataSource.query(`
          UPDATE machines 
          SET "isOccupied" = false, "currentOperation" = null
          WHERE "currentOperation" = $1
        `, [operationId]);
        
        this.logger.log(`üèÅ –û–ø–µ—Ä–∞—Ü–∏—è ${operationId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ç–∞–Ω–æ–∫ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω`);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–û–¢–ö–õ–Æ–ß–ï–ù–û)
      /*
      this.eventEmitter.emit('operation.progress.updated', {
        operationId,
        totalProduced,
        targetQuantity,
        progress,
        status: newStatus,
      });
      */

      return await this.getSynchronizationStatus(operationId);

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}:`, error);
      throw error;
    }
  }

  /**
   * üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async getSynchronizationStatus(operationId: number): Promise<SynchronizationStatus> {
    try {
      const [result] = await this.dataSource.query(`
        SELECT 
          op.id as "operationId",
          op."assignedMachine" as "machineId",
          op.status as "operationStatus",
          op."actualQuantity",
          COUNT(sr.id) as "shiftRecordsCount",
          COALESCE(SUM((sr."dayShiftQuantity" + sr."nightShiftQuantity")), 0) as "totalProduced"
        FROM operations op
        LEFT JOIN shift_records sr ON op.id = sr."operationId"
        WHERE op.id = $1
        GROUP BY op.id, op."assignedMachine", op.status, op."actualQuantity"
      `, [operationId]);

      if (!result) {
        throw new Error(`–û–ø–µ—Ä–∞—Ü–∏—è ${operationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      const targetQuantity = 30; // TODO: –ü–æ–ª—É—á–∞—Ç—å –∏–∑ –∑–∞–∫–∞–∑–∞
      const totalProduced = Number(result.totalProduced) || 0;
      const progress = Math.min((totalProduced / targetQuantity) * 100, 100);

      return {
        operationId: result.operationId,
        machineId: result.machineId,
        operationStatus: result.operationStatus,
        hasShiftRecords: Number(result.shiftRecordsCount) > 0,
        totalProduced,
        targetQuantity,
        progress,
        lastSyncAt: new Date(),
      };

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:`, error);
      throw error;
    }
  }

  /**
   * üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  async syncAllActiveOperations(): Promise<SynchronizationStatus[]> {
    this.logger.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π`);

    try {
      const activeOperations = await this.dataSource.query(`
        SELECT id FROM operations 
        WHERE status IN ('ASSIGNED', 'IN_PROGRESS') 
        AND "assignedMachine" IS NOT NULL
      `);

      const results: SynchronizationStatus[] = [];

      for (const { id } of activeOperations) {
        try {
          const status = await this.updateOperationProgress(id);
          results.push(status);
        } catch (error) {
          this.logger.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${id}:`, error);
        }
      }

      this.logger.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
      return results;

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:`, error);
      throw error;
    }
  }

  /**
   * üì° –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω—ã (–û–¢–ö–õ–Æ–ß–ï–ù–û - –ø–∞–∫–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
   */
  /*
  @OnEvent('shift.record.created')
  async handleShiftRecordCreated(event: ShiftRecordCreatedEvent) {
    this.logger.log(`üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω—ã: ${event.shiftRecordId}`);
    
    if (event.operationId) {
      await this.updateOperationProgress(event.operationId);
    }
  }
  */

  /**
   * üì° –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω—ã (–û–¢–ö–õ–Æ–ß–ï–ù–û - –ø–∞–∫–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
   */
  /*
  @OnEvent('shift.record.updated')
  async handleShiftRecordUpdated(event: ShiftRecordCreatedEvent) {
    this.logger.log(`üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω—ã: ${event.shiftRecordId}`);
    
    if (event.operationId) {
      await this.updateOperationProgress(event.operationId);
    }
  }
  */
}
