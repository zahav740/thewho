#!/bin/bash

echo "üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï BACKEND"
echo "==================================="

# –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª–æ–º–∞–Ω–∞, –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º backend
if [ ! -d "backend/dist/src" ]; then
    echo "‚ùå backend/dist/src –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É..."
    
    if [ -d "backend" ] && [ -f "backend/package.json" ]; then
        echo "üì¶ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ backend –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤..."
        cd backend
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º node_modules
        if [ ! -d "node_modules" ]; then
            echo "üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
            npm install
        fi
        
        # –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞
        echo "üî® –°–±–æ—Ä–∫–∞ TypeScript..."
        npm run build
        
        cd ..
        
        echo "‚úÖ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    else
        echo "‚ùå –ò—Å—Ö–æ–¥–Ω–∏–∫–∏ backend –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ backend..."

if [ ! -f "backend/dist/src/main.js" ]; then
    echo "‚ùå main.js –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    if [ -f "backend/src/main.ts" ]; then
        echo "üîß –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –∏–∑ TypeScript..."
        cd backend
        npm run build
        cd ..
    fi
fi

# –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
echo ""
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."

mkdir -p backend/dist/src/modules/{machines,operations,orders,calendar}
mkdir -p backend/dist/src/database/{entities,migrations}
mkdir -p backend/dist/src/common/{dto,guards,interceptors,pipes}

# –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ TypeScript, –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∏—Ö
if [ -d "backend/src" ]; then
    echo "üìÇ –ù–∞–π–¥–µ–Ω—ã –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ TypeScript"
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if [ -d "backend/dist" ]; then
        echo "üîÑ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ –º–æ–¥—É–ª—è–º..."
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ .js —Ñ–∞–π–ª—ã –∏ –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –∏—Ö
        find backend/dist -name "*.js" -type f | while IFS= read -r file; do
            filename=$(basename "$file")
            dirname=$(dirname "$file")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            if [[ "$filename" == *"machine"* ]]; then
                mkdir -p backend/dist/src/modules/machines
                cp "$file" "backend/dist/src/modules/machines/" 2>/dev/null
            elif [[ "$filename" == *"operation"* ]]; then
                mkdir -p backend/dist/src/modules/operations
                cp "$file" "backend/dist/src/modules/operations/" 2>/dev/null
            elif [[ "$filename" == *"order"* ]]; then
                mkdir -p backend/dist/src/modules/orders
                cp "$file" "backend/dist/src/modules/orders/" 2>/dev/null
            elif [[ "$filename" == *"calendar"* ]]; then
                mkdir -p backend/dist/src/modules/calendar
                cp "$file" "backend/dist/src/modules/calendar/" 2>/dev/null
            elif [[ "$filename" == *"entity"* ]]; then
                mkdir -p backend/dist/src/database/entities
                cp "$file" "backend/dist/src/database/entities/" 2>/dev/null
            elif [[ "$filename" == *"migration"* ]]; then
                mkdir -p backend/dist/src/database/migrations
                cp "$file" "backend/dist/src/database/migrations/" 2>/dev/null
            fi
        done
    fi
fi

# –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
echo ""
echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞..."

# –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if [ ! -f "backend/dist/src/main.js" ]; then
    cat > backend/dist/src/main.js << 'EOF'
const { NestFactory } = require('@nestjs/core');
const { AppModule } = require('./app.module');

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.enableCors();
  await app.listen(process.env.PORT || 3001);
  console.log('Application is running on:', await app.getUrl());
}
bootstrap();
EOF
    echo "‚úÖ –°–æ–∑–¥–∞–Ω main.js"
fi

# –ë–∞–∑–æ–≤—ã–π app.module.js
if [ ! -f "backend/dist/src/app.module.js" ]; then
    cat > backend/dist/src/app.module.js << 'EOF'
const { Module } = require('@nestjs/common');
const { TypeOrmModule } = require('@nestjs/typeorm');
const { ConfigModule } = require('@nestjs/config');

@Module({
  imports: [
    ConfigModule.forRoot(),
    TypeOrmModule.forRoot({
      type: 'postgres',
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT) || 5432,
      username: process.env.DB_USERNAME || 'postgres',
      password: process.env.DB_PASSWORD || 'password',
      database: process.env.DB_NAME || 'thewho',
      entities: [__dirname + '/database/entities/*.js'],
      synchronize: false,
      migrations: [__dirname + '/database/migrations/*.js'],
      migrationsRun: true,
    }),
  ],
})
class AppModule {}

module.exports = { AppModule };
EOF
    echo "‚úÖ –°–æ–∑–¥–∞–Ω app.module.js"
fi

echo ""
echo "üìä –ò–¢–û–ì –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:"
echo "=================================="

echo "Main —Ñ–∞–π–ª: $([ -f backend/dist/src/main.js ] && echo '‚úÖ EXISTS' || echo '‚ùå MISSING')"
echo "App module: $([ -f backend/dist/src/app.module.js ] && echo '‚úÖ EXISTS' || echo '‚ùå MISSING')"
echo "Machines –º–æ–¥—É–ª—å: $(ls backend/dist/src/modules/machines/ 2>/dev/null | wc -l) —Ñ–∞–π–ª–æ–≤"
echo "Operations –º–æ–¥—É–ª—å: $(ls backend/dist/src/modules/operations/ 2>/dev/null | wc -l) —Ñ–∞–π–ª–æ–≤"
echo "Orders –º–æ–¥—É–ª—å: $(ls backend/dist/src/modules/orders/ 2>/dev/null | wc -l) —Ñ–∞–π–ª–æ–≤"
echo "Calendar –º–æ–¥—É–ª—å: $(ls backend/dist/src/modules/calendar/ 2>/dev/null | wc -l) —Ñ–∞–π–ª–æ–≤"
echo "Database entities: $(ls backend/dist/src/database/entities/ 2>/dev/null | wc -l) —Ñ–∞–π–ª–æ–≤"

echo ""
echo "üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ backend..."
cd backend
node dist/src/main.js &
BACKEND_PID=$!
sleep 5

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫
if kill -0 $BACKEND_PID 2>/dev/null; then
    echo "‚úÖ Backend —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (PID: $BACKEND_PID)"
    echo "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ http://localhost:3001"
    kill $BACKEND_PID
else
    echo "‚ùå Backend –Ω–µ —Å–º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è"
    echo "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
fi

cd ..
