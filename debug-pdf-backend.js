/**
 * @file: debug-pdf-backend.js
 * @description: –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è PDF backend
 * @created: 2025-06-21
 */

const http = require('http');

const BACKEND_URL = 'localhost';
const BACKEND_PORT = 5100;
const PDF_FILENAME = '1750497060623-385439311.pdf';

console.log('üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PDF BACKEND');
console.log('================================\n');

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
function checkHealth() {
  return new Promise((resolve, reject) => {
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend...');
    
    const options = {
      hostname: BACKEND_URL,
      port: BACKEND_PORT,
      path: '/api/health',
      method: 'GET',
      timeout: 5000
    };

    const req = http.request(options, (res) => {
      console.log(`   Status: ${res.statusCode}`);
      
      if (res.statusCode === 200) {
        console.log('   ‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω\n');
        resolve(true);
      } else {
        console.log('   ‚ùå Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É\n');
        resolve(false);
      }
    });

    req.on('error', (error) => {
      console.log(`   ‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}\n`);
      resolve(false);
    });

    req.on('timeout', () => {
      console.log('   ‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n');
      req.destroy();
      resolve(false);
    });

    req.end();
  });
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ debug endpoint
function checkDebugEndpoint() {
  return new Promise((resolve) => {
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ debug endpoint...');
    
    const options = {
      hostname: BACKEND_URL,
      port: BACKEND_PORT,
      path: `/api/orders/debug/pdf/${PDF_FILENAME}`,
      method: 'GET',
      timeout: 10000
    };

    const req = http.request(options, (res) => {
      console.log(`   Status: ${res.statusCode}`);
      
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const debugData = JSON.parse(data);
          console.log('   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞:');
          
          debugData.searchResults?.forEach((result, index) => {
            console.log(`      ${index + 1}. ${result.exists ? '‚úÖ' : '‚ùå'} ${result.path}`);
            if (result.stats) {
              console.log(`         üìÅ –†–∞–∑–º–µ—Ä: ${result.stats.size} –±–∞–π—Ç`);
            }
          });
          
          const foundFiles = debugData.foundFiles || [];
          if (foundFiles.length > 0) {
            console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${foundFiles.length}`);
            console.log(`   üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${debugData.cwd}`);
          } else {
            console.log('   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –ø—É—Ç–µ–π');
          }
          
          resolve(foundFiles.length > 0);
        } catch (e) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: ${e.message}`);
          console.log(`   üìÑ –û—Ç–≤–µ—Ç: ${data}`);
          resolve(false);
        }
      });
    });

    req.on('error', (error) => {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      resolve(false);
    });

    req.on('timeout', () => {
      console.log('   ‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞');
      req.destroy();
      resolve(false);
    });

    req.end();
  });
}

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ PDF endpoint
function checkPdfEndpoint() {
  return new Promise((resolve) => {
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ PDF endpoint...');
    
    const options = {
      hostname: BACKEND_URL,
      port: BACKEND_PORT,
      path: `/api/orders/pdf/${PDF_FILENAME}`,
      method: 'GET',
      timeout: 10000
    };

    const req = http.request(options, (res) => {
      console.log(`   Status: ${res.statusCode}`);
      console.log(`   Content-Type: ${res.headers['content-type']}`);
      
      if (res.statusCode === 200) {
        let dataLength = 0;
        
        res.on('data', (chunk) => {
          dataLength += chunk.length;
        });
        
        res.on('end', () => {
          console.log(`   ‚úÖ PDF —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: ${dataLength} –±–∞–π—Ç`);
          resolve(true);
        });
      } else {
        let errorData = '';
        res.on('data', (chunk) => {
          errorData += chunk.toString();
        });
        
        res.on('end', () => {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ ${res.statusCode}:`);
          console.log(`   üìÑ ${errorData}`);
          resolve(false);
        });
      }
    });

    req.on('error', (error) => {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      resolve(false);
    });

    req.on('timeout', () => {
      console.log('   ‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞');
      req.destroy();
      resolve(false);
    });

    req.end();
  });
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function runDiagnostics() {
  console.log(`üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º PDF: ${PDF_FILENAME}`);
  console.log(`üåê Backend: http://${BACKEND_URL}:${BACKEND_PORT}\n`);
  
  const healthOk = await checkHealth();
  
  if (!healthOk) {
    console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    console.log('üí° –†–ï–®–ï–ù–ò–ï: –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend –∫–æ–º–∞–Ω–¥–æ–π: npm run start');
    return;
  }
  
  const debugOk = await checkDebugEndpoint();
  
  if (!debugOk) {
    console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    console.log('üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–∞');
    return;
  }
  
  const pdfOk = await checkPdfEndpoint();
  
  if (pdfOk) {
    console.log('\nüéâ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢! PDF endpoint –∏—Å–ø—Ä–∞–≤–µ–Ω');
    console.log('üí° –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ frontend –Ω–∞ http://localhost:3000');
  } else {
    console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: PDF endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ backend —Å–µ—Ä–≤–µ—Ä–∞');
  }
  
  console.log('\n================================');
  console.log('üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(`   Debug: http://${BACKEND_URL}:${BACKEND_PORT}/api/orders/debug/pdf/${PDF_FILENAME}`);
  console.log(`   PDF:   http://${BACKEND_URL}:${BACKEND_PORT}/api/orders/pdf/${PDF_FILENAME}`);
  console.log('================================');
}

runDiagnostics().catch(console.error);
