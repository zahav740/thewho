## ‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï

**–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–¥–µ—Ä–∂–∞–ª –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—à –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π Excel —Ñ–∞–π–ª!**

–§—É–Ω–∫—Ü–∏—è `directDatabaseExport()` –±—ã–ª–∞ –û–¢–ö–õ–Æ–ß–ï–ù–ê –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ—Ä—á–∏ –¥–∞–Ω–Ω—ã—Ö.

### –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ:
1. –°–∫—Ä–∏–ø—Ç —Å–æ–¥–µ—Ä–∂–∞–ª —Ö–∞—Ä–¥–∫–æ–¥-—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î
2. –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–≥ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
3. –í–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–ª –≤–∞—à –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π Excel —Ñ–∞–π–ª

### –ß—Ç–æ –¥–µ–ª–∞—Ç—å:
1. üîç –ù–∞–π–¥–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª "◊™◊ï◊õ◊†◊ô◊™ ◊ô◊ô◊¶◊ï◊® ◊û◊ê◊°◊ò◊® 2025.xlsx"
2. üìã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∏–ª–∏ –∫–æ—Ä–∑–∏–Ω—ã
3. üö´ –ù–ï –∑–∞–ø—É—Å–∫–∞–π—Ç–µ EXPORT-ORDERS.bat –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
4. ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –º–µ—Ç–æ–¥—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ

---

#!/usr/bin/env node

/**
 * @file: export-orders-to-filesystem.js
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
 * @created: 2025-06-07
 */

const { execSync } = require('child_process');
const fs = require('fs').promises;
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ API
async function exportOrdersToFileSystem() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –ë–î –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (–º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å URL)
    const serverUrl = 'http://localhost:5100'; // –ü–æ—Ä—Ç –≤–∞—à–µ–≥–æ backend
    
    console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ fetch –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Node.js 18+)
    const curlCommand = `curl -X POST "${serverUrl}/api/filesystem/orders/export-all" -H "Content-Type: application/json"`;
    
    const response = execSync(curlCommand, { encoding: 'utf8' });
    const result = JSON.parse(response);
    
    console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω:');
    console.log('  –£—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:', result.statistics?.success || 0);
    console.log('  –û—à–∏–±–æ–∫:', result.statistics?.errors || 0);
    console.log('  –°–æ–æ–±—â–µ–Ω–∏–µ:', result.message);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (result.success) {
      console.log('\nüéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
      await showFileSystemStatistics(serverUrl);
    } else {
      console.log('\n‚ùå –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error.message);
    
    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π —ç–∫—Å–ø–æ—Ä—Ç
    console.log('\nüîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞...');
    await directDatabaseExport();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
async function showFileSystemStatistics(serverUrl) {
  try {
    console.log('\nüìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    
    const statsCommand = `curl -X GET "${serverUrl}/api/filesystem/orders/statistics/overview" -H "Content-Type: application/json"`;
    const statsResponse = execSync(statsCommand, { encoding: 'utf8' });
    const stats = JSON.parse(statsResponse);
    
    if (stats.success) {
      const s = stats.statistics;
      console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:');
      console.log(`  üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: ${s.total_orders}`);
      console.log(`  üìö –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—Å–∏–π: ${s.total_versions}`);
      console.log(`  üìä –°—Ä–µ–¥–Ω–µ–µ –≤–µ—Ä—Å–∏–π –Ω–∞ –∑–∞–∫–∞–∑: ${s.average_versions_per_order}`);
      console.log(`  üë• –ó–∞–∫–∞–∑–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–º–µ–Ω: ${s.orders_with_shifts} (${s.coverage.shifts_coverage})`);
      console.log(`  üìÖ –ó–∞–∫–∞–∑–æ–≤ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º: ${s.orders_with_planning} (${s.coverage.planning_coverage})`);
      console.log(`  üìù –ó–∞–∫–∞–∑–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π: ${s.orders_with_history} (${s.coverage.history_coverage})`);
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', error.message);
  }
}

// –ü—Ä—è–º–æ–π —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)
async function directDatabaseExport() {
  console.log('üìã –í–ù–ò–ú–ê–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è –ø—Ä—è–º–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –û–¢–ö–õ–Æ–ß–ï–ù–ê!');
  console.log('‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã');
  console.log('‚ùå –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ—Ä—á–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
  console.log('');
  console.log('üîß –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –º–µ—Ç–æ–¥:');
  console.log('   GET /api/orders - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤');
  console.log('   POST /api/filesystem/orders/export-all - –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
  console.log('');
  console.log('üí° –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–∏—Ç–µ —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑ –∫–æ–¥–∞');
  
  return; // –ë–õ–û–ö–ò–†–£–ï–ú –í–´–ü–û–õ–ù–ï–ù–ò–ï
  
  /* –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î –° –¢–ï–°–¢–û–í–´–ú–ò –î–ê–ù–ù–´–ú–ò:
  console.log('üìã –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—è–º–æ–π —ç–∫—Å–ø–æ—Ä—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  const ordersPath = path.join(process.cwd(), 'uploads', 'orders');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ orders
    await fs.access(ordersPath);
    console.log('‚úÖ –ü–∞–ø–∫–∞ orders —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  } catch {
    await fs.mkdir(ordersPath, { recursive: true });
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ orders');
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã
  console.log('üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  // !!! –≠–¢–ò –î–ê–ù–ù–´–ï –¢–ï–°–¢–û–í–´–ï –ò –ú–û–ì–£–¢ –ü–ï–†–ï–ó–ê–ü–ò–°–ê–¢–¨ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï !!!
  const sampleOrders = [
    {
      drawing_number: 'TH1K4108A',
      id: 7,
      quantity: 110,
      deadline: '2025-05-07T22:00:00.000Z',
      priority: 2,
      workType: '—Ñ—Ä–µ–∑–µ—Ä–Ω–∞—è'
    },
    {
      drawing_number: 'C6HP0021A', 
      id: 8,
      quantity: 30,
      deadline: '2025-04-29T22:00:00.000Z',
      priority: 1,
      workType: ''
    },
    {
      drawing_number: 'G63828A',
      id: 13, 
      quantity: 20,
      deadline: '2025-03-30T22:00:00.000Z',
      priority: 3,
      workType: ''
    }
  ];
  
  for (const order of sampleOrders) {
    await createOrderFileStructure(order);
  }
  
  console.log('‚úÖ –ü—Ä—è–º–æ–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  */ // –ö–û–ù–ï–¶ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–û–ì–û –ö–û–î–ê
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞
async function createOrderFileStructure(orderData) {
  const orderPath = path.join(process.cwd(), 'uploads', 'orders', orderData.drawing_number);
  const versionPath = path.join(orderPath, '2025-05-30');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    const folders = [
      versionPath,
      path.join(versionPath, 'operations'),
      path.join(versionPath, 'shifts'), 
      path.join(versionPath, 'planning'),
      path.join(versionPath, 'documents'),
      path.join(versionPath, 'history'),
      path.join(versionPath, 'exports')
    ];
    
    for (const folder of folders) {
      await fs.mkdir(folder, { recursive: true });
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    const orderJson = {
      ...orderData,
      createdAt: '2025-05-30T19:00:42.029Z',
      updatedAt: '2025-06-07T12:32:30.951Z',
      status: 'in_progress',
      completionPercentage: 25,
      isOnSchedule: false
    };
    
    const metadataJson = {
      version: '1.0',
      created_at: '2025-05-30T19:00:42.029Z',
      updated_at: '2025-06-07T12:32:30.951Z',
      changes_summary: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ',
      data_source: 'direct_export',
      export_date: new Date().toISOString()
    };
    
    const operationsJson = [
      {
        id: 26,
        operationNumber: 1,
        estimatedTime: 120,
        status: 'PENDING',
        operationType: 'MILLING',
        machineAxes: 3
      }
    ];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
    await fs.writeFile(
      path.join(versionPath, 'order.json'),
      JSON.stringify(orderJson, null, 2)
    );
    
    await fs.writeFile(
      path.join(versionPath, 'metadata.json'), 
      JSON.stringify(metadataJson, null, 2)
    );
    
    await fs.writeFile(
      path.join(versionPath, 'operations', 'operations.json'),
      JSON.stringify(operationsJson, null, 2)
    );
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderData.drawing_number}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è ${orderData.drawing_number}:`, error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
async function checkFileSystemStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–∞–∑–æ–≤...\n');
  
  const ordersPath = path.join(process.cwd(), 'uploads', 'orders');
  
  try {
    const orderFolders = await fs.readdir(ordersPath);
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ –∑–∞–∫–∞–∑–æ–≤: ${orderFolders.length}`);
    
    for (const orderFolder of orderFolders) {
      const orderPath = path.join(ordersPath, orderFolder);
      const stats = await fs.stat(orderPath);
      
      if (stats.isDirectory()) {
        const versions = await fs.readdir(orderPath);
        const versionFolders = [];
        
        for (const version of versions) {
          const versionPath = path.join(orderPath, version);
          const versionStats = await fs.stat(versionPath);
          if (versionStats.isDirectory() && /^\d{4}-\d{2}-\d{2}/.test(version)) {
            versionFolders.push(version);
          }
        }
        
        console.log(`  üì¶ ${orderFolder}: ${versionFolders.length} –≤–µ—Ä—Å–∏–π - [${versionFolders.join(', ')}]`);
      }
    }
    
  } catch (error) {
    console.log('üìÇ –ü–∞–ø–∫–∞ orders –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞');
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üèóÔ∏è  –£—Ç–∏–ª–∏—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É');
  console.log('===============================================\n');
  
  const args = process.argv.slice(2);
  const command = args[0] || 'export';
  
  switch (command) {
    case 'export':
      await exportOrdersToFileSystem();
      break;
      
    case 'status':
      await checkFileSystemStatus();
      break;
      
    case 'direct':
      await directDatabaseExport();
      break;
      
    default:
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
      console.log('  export  - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
      console.log('  status  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã');
      console.log('  direct  - –ü—Ä—è–º–æ–π —ç–∫—Å–ø–æ—Ä—Ç (–µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)');
      console.log('\n–ü—Ä–∏–º–µ—Ä: node export-orders-to-filesystem.js export');
  }
  
  console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ!');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(error => {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = {
  exportOrdersToFileSystem,
  checkFileSystemStatus,
  directDatabaseExport
};
