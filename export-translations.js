/**
 * @file: export-translations.js
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ JSON —Ñ–∞–π–ª—ã
 * @created: 2025-01-28
 */

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ä—Ç–∞
async function findApiPort() {
  const ports = [5100, 5101];
  
  for (const port of ports) {
    try {
      const response = await fetch(`http://localhost:${port}/api/translations/client`);
      if (response.ok) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω API –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        return port;
      }
    } catch (error) {
      // –ü–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
    }
  }
  
  throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π API –Ω–∞ –ø–æ—Ä—Ç–∞—Ö 5100 –∏–ª–∏ 5101');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
async function exportTranslations() {
  try {
    console.log('üåê –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤...');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–∏–π –ø–æ—Ä—Ç
    const apiPort = await findApiPort();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å API
    const response = await fetch(`http://localhost:${apiPort}/api/translations/client`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const translations = await response.json();
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportDir = path.join(__dirname, 'translations-export');
    if (!fs.existsSync(exportDir)) {
      fs.mkdirSync(exportDir);
    }
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    const ruPath = path.join(exportDir, 'ru.json');
    fs.writeFileSync(ruPath, JSON.stringify(translations.ru, null, 2), 'utf8');
    console.log(`‚úÖ –†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: ${ruPath}`);
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    const enPath = path.join(exportDir, 'en.json');
    fs.writeFileSync(enPath, JSON.stringify(translations.en, null, 2), 'utf8');
    console.log(`‚úÖ –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: ${enPath}`);
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const combinedPath = path.join(exportDir, 'translations.json');
    fs.writeFileSync(combinedPath, JSON.stringify(translations, null, 2), 'utf8');
    console.log(`‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${combinedPath}`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const ruCount = Object.keys(translations.ru).length;
    const enCount = Object.keys(translations.en).length;
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:`);
    console.log(`   –†—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${ruCount}`);
    console.log(`   –ê–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${enCount}`);
    console.log(`   –û–±—â–∏—Ö –∫–ª—é—á–µ–π: ${Math.max(ruCount, enCount)}`);
    
    if (ruCount !== enCount) {
      console.log(`\n‚ö†Ô∏è  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!`);
    }
    
    console.log(`\n‚ú® –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
exportTranslations();
