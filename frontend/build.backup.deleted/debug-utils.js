/**
 * @file: debug-utils.js
 * @description: –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—à–∏–±–∫–∏ 400
 * @created: 2025-06-01
 */

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã fetch –∏ XMLHttpRequest
const originalFetch = window.fetch;
const originalXMLHttpRequest = window.XMLHttpRequest;

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ fetch –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
window.fetch = async function(...args) {
  console.log('üîç FETCH REQUEST:', args);
  try {
    const response = await originalFetch.apply(this, args);
    const clonedResponse = response.clone();
    
    try {
      const contentType = clonedResponse.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        const data = await clonedResponse.json();
        console.log('‚úÖ FETCH RESPONSE:', {
          status: clonedResponse.status,
          url: clonedResponse.url,
          data
        });
      } else {
        console.log('‚úÖ FETCH RESPONSE (non-JSON):', {
          status: clonedResponse.status,
          url: clonedResponse.url
        });
      }
    } catch (parseError) {
      console.log('‚úÖ FETCH RESPONSE (parse failed):', {
        status: clonedResponse.status,
        url: clonedResponse.url,
        error: parseError.message
      });
    }
    
    return response;
  } catch (error) {
    console.error('‚ùå FETCH ERROR:', error);
    throw error;
  }
};

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º XMLHttpRequest –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
window.XMLHttpRequest = function() {
  const xhr = new originalXMLHttpRequest();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  const originalOpen = xhr.open;
  const originalSend = xhr.send;
  
  let requestMethod;
  let requestUrl;
  let requestData;
  
  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ open
  xhr.open = function(...args) {
    requestMethod = args[0];
    requestUrl = args[1];
    console.log('üîç XHR OPEN:', { method: requestMethod, url: requestUrl });
    return originalOpen.apply(xhr, args);
  };
  
  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ send
  xhr.send = function(data) {
    requestData = data;
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ JSON
    if (typeof data === 'string') {
      try {
        const jsonData = JSON.parse(data);
        console.log('üîç XHR SEND:', {
          method: requestMethod,
          url: requestUrl,
          data: jsonData
        });
        
        // –ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
        if (jsonData && jsonData.operations && Array.isArray(jsonData.operations)) {
          console.log('üî¨ OPERATIONS DATA TYPES:');
          jsonData.operations.forEach((op, index) => {
            console.log(`Operation ${index}:`, {
              operationNumber: op.operationNumber + ' (type: ' + typeof op.operationNumber + ')',
              operationType: op.operationType + ' (type: ' + typeof op.operationType + ')',
              machineAxes: op.machineAxes + ' (type: ' + typeof op.machineAxes + ')',
              estimatedTime: op.estimatedTime + ' (type: ' + typeof op.estimatedTime + ')',
              id: op.id ? op.id + ' (type: ' + typeof op.id + ')' : 'undefined',
            });
          });
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if (jsonData.priority !== undefined) {
          console.log('üî¨ PRIORITY:', jsonData.priority, '(type: ' + typeof jsonData.priority + ')');
        }
      } catch (e) {
        console.log('üîç XHR SEND (non-JSON):', {
          method: requestMethod,
          url: requestUrl,
          dataSize: data ? data.length : 0
        });
      }
    } else {
      console.log('üîç XHR SEND (non-string):', {
        method: requestMethod,
        url: requestUrl,
        dataType: data ? typeof data : 'null'
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    xhr.addEventListener('load', function() {
      if (xhr.status >= 200 && xhr.status < 300) {
        try {
          const responseData = xhr.responseText ? JSON.parse(xhr.responseText) : null;
          console.log('‚úÖ XHR RESPONSE:', {
            status: xhr.status,
            url: requestUrl,
            data: responseData
          });
        } catch (e) {
          console.log('‚úÖ XHR RESPONSE (parse failed):', {
            status: xhr.status,
            url: requestUrl,
            responseText: xhr.responseText ? xhr.responseText.substring(0, 500) + '...' : null
          });
        }
      } else {
        try {
          const responseData = xhr.responseText ? JSON.parse(xhr.responseText) : null;
          console.error('‚ùå XHR ERROR RESPONSE:', {
            status: xhr.status,
            url: requestUrl,
            data: responseData,
            requestData: requestData
          });
          
          // –î–ª—è –æ—à–∏–±–æ–∫ 400 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
          if (xhr.status === 400 && typeof requestData === 'string') {
            try {
              const reqData = JSON.parse(requestData);
              console.error('üö® BAD REQUEST ANALYSIS:');
              console.error('Request data structure:', Object.keys(reqData));
              
              if (reqData.operations && Array.isArray(reqData.operations)) {
                console.error('Operations structure:', Object.keys(reqData.operations[0]));
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
                const knownFields = ['id', 'operationNumber', 'operationType', 'machineAxes', 'estimatedTime', 'status', 'completedUnits'];
                const unknownFields = reqData.operations.reduce((acc, op) => {
                  Object.keys(op).forEach(key => {
                    if (!knownFields.includes(key) && !acc.includes(key)) {
                      acc.push(key);
                    }
                  });
                  return acc;
                }, []);
                
                if (unknownFields.length > 0) {
                  console.error('‚ö†Ô∏è Unknown fields in operations:', unknownFields);
                }
                
                // –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                const fixedData = JSON.parse(JSON.stringify(reqData));
                
                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã machineAxes
                if (fixedData.operations) {
                  console.error('‚öôÔ∏è ATTEMPTING DATA FIXES FOR NEXT REQUEST:');
                  
                  // Fix 1: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ machineAxes –≤ —Å—Ç—Ä–æ–∫—É —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
                  console.error('Fix 1: machineAxes as string with suffix');
                  const fix1 = JSON.parse(JSON.stringify(fixedData));
                  fix1.operations = fix1.operations.map(op => ({
                    ...op,
                    machineAxes: `${op.machineAxes}-axis`
                  }));
                  console.error('Fix 1 Data:', fix1);
                  
                  // Fix 2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ —Å—Ç—Ä–æ–∫–∏
                  console.error('Fix 2: all numeric fields as strings');
                  const fix2 = JSON.parse(JSON.stringify(fixedData));
                  fix2.operations = fix2.operations.map(op => ({
                    ...op,
                    operationNumber: String(op.operationNumber),
                    machineAxes: String(op.machineAxes),
                    estimatedTime: String(op.estimatedTime)
                  }));
                  console.error('Fix 2 Data:', fix2);
                  
                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–∫—Å—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                  window._debug = {
                    originalData: reqData,
                    fix1,
                    fix2,
                    apply: async (fixNumber) => {
                      const fix = window._debug[`fix${fixNumber}`];
                      if (!fix) {
                        console.error(`Fix ${fixNumber} not found`);
                        return;
                      }
                      
                      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ URL
                      const urlMatch = requestUrl.match(/\/orders\/(\d+)/);
                      if (!urlMatch) {
                        console.error('Could not extract order ID from URL');
                        return;
                      }
                      
                      const orderId = urlMatch[1];
                      console.log(`Applying fix ${fixNumber} to order ${orderId}...`);
                      
                      try {
                        const response = await fetch(`/api/orders/${orderId}`, {
                          method: 'PUT',
                          headers: {
                            'Content-Type': 'application/json'
                          },
                          body: JSON.stringify(fix)
                        });
                        
                        if (response.ok) {
                          console.log(`‚úÖ Fix ${fixNumber} SUCCESSFUL!`);
                          const data = await response.json();
                          console.log('Response data:', data);
                          return data;
                        } else {
                          console.error(`‚ùå Fix ${fixNumber} FAILED with status ${response.status}`);
                          try {
                            const errorData = await response.json();
                            console.error('Error data:', errorData);
                          } catch (e) {
                            console.error('Could not parse error response');
                          }
                        }
                      } catch (e) {
                        console.error(`Error applying fix ${fixNumber}:`, e);
                      }
                    }
                  };
                  
                  console.error('Try different fixes in console with window._debug.apply(1) or window._debug.apply(2)');
                }
              }
            } catch (e) {
              console.error('Error analyzing bad request:', e);
            }
          }
        } catch (e) {
          console.error('‚ùå XHR ERROR RESPONSE (parse failed):', {
            status: xhr.status,
            url: requestUrl,
            responseText: xhr.responseText ? xhr.responseText.substring(0, 500) + '...' : null
          });
        }
      }
    });
    
    xhr.addEventListener('error', function() {
      console.error('‚ùå XHR NETWORK ERROR:', {
        url: requestUrl
      });
    });
    
    return originalSend.apply(xhr, arguments);
  };
  
  return xhr;
};

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
window.disableDebugHooks = function() {
  window.fetch = originalFetch;
  window.XMLHttpRequest = originalXMLHttpRequest;
  console.log('Debug hooks disabled');
};

console.log('‚úÖ Debug hooks initialized. Call window.disableDebugHooks() to disable.');

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—à–∏–±–∫–æ–π 400
window.orderDebugTools = {
  // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  pingBackend: async () => {
    try {
      const response = await fetch('/api/orders?limit=1');
      if (response.ok) {
        console.log('‚úÖ Backend connection successful');
        return await response.json();
      } else {
        console.error('‚ùå Backend connection failed:', response.status);
      }
    } catch (e) {
      console.error('‚ùå Backend connection error:', e);
    }
  },
  
  // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –±–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–π
  createMinimalOrder: async () => {
    const minimalOrder = {
      drawingNumber: `TEST-${Date.now()}`,
      quantity: 1,
      deadline: new Date().toISOString().split('T')[0],
      priority: 2,
      workType: 'Test'
    };
    
    try {
      const response = await fetch('/api/orders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(minimalOrder)
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Minimal order created successfully:', data);
        return data;
      } else {
        console.error('‚ùå Failed to create minimal order:', response.status);
        try {
          const errorData = await response.json();
          console.error('Error data:', errorData);
        } catch (e) {
          console.error('Could not parse error response');
        }
      }
    } catch (e) {
      console.error('‚ùå Error creating minimal order:', e);
    }
  },
  
  // –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É –ø—Ä–æ—Å—Ç—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É
  addSimpleOperation: async (orderId) => {
    if (!orderId) {
      console.error('Order ID is required');
      return;
    }
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
      const orderResponse = await fetch(`/api/orders/${orderId}`);
      if (!orderResponse.ok) {
        console.error(`‚ùå Failed to get order ${orderId}`);
        return;
      }
      
      const order = await orderResponse.json();
      console.log('Current order:', order);
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–∞–∫–∞–∑–∞ —Å –æ–¥–Ω–æ–π –ø—Ä–æ—Å—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π
      const updatedOrder = {
        ...order,
        operations: [
          {
            operationNumber: 1,
            operationType: 'milling',
            machineAxes: '3-axis', // –°—Ç—Ä–æ–∫–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
            estimatedTime: 60
          }
        ]
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const updateResponse = await fetch(`/api/orders/${orderId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedOrder)
      });
      
      if (updateResponse.ok) {
        const updatedData = await updateResponse.json();
        console.log('‚úÖ Operation added successfully:', updatedData);
        return updatedData;
      } else {
        console.error('‚ùå Failed to add operation:', updateResponse.status);
        try {
          const errorData = await updateResponse.json();
          console.error('Error data:', errorData);
        } catch (e) {
          console.error('Could not parse error response');
        }
      }
    } catch (e) {
      console.error('‚ùå Error adding operation:', e);
    }
  },
  
  // –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ PUT —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö
  directUpdate: async (orderId, format) => {
    if (!orderId) {
      console.error('Order ID is required');
      return;
    }
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
      const testOrder = {
        drawingNumber: `TEST-DIRECT-${Date.now()}`,
        quantity: 1,
        deadline: new Date().toISOString().split('T')[0],
        priority: 2,
        workType: 'Test Direct'
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      if (format === 'string') {
        testOrder.operations = [
          {
            operationNumber: "1",
            operationType: "milling",
            machineAxes: "3-axis",
            estimatedTime: "60"
          }
        ];
      } else if (format === 'number') {
        testOrder.operations = [
          {
            operationNumber: 1,
            operationType: "milling",
            machineAxes: 3,
            estimatedTime: 60
          }
        ];
      } else if (format === 'mixed') {
        testOrder.operations = [
          {
            operationNumber: 1,
            operationType: "milling",
            machineAxes: "3-axis",
            estimatedTime: 60
          }
        ];
      } else {
        console.error('Unknown format. Use "string", "number", or "mixed"');
        return;
      }
      
      console.log(`Sending ${format} format update...`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const updateResponse = await fetch(`/api/orders/${orderId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(testOrder)
      });
      
      if (updateResponse.ok) {
        const updatedData = await updateResponse.json();
        console.log(`‚úÖ ${format} format update successful:`, updatedData);
        return updatedData;
      } else {
        console.error(`‚ùå ${format} format update failed:`, updateResponse.status);
        try {
          const errorData = await updateResponse.json();
          console.error('Error data:', errorData);
        } catch (e) {
          console.error('Could not parse error response');
        }
      }
    } catch (e) {
      console.error(`‚ùå Error in ${format} format update:`, e);
    }
  }
};

console.log('‚úÖ Order debug tools available. Use window.orderDebugTools to access them.');
console.log('Examples:');
console.log('1. Test backend connection: window.orderDebugTools.pingBackend()');
console.log('2. Create minimal order: window.orderDebugTools.createMinimalOrder()');
console.log('3. Add simple operation: window.orderDebugTools.addSimpleOperation(orderId)');
console.log('4. Test different formats: window.orderDebugTools.directUpdate(orderId, "string|number|mixed")');
