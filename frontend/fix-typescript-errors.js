const fs = require('fs');
const path = require('path');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ –∏ –∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const fixes = [
  // SimpleExcelUploader.tsx
  {
    file: 'src/components/ExcelUploader/SimpleExcelUploader.tsx',
    changes: [
      {
        find: "import { UploadFile, UploadProps } from 'antd/es/upload/interface';",
        replace: "import { UploadProps } from 'antd/es/upload/interface';"
      }
    ]
  },
  
  // Layout.tsx
  {
    file: 'src/components/Layout/Layout.tsx',
    changes: [
      {
        find: "import React, { useEffect, useState } from 'react';",
        replace: "import React, { useState } from 'react';"
      },
      {
        find: "  Space,",
        replace: ""
      }
    ]
  },
  
  // EnhancedOperationAnalyticsModal.tsx
  {
    file: 'src/components/OperationAnalyticsModal/EnhancedOperationAnalyticsModal.tsx',
    changes: [
      {
        find: "  DashboardOutlined,",
        replace: ""
      }
    ]
  },
  
  // OperationDetailsModal.tsx
  {
    file: 'src/components/OperationDetailsModal/OperationDetailsModal.tsx',
    changes: [
      {
        find: "  Statistic,",
        replace: ""
      },
      {
        find: "  CloseOutlined,",
        replace: ""
      },
      {
        find: "  FileTextOutlined,",
        replace: ""
      }
    ]
  },
  
  // PlanningModal.tsx
  {
    file: 'src/components/PlanningModal/PlanningModal.tsx',
    changes: [
      {
        find: "  ExclamationCircleOutlined,",
        replace: ""
      }
    ]
  },

  // StableExcelImporter.tsx
  {
    file: 'src/components/StableExcelImporter.tsx',
    changes: [
      {
        find: "const { Title } = Typography;",
        replace: "const { Title, Text } = Typography;"
      }
    ]
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
function applyFix(filePath, changes) {
  const fullPath = path.join(__dirname, filePath);
  
  if (!fs.existsSync(fullPath)) {
    console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return false;
  }
  
  let content = fs.readFileSync(fullPath, 'utf8');
  let changed = false;
  
  changes.forEach(change => {
    if (content.includes(change.find)) {
      content = content.replace(change.find, change.replace);
      changed = true;
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${filePath}: ${change.find} -> ${change.replace}`);
    }
  });
  
  if (changed) {
    fs.writeFileSync(fullPath, content, 'utf8');
    console.log(`üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);
    return true;
  }
  
  return false;
}

// –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TypeScript –æ—à–∏–±–æ–∫...\n');

let totalFixed = 0;

fixes.forEach(fix => {
  console.log(`üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: ${fix.file}`);
  if (applyFix(fix.file, fix.changes)) {
    totalFixed++;
  }
  console.log('');
});

console.log(`üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFixed} –∏–∑ ${fixes.length}`);
console.log('');
console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ "npm run build" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏');
console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
console.log('3. –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –æ—à–∏–±–∫–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å');
