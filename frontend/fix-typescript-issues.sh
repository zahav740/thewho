#!/bin/bash

echo "üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TypeScript –æ—à–∏–±–æ–∫..."

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é frontend
cd /c/Users/kasuf/Downloads/TheWho/production-crm/frontend/

echo "üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ src
if [ ! -d "src" ]; then
    echo "‚ùå –ü–∞–ø–∫–∞ src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
    exit 1
fi

echo "‚úÖ –ü–∞–ø–∫–∞ src –Ω–∞–π–¥–µ–Ω–∞"

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
cat > fix-unused-imports.js << 'EOF'
const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ .tsx
function findTsxFiles(dir) {
    let results = [];
    const files = fs.readdirSync(dir);
    
    for (const file of files) {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        
        if (stat.isDirectory()) {
            results = results.concat(findTsxFiles(filePath));
        } else if (file.endsWith('.tsx') || file.endsWith('.ts')) {
            results.push(filePath);
        }
    }
    
    return results;
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const fixes = {
    // –û–±—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    global: [
        // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ @ant-design/icons
        { pattern: /^\s*DashboardOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*Statistic,?\s*$/gm, replacement: '' },
        { pattern: /^\s*CloseOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*FileTextOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*Badge,?\s*$/gm, replacement: '' },
        { pattern: /^\s*ClockCircleOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*InfoCircleOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*EditOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*ThunderboltOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*CalendarOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*TeamOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*SettingOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*UserOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*EyeOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*PlayCircleOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*PrinterOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*WarningOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*StopOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*Checkbox,?\s*$/gm, replacement: '' },
        { pattern: /^\s*useEffect,?\s*$/gm, replacement: '' },
        { pattern: /^\s*Divider,?\s*$/gm, replacement: '' },
        { pattern: /^\s*Modal,?\s*$/gm, replacement: '' },
        { pattern: /^\s*SearchOutlined,?\s*$/gm, replacement: '' },
        { pattern: /^\s*useMemo,?\s*$/gm, replacement: '' },
        { pattern: /^\s*Input,?\s*$/gm, replacement: '' },
        { pattern: /^\s*Alert,?\s*$/gm, replacement: '' },
        { pattern: /^\s*Spin,?\s*$/gm, replacement: '' },
        
        // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ç–∏–ø–æ–≤
        { pattern: /^\s*UploadFile,?\s*$/gm, replacement: '' },
        { pattern: /^\s*OrderFormOperationDto,?\s*$/gm, replacement: '' },
        { pattern: /^\s*MachineAvailability,?\s*$/gm, replacement: '' },
        { pattern: /^\s*OperatorEfficiencyStats,?\s*$/gm, replacement: '' },
        { pattern: /^\s*EnhancedCalendarData,?\s*$/gm, replacement: '' },
        
        // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        { pattern: /const\s+Option\s*=\s*Select\.Option;\s*\n/g, replacement: '' },
        { pattern: /const\s+Title\s*=\s*Typography\.Title;\s*\n/g, replacement: '' },
        { pattern: /const\s+Paragraph\s*=\s*Typography\.Paragraph;\s*\n/g, replacement: '' },
        
        // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö
        { pattern: /,\s*\n\s*\}/gm, replacement: '\n}' },
        { pattern: /\{\s*,/gm, replacement: '{' },
        { pattern: /,\s*,/gm, replacement: ',' },
    ]
};

// –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º
const tsxFiles = findTsxFiles('src');
let fixedFiles = 0;

console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${tsxFiles.length} TypeScript —Ñ–∞–π–ª–æ–≤`);

for (const filePath of tsxFiles) {
    try {
        let content = fs.readFileSync(filePath, 'utf8');
        let originalContent = content;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        for (const fix of fixes.global) {
            content = content.replace(fix.pattern, fix.replacement);
        }
        
        // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö
        content = content.replace(/import\s*\{\s*\n\s*\}/gm, '');
        content = content.replace(/,\s*\n\s*\}\s*from/gm, '\n} from');
        
        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        if (content !== originalContent) {
            fs.writeFileSync(filePath, content, 'utf8');
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
            fixedFiles++;
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
    }
}

console.log(`üéâ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedFiles} –∏–∑ ${tsxFiles.length}`);
EOF

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
echo "üîß –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤..."
node fix-unused-imports.js

echo "üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º TypeScript –æ—à–∏–±–∫–∏..."
npm run build 2>&1 | head -20

echo ""
echo "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üîç –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å 'npm run build' –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
