/**
 * @file: EnhancedExcelImporter.tsx
 * @description: –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ Excel —Ñ–∞–π–ª–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ –≤—ã–±–æ—Ä–æ–º
 * @dependencies: enhancedOrdersApi, antd
 * @created: 2025-06-09
 */
import React, { useState } from 'react';
import {
  Modal,
  Upload,
  Button,
  Steps,
  Table,
  Tag,
  Row,
  Col,
  Card,
  Statistic,
  Alert,
  Checkbox,
  Space,
  Switch,
  Tooltip,
  Progress,
  message,
  Typography
} from 'antd';
import {
  InboxOutlined,
  FileExcelOutlined,
  EyeOutlined,
  ImportOutlined,
  CheckCircleOutlined,
  WarningOutlined,
  DeleteOutlined,
  FilterOutlined
} from '@ant-design/icons';
import type { UploadFile, UploadProps } from 'antd/es/upload';
import enhancedOrdersApi, { ExcelPreviewResult, ExcelOrderPreview, ImportResult } from '../../services/enhancedOrdersApi';

const { Step } = Steps;
const { Title, Text } = Typography;
const { Dragger } = Upload;

interface EnhancedExcelImporterProps {
  visible: boolean;
  onClose: () => void;
  onSuccess: (result: ImportResult) => void;
}

export const EnhancedExcelImporter: React.FC<EnhancedExcelImporterProps> = ({
  visible,
  onClose,
  onSuccess
}) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [analysisResult, setAnalysisResult] = useState<ExcelPreviewResult | null>(null);
  const [selectedOrders, setSelectedOrders] = useState<string[]>([]);
  const [selectedColors, setSelectedColors] = useState<string[]>(['green', 'yellow', 'red', 'blue']);
  const [clearExisting, setClearExisting] = useState(false);
  const [skipDuplicates, setSkipDuplicates] = useState(true);
  const [loading, setLoading] = useState(false);
  const [importResult, setImportResult] = useState<ImportResult | null>(null);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  const handleClose = () => {
    setCurrentStep(0);
    setSelectedFile(null);
    setAnalysisResult(null);
    setSelectedOrders([]);
    setSelectedColors(['green', 'yellow', 'red', 'blue']);
    setClearExisting(false);
    setSkipDuplicates(true);
    setImportResult(null);
    onClose();
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleFileSelect: UploadProps['customRequest'] = ({ file }) => {
    const uploadFile = file as File;
    setSelectedFile(uploadFile);
    setCurrentStep(1);
  };

  // –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
  const handleAnalyze = async () => {
    if (!selectedFile) {
      message.error('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }

    setLoading(true);
    try {
      const response = await enhancedOrdersApi.analyzeExcel(selectedFile);
      
      if (response.success) {
        setAnalysisResult(response.data);
        setSelectedOrders(response.data.orders.map(order => order.drawingNumber));
        setCurrentStep(2);
        message.success(`–ù–∞–π–¥–µ–Ω–æ ${response.data.orders.length} –∑–∞–∫–∞–∑–æ–≤ –≤ —Ñ–∞–π–ª–µ`);
      } else {
        message.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞');
      }
    } catch (error: any) {
      message.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  // –ò–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤
  const handleImport = async () => {
    if (!selectedFile || !analysisResult) {
      message.error('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }

    setLoading(true);
    try {
      const response = await enhancedOrdersApi.importFullExcel(selectedFile, {
        clearExisting,
        skipDuplicates,
        colorFilters: selectedColors
      });

      if (response.success) {
        setImportResult(response.data);
        setCurrentStep(3);
        message.success(response.message);
        onSuccess(response.data);
      } else {
        message.error(response.message);
      }
    } catch (error: any) {
      message.error(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–µ–≥–∞
  const getColorTagColor = (color: string) => {
    const colorMap: Record<string, string> = {
      green: 'success',
      yellow: 'warning',
      red: 'error',
      blue: 'processing',
      other: 'default'
    };
    return colorMap[color] || 'default';
  };

  // –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
  const ordersColumns = [
    {
      title: '–í—ã–±—Ä–∞—Ç—å',
      key: 'select',
      width: 60,
      render: (_: any, record: ExcelOrderPreview) => (
        <Checkbox
          key={`checkbox-${record.rowNumber}-${record.drawingNumber}`}
          checked={selectedOrders.includes(record.drawingNumber)}
          onChange={(e) => {
            if (e.target.checked) {
              setSelectedOrders([...selectedOrders, record.drawingNumber]);
            } else {
              setSelectedOrders(selectedOrders.filter(id => id !== record.drawingNumber));
            }
          }}
        />
      ),
    },
    {
      title: '–°—Ç—Ä–æ–∫–∞',
      dataIndex: 'rowNumber',
      key: 'rowNumber',
      width: 80,
    },
    {
      title: '–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞',
      dataIndex: 'drawingNumber',
      key: 'drawingNumber',
      width: 150,
      render: (text: string) => <Text strong>{text}</Text>,
    },
    {
      title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      dataIndex: 'quantity',
      key: 'quantity',
      width: 100,
    },
    {
      title: '–°—Ä–æ–∫',
      dataIndex: 'deadline',
      key: 'deadline',
      width: 120,
    },
    {
      title: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
      dataIndex: 'priority',
      key: 'priority',
      width: 100,
    },
    {
      title: '–¶–≤–µ—Ç',
      dataIndex: 'color',
      key: 'color',
      width: 120,
      render: (color: string, record: ExcelOrderPreview) => (
        <Tag color={getColorTagColor(color)}>{record.colorLabel}</Tag>
      ),
    },
    {
      title: '–û–ø–µ—Ä–∞—Ü–∏–∏',
      dataIndex: 'operations',
      key: 'operations',
      width: 100,
      render: (operations: any[]) => operations?.length || 0,
    },
  ];

  return (
    <Modal
      title="üìä –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç Excel –∑–∞–∫–∞–∑–æ–≤"
      open={visible}
      onCancel={handleClose}
      width={1200}
      footer={null}
      destroyOnHidden
    >
      <Steps current={currentStep} style={{ marginBottom: 24 }}>
        <Step title="–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞" icon={<FileExcelOutlined />} />
        <Step title="–ê–Ω–∞–ª–∏–∑" icon={<EyeOutlined />} />
        <Step title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏" icon={<FilterOutlined />} />
        <Step title="–†–µ–∑—É–ª—å—Ç–∞—Ç" icon={<CheckCircleOutlined />} />
      </Steps>

      {/* –®–∞–≥ 1: –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ */}
      {currentStep === 0 && (
        <div style={{ textAlign: 'center', padding: '40px 0' }}>
          <Dragger
            accept=".xlsx,.xls"
            customRequest={handleFileSelect}
            maxCount={1}
            showUploadList={false}
          >
            <p className="ant-upload-drag-icon">
              <InboxOutlined style={{ fontSize: 48, color: '#1890ff' }} />
            </p>
            <p className="ant-upload-text">
              –í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤
            </p>
            <p className="ant-upload-hint">
              –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã .xlsx –∏ .xls
            </p>
          </Dragger>
        </div>
      )}

      {/* –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ */}
      {currentStep === 1 && selectedFile && (
        <div>
          <Alert
            message="–§–∞–π–ª –≤—ã–±—Ä–∞–Ω"
            description={
              <div>
                <Text strong>{selectedFile.name}</Text> ({(selectedFile.size / 1024 / 1024).toFixed(2)} –ú–ë)
                <br />
                –ù–∞–∂–º–∏—Ç–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
              </div>
            }
            type="info"
            style={{ marginBottom: 16 }}
          />

          <div style={{ textAlign: 'center' }}>
            <Button
              type="primary"
              size="large"
              icon={<EyeOutlined />}
              onClick={handleAnalyze}
              loading={loading}
            >
              –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª
            </Button>
          </div>
        </div>
      )}

      {/* –®–∞–≥ 3: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      {currentStep === 2 && analysisResult && (
        <div>
          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
            <Col span={6}>
              <Card>
                <Statistic
                  title="–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤"
                  value={analysisResult.orders.length}
                  prefix={<FileExcelOutlined />}
                />
              </Card>
            </Col>
            <Col span={6}>
              <Card>
                <Statistic
                  title="üü¢ –ì–æ—Ç–æ–≤—ã–µ"
                  value={analysisResult.colorStatistics.green.count}
                  valueStyle={{ color: '#52c41a' }}
                />
              </Card>
            </Col>
            <Col span={6}>
              <Card>
                <Statistic
                  title="üü° –û–±—ã—á–Ω—ã–µ"
                  value={analysisResult.colorStatistics.yellow.count}
                  valueStyle={{ color: '#faad14' }}
                />
              </Card>
            </Col>
            <Col span={6}>
              <Card>
                <Statistic
                  title="üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ"
                  value={analysisResult.colorStatistics.red.count}
                  valueStyle={{ color: '#ff4d4f' }}
                />
              </Card>
            </Col>
          </Row>

          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
            <Col span={24}>
              <Card title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞" size="small">
                <Space direction="vertical" style={{ width: '100%' }}>
                  <Row gutter={[16, 16]}>
                    <Col span={8}>
                      <Tooltip title="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º">
                        <div>
                          <Switch
                            checked={clearExisting}
                            onChange={setClearExisting}
                            checkedChildren="–î–∞"
                            unCheckedChildren="–ù–µ—Ç"
                          />
                          <Text style={{ marginLeft: 8 }}>–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã</Text>
                        </div>
                      </Tooltip>
                    </Col>
                    <Col span={8}>
                      <Tooltip title="–ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è –Ω–æ–º–µ—Ä–∞–º–∏ —á–µ—Ä—Ç–µ–∂–µ–π">
                        <div>
                          <Switch
                            checked={skipDuplicates}
                            onChange={setSkipDuplicates}
                            checkedChildren="–î–∞"
                            unCheckedChildren="–ù–µ—Ç"
                          />
                          <Text style={{ marginLeft: 8 }}>–ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã</Text>
                        </div>
                      </Tooltip>
                    </Col>
                    <Col span={8}>
                      <Text>–í—ã–±—Ä–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {selectedOrders.length}</Text>
                    </Col>
                  </Row>

                  <div>
                    <Text strong>–¶–≤–µ—Ç–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</Text>
                    <div style={{ marginTop: 8 }}>
                      <Checkbox.Group
                        value={selectedColors}
                        onChange={(checkedValues) => setSelectedColors(checkedValues as string[])}
                      >
                        <Row>
                          <Col span={6}>
                            <Checkbox value="green">üü¢ –ì–æ—Ç–æ–≤—ã–µ ({analysisResult.colorStatistics.green.count})</Checkbox>
                          </Col>
                          <Col span={6}>
                            <Checkbox value="yellow">üü° –û–±—ã—á–Ω—ã–µ ({analysisResult.colorStatistics.yellow.count})</Checkbox>
                          </Col>
                          <Col span={6}>
                            <Checkbox value="red">üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ ({analysisResult.colorStatistics.red.count})</Checkbox>
                          </Col>
                          <Col span={6}>
                            <Checkbox value="blue">üîµ –ü–ª–∞–Ω–æ–≤—ã–µ ({analysisResult.colorStatistics.blue.count})</Checkbox>
                          </Col>
                        </Row>
                      </Checkbox.Group>
                    </div>
                  </div>
                </Space>
              </Card>
            </Col>
          </Row>

          <Card 
            title="üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞" 
            size="small"
            extra={
              <Space>
                <Button
                  size="small"
                  onClick={() => setSelectedOrders(analysisResult.orders.map(o => o.drawingNumber))}
                >
                  –í—ã–±—Ä–∞—Ç—å –≤—Å–µ
                </Button>
                <Button
                  size="small"
                  onClick={() => setSelectedOrders([])}
                >
                  –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä
                </Button>
              </Space>
            }
          >
            <Table
              dataSource={analysisResult.orders}
              columns={ordersColumns}
              rowKey={(record) => `${record.rowNumber}-${record.drawingNumber}`}
              size="small"
              scroll={{ y: 300 }}
              pagination={{
                pageSize: 10,
                showSizeChanger: true,
                showQuickJumper: true,
                showTotal: (total) => `–í—Å–µ–≥–æ ${total} –∑–∞–∫–∞–∑–æ–≤`
              }}
            />
          </Card>

          <div style={{ textAlign: 'center', marginTop: 24 }}>
            <Space size="large">
              <Button onClick={() => setCurrentStep(1)}>
                –ù–∞–∑–∞–¥
              </Button>
              <Button
                type="primary"
                size="large"
                icon={<ImportOutlined />}
                onClick={handleImport}
                loading={loading}
                disabled={selectedOrders.length === 0}
              >
                –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ({selectedOrders.length} –∑–∞–∫–∞–∑–æ–≤)
              </Button>
            </Space>
          </div>
        </div>
      )}

      {/* –®–∞–≥ 4: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞ */}
      {currentStep === 3 && importResult && (
        <div>
          <Alert
            message="–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
            type="success"
            style={{ marginBottom: 24 }}
          />

          <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
            <Col span={6}>
              <Card>
                <Statistic
                  title="–°–æ–∑–¥–∞–Ω–æ"
                  value={importResult.created}
                  valueStyle={{ color: '#52c41a' }}
                  prefix={<CheckCircleOutlined />}
                />
              </Card>
            </Col>
            <Col span={6}>
              <Card>
                <Statistic
                  title="–û–±–Ω–æ–≤–ª–µ–Ω–æ"
                  value={importResult.updated}
                  valueStyle={{ color: '#1890ff' }}
                  prefix={<ImportOutlined />}
                />
              </Card>
            </Col>
            <Col span={6}>
              <Card>
                <Statistic
                  title="–ü—Ä–æ–ø—É—â–µ–Ω–æ"
                  value={importResult.duplicatesSkipped}
                  valueStyle={{ color: '#faad14' }}
                  prefix={<WarningOutlined />}
                />
              </Card>
            </Col>
            <Col span={6}>
              <Card>
                <Statistic
                  title="–û—à–∏–±–∫–∏"
                  value={importResult.errors.length}
                  valueStyle={{ color: '#ff4d4f' }}
                  prefix={<DeleteOutlined />}
                />
              </Card>
            </Col>
          </Row>

          {importResult.errors.length > 0 && (
            <Card title="‚ö†Ô∏è –û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞" size="small">
              {importResult.errors.map((error, index) => (
                <Alert
                  key={index}
                  message={`–°—Ç—Ä–æ–∫–∞ ${error.row}: ${error.order}`}
                  description={error.error}
                  type="error"
                  style={{ marginBottom: 8 }}
                />
              ))}
            </Card>
          )}

          <div style={{ textAlign: 'center', marginTop: 24 }}>
            <Button
              type="primary"
              size="large"
              onClick={handleClose}
            >
              –ì–æ—Ç–æ–≤–æ
            </Button>
          </div>
        </div>
      )}
    </Modal>
  );
};

export default EnhancedExcelImporter;
