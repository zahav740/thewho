/**
 * @file: ExcelUploaderWithSettings.tsx
 * @description: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–º–ø–æ—Ä—Ç–∞ –∏ —Ü–≤–µ—Ç–æ–≤—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
 * @dependencies: antd, ImportSettingsModal
 * @created: 2025-05-29
 * @updated: 2025-06-09 // –£–ë–†–ê–ù–´ –ó–ê–ì–õ–£–®–ö–ò - –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
 */
import React, { useState, useCallback, useMemo } from 'react';
import {
  Upload,
  Card,
  Button,
  Progress,
  Alert,
  Space,
  Tag,
  Typography,
  Row,
  Col,
  Divider,
  Modal,
  Table,
  message,
  Spin,
  Input,
  Badge,
  Tooltip,
  Checkbox,
} from 'antd';
import {
  InboxOutlined,
  FileExcelOutlined,
  CloudUploadOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  EyeOutlined,
  DeleteOutlined,
  ReloadOutlined,
  FilterOutlined,
  ClearOutlined,
  DownloadOutlined,
  SearchOutlined,
  SettingOutlined,
} from '@ant-design/icons';
import { UploadFile, UploadProps } from 'antd/es/upload/interface';
import type { ColumnsType } from 'antd/es/table';
import ImportSettingsModal, { ImportSettings, ColorFilter, ColumnMapping } from './ImportSettingsModal';

const { Dragger } = Upload;
const { Title, Text, Paragraph } = Typography;
const { Search } = Input;

interface ExcelFileWithSettings {
  file: File;
  data?: any[];
  headers?: string[];
  preview?: any[];
  filteredData?: any[];
  colorFilteredData?: any[];
  status: 'uploading' | 'done' | 'error' | 'processing';
  progress: number;
  error?: string;
  uploadResponse?: any;
  importSettings?: ImportSettings;
}

interface ColumnFilter {
  column: string;
  values: string[];
  searchText?: string;
}

export interface ExcelUploaderWithSettingsProps {
  onUpload?: (file: File, data?: any[], settings?: ImportSettings) => Promise<any>;
  onPreview?: (data: any[]) => void;
  onDownload?: (fileIndex: number) => void;
  maxFileSize?: number;
  acceptedFormats?: string[];
  showPreview?: boolean;
  title?: string;
  description?: string;
  statusMapping?: Record<string, { color: string; text: string; canDownload?: boolean }>;
  buttonProps?: {
    icon?: React.ReactNode;
    children?: React.ReactNode;
    type?: 'primary' | 'default' | 'dashed' | 'link' | 'text';
    size?: 'large' | 'middle' | 'small';
    className?: string;
    style?: React.CSSProperties;
    [key: string]: any;
  };
}

const ExcelUploaderWithSettings: React.FC<ExcelUploaderWithSettingsProps> = ({
  onUpload,
  onPreview,
  onDownload,
  maxFileSize = 10,
  acceptedFormats = ['.xlsx', '.xls', '.csv'],
  showPreview = true,
  title = '–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏',
  description = '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞',
  statusMapping = {
    'done': { color: 'success', text: '–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é', canDownload: true },
    'error': { color: 'error', text: '–û—à–∏–±–∫–∞' },
    'uploading': { color: 'processing', text: '–ó–∞–≥—Ä—É–∑–∫–∞' },
    'processing': { color: 'processing', text: '–û–±—Ä–∞–±–æ—Ç–∫–∞' },
  },
  buttonProps
}) => {
  const [files, setFiles] = useState<ExcelFileWithSettings[]>([]);
  const [previewModalVisible, setPreviewModalVisible] = useState(false);
  const [settingsModalVisible, setSettingsModalVisible] = useState(false);
  const [selectedFileIndex, setSelectedFileIndex] = useState<number>(-1);
  const [filters, setFilters] = useState<ColumnFilter[]>([]);
  const [globalSearch, setGlobalSearch] = useState<string>('');
  const [showSettingsAfterUpload, setShowSettingsAfterUpload] = useState(true);
  const [pendingFileIndex, setPendingFileIndex] = useState<number>(-1);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [defaultImportSettings, setDefaultImportSettings] = useState<ImportSettings>({
    colorFilters: [
      { color: 'green', label: '–ó–µ–ª–µ–Ω—ã–π (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1)', description: '–ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', priority: 1, selected: true },
      { color: 'yellow', label: '–ñ–µ–ª—Ç—ã–π (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)', description: '–û–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã', priority: 2, selected: true },
      { color: 'red', label: '–ö—Ä–∞—Å–Ω—ã–π (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π)', description: '–ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã', priority: 3, selected: true },
      { color: 'blue', label: '–°–∏–Ω–∏–π (–ü–ª–∞–Ω–æ–≤—ã–µ)', description: '–ü–ª–∞–Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', priority: 4, selected: true },
    ],
    columnMapping: [
      { fieldName: '–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞', excelColumn: '–ö–æ–ª–æ–Ω–∫–∞ C', description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞', required: true },
      { fieldName: '–†–µ–≤–∏–∑–∏—è', excelColumn: '–ö–æ–ª–æ–Ω–∫–∞ D', description: '–í–µ—Ä—Å–∏—è —á–µ—Ä—Ç–µ–∂–∞' },
      { fieldName: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', excelColumn: '–ö–æ–ª–æ–Ω–∫–∞ E', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π', required: true },
      { fieldName: '–î–µ–¥–ª–∞–π–Ω', excelColumn: '–ö–æ–ª–æ–Ω–∫–∞ H', description: '–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è' },
      { fieldName: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', excelColumn: '–ö–æ–ª–æ–Ω–∫–∞ K', description: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–∫–∞–∑–∞ (1-3)' },
    ],
    importOnlySelected: false,
  });

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const readExcelFileWithColors = useCallback(async (file: File): Promise<{ data: any[], headers: string[], preview: any[] }> => {
    try {
      console.log('üìÇ –†–ï–ê–õ–¨–ù–û–ï —á—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API:', file.name, '–†–∞–∑–º–µ—Ä:', file.size);
      
      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API
      const formData = new FormData();
      formData.append('file', file);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å proxy
      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5100/api';
      const response = await fetch(`${API_URL}/files/excel/parse`, {
        method: 'POST',
        body: formData,
        // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º Content-Type - –±—Ä–∞—É–∑–µ—Ä —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–ª—è FormData
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ API response:', response.status, errorText);
        throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status} ${response.statusText}. ${errorText}`);
      }
      
      const result = await response.json();
      
      console.log('üìä API –≤–µ—Ä–Ω—É–ª –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ:', {
        headers: result.headers?.length || 0,
        rows: result.rows?.length || 0,
        sheetsCount: result.sheetsCount || 0
      });

      const headers: string[] = result.headers || [];
      const realData: any[] = result.rows || [];

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const dataWithIds = realData.map((row, index) => {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
        return {
          ...row,
          id: index + 1,
          // –ï—Å–ª–∏ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
          rowColor: determineRowColor(row),
          colorPriority: determineColorPriority(row)
        };
      });

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫)
      const preview = dataWithIds.slice(0, 5);

      console.log('‚úÖ –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:', {
        headers: headers.length,
        rows: dataWithIds.length,
        preview: preview.length,
        firstRow: dataWithIds[0] || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        sampleData: preview.slice(0, 2) // –ü–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      });

      return {
        data: dataWithIds,
        headers,
        preview
      };
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –†–ï–ê–õ–¨–ù–û–ì–û Excel —Ñ–∞–π–ª–∞:', error);
      throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const determineRowColor = (row: any): string => {
    // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–≤–µ—Ç –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º
    const status = String(row.status || row.—Å—Ç–∞—Ç—É—Å || '').toLowerCase();
    const priority = String(row.priority || row.–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç || '').toLowerCase();
    
    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞:
    if (status.includes('–≥–æ—Ç–æ–≤') || status.includes('ready') || status.includes('completed')) {
      return 'green'; // –ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    } else if (status.includes('–∫—Ä–∏—Ç–∏—á') || status.includes('—Å—Ä–æ—á–Ω') || status.includes('critical') || priority.includes('–∫—Ä–∏—Ç–∏—á') || priority === '1') {
      return 'red'; // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    } else if (status.includes('–ø–ª–∞–Ω') || status.includes('plan') || priority.includes('–ø–ª–∞–Ω') || priority === '4') {
      return 'blue'; // –ü–ª–∞–Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    } else {
      return 'yellow'; // –û–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ —Ü–≤–µ—Ç—É
  const determineColorPriority = (row: any): number => {
    const color = determineRowColor(row);
    const priorityMap = { green: 1, red: 3, blue: 4, yellow: 2 };
    return priorityMap[color as keyof typeof priorityMap] || 2;
  };

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const applyColorFilters = useCallback((data: any[], settings: ImportSettings): any[] => {
    if (!settings.importOnlySelected) {
      return data; // –ï—Å–ª–∏ –≤—Å–µ —Ü–≤–µ—Ç–∞ –≤—ã–±—Ä–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    }

    const selectedColors = settings.colorFilters
      .filter(filter => filter.selected)
      .map(filter => filter.color);

    return data.filter(row => selectedColors.includes(row.rowColor));
  }, []);

  const handleFileUpload = useCallback(async (file: File) => {
    const newFile: ExcelFileWithSettings = {
      file,
      status: 'processing',
      progress: 0,
      importSettings: defaultImportSettings,
    };

    setFiles(prev => [...prev, newFile]);
    const fileIndex = files.length;

    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –†–ï–ê–õ–¨–ù–û–ì–û —Ñ–∞–π–ª–∞:', file.name);
      
      setFiles(prev => prev.map((f, i) => 
        i === fileIndex ? { ...f, progress: 25 } : f
      ));

      // –ß–∏—Ç–∞–µ–º –†–ï–ê–õ–¨–ù–´–ô —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API
      const { data, headers, preview } = await readExcelFileWithColors(file);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      const colorFilteredData = applyColorFilters(data, defaultImportSettings);
      
      setFiles(prev => prev.map((f, i) => 
        i === fileIndex ? { 
          ...f, 
          data, 
          headers, 
          preview,
          filteredData: colorFilteredData,
          colorFilteredData,
          progress: 75 
        } : f
      ));

      if (onUpload) {
        setFiles(prev => prev.map((f, i) => 
          i === fileIndex ? { ...f, status: 'uploading', progress: 90 } : f
        ));

        const response = await onUpload(file, colorFilteredData, defaultImportSettings);
        
        setFiles(prev => prev.map((f, i) => 
          i === fileIndex ? { 
            ...f, 
            status: 'done', 
            progress: 100, 
            uploadResponse: response 
          } : f
        ));

        const readyOrdersCount = colorFilteredData.filter(row => row.rowColor === 'green').length;
        message.success(`–§–∞–π–ª "${file.name}" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ì–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${readyOrdersCount}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        if (showSettingsAfterUpload) {
          setPendingFileIndex(fileIndex);
          setSettingsModalVisible(true);
        }
      } else {
        setFiles(prev => prev.map((f, i) => 
          i === fileIndex ? { ...f, status: 'done', progress: 100 } : f
        ));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        if (showSettingsAfterUpload) {
          setPendingFileIndex(fileIndex);
          setSettingsModalVisible(true);
        }
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –†–ï–ê–õ–¨–ù–û–ì–û —Ñ–∞–π–ª–∞:', error);
      setFiles(prev => prev.map((f, i) => 
        i === fileIndex ? { 
          ...f, 
          status: 'error', 
          progress: 0, 
          error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        } : f
      ));
      message.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ "${file.name}": ${error.message}`);
    }
  }, [files.length, onUpload, readExcelFileWithColors, applyColorFilters, defaultImportSettings]);

  const handleImportSettingsApply = useCallback((settings: ImportSettings) => {
    setDefaultImportSettings(settings);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ –≤—Å–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
    setFiles(prev => prev.map(file => {
      if (file.data) {
        const colorFilteredData = applyColorFilters(file.data, settings);
        return {
          ...file,
          filteredData: colorFilteredData,
          colorFilteredData,
          importSettings: settings,
        };
      }
      return file;
    }));

    const totalFiles = files.length;
    const affectedFiles = pendingFileIndex >= 0 ? 1 : totalFiles;
    
    message.success(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ ${affectedFiles} —Ñ–∞–π–ª–∞–º`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥–≤–µ—à–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    setPendingFileIndex(-1);
  }, [applyColorFilters, files.length, pendingFileIndex]);

  const uploadProps: UploadProps = {
    name: 'file',
    multiple: true,
    accept: acceptedFormats.join(','),
    beforeUpload: (file) => {
      console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –†–ï–ê–õ–¨–ù–´–ô —Ñ–∞–π–ª:', file.name, '–¢–∏–ø:', file.type, '–†–∞–∑–º–µ—Ä:', file.size);
      
      const isValidSize = file.size / 1024 / 1024 < maxFileSize;
      if (!isValidSize) {
        message.error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${maxFileSize}MB`);
        return false;
      }

      const isValidFormat = acceptedFormats.some(format => 
        file.name.toLowerCase().endsWith(format.toLowerCase())
      );
      if (!isValidFormat) {
        message.error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: ${acceptedFormats.join(', ')}`);
        return false;
      }

      handleFileUpload(file);
      return false;
    },
  };

  const handlePreview = (index: number) => {
    console.log('üëÅÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –†–ï–ê–õ–¨–ù–û–ì–û —Ñ–∞–π–ª–∞:', files[index].file.name);
    setSelectedFileIndex(index);
    setPreviewModalVisible(true);
    onPreview?.(files[index].filteredData || files[index].data || []);
  };

  const handleDownload = (index: number) => {
    const file = files[index];
    const readyOrders = file.colorFilteredData?.filter(row => row.rowColor === 'green') || [];
    
    if (readyOrders.length === 0) {
      message.warning('–í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
      return;
    }

    if (onDownload) {
      onDownload(index);
    } else {
      message.success(`–°–∫–∞—á–∏–≤–∞–Ω–∏–µ ${readyOrders.length} –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ "${file.file.name}"`);
    }
  };

  const handleRemoveFile = (index: number) => {
    Modal.confirm({
      title: '–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª?',
      content: `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "${files[index].file.name}"?`,
      onOk: () => {
        setFiles(prev => prev.filter((_, i) => i !== index));
        message.success('–§–∞–π–ª —É–¥–∞–ª–µ–Ω');
      },
    });
  };

  const handleRetry = (index: number) => {
    const file = files[index];
    setFiles(prev => prev.filter((_, i) => i !== index));
    handleFileUpload(file.file);
  };

  const getStatusColor = (status: string) => statusMapping[status]?.color || 'default';
  const getStatusText = (status: string) => statusMapping[status]?.text || status;
  const canDownload = (status: string) => statusMapping[status]?.canDownload || false;

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'done': return <CheckCircleOutlined style={{ color: '#52c41a' }} />;
      case 'error': return <ExclamationCircleOutlined style={{ color: '#ff4d4f' }} />;
      case 'uploading': return <CloudUploadOutlined style={{ color: '#1890ff' }} />;
      case 'processing': return <Spin size="small" />;
      default: return <FileExcelOutlined />;
    }
  };

  const getRowColor = (record: any) => {
    const colorMap = {
      green: '#f6ffed',
      yellow: '#fffbe6', 
      red: '#fff2f0',
      blue: '#f0f5ff',
    };
    return colorMap[record.rowColor as keyof typeof colorMap] || '#ffffff';
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–≤—å—é
  const createPreviewColumns = (headers: string[], fileIndex: number): ColumnsType<any> => {
    return headers.map(header => ({
      title: header,
      dataIndex: header,
      key: header,
      ellipsis: true,
      render: (text: any, record: any) => {
        if (header === 'status' && record.rowColor === 'green') {
          return <Tag color="success">–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é</Tag>;
        }
        if (header === 'rowColor') {
          return null; // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∫–æ–ª–æ–Ω–∫—É
        }
        return text;
      }
    })).filter(col => col.dataIndex !== 'rowColor' && col.dataIndex !== 'colorPriority');
  };

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ Excel –æ—Ç A –¥–æ Z
  const availableColumns = [
    '–ö–æ–ª–æ–Ω–∫–∞ A', '–ö–æ–ª–æ–Ω–∫–∞ B', '–ö–æ–ª–æ–Ω–∫–∞ C', '–ö–æ–ª–æ–Ω–∫–∞ D', '–ö–æ–ª–æ–Ω–∫–∞ E', '–ö–æ–ª–æ–Ω–∫–∞ F', '–ö–æ–ª–æ–Ω–∫–∞ G', '–ö–æ–ª–æ–Ω–∫–∞ H', 
    '–ö–æ–ª–æ–Ω–∫–∞ I', '–ö–æ–ª–æ–Ω–∫–∞ J', '–ö–æ–ª–æ–Ω–∫–∞ K', '–ö–æ–ª–æ–Ω–∫–∞ L', '–ö–æ–ª–æ–Ω–∫–∞ M', '–ö–æ–ª–æ–Ω–∫–∞ N', '–ö–æ–ª–æ–Ω–∫–∞ O', '–ö–æ–ª–æ–Ω–∫–∞ P',
    '–ö–æ–ª–æ–Ω–∫–∞ Q', '–ö–æ–ª–æ–Ω–∫–∞ R', '–ö–æ–ª–æ–Ω–∫–∞ S', '–ö–æ–ª–æ–Ω–∫–∞ T', '–ö–æ–ª–æ–Ω–∫–∞ U', '–ö–æ–ª–æ–Ω–∫–∞ V', '–ö–æ–ª–æ–Ω–∫–∞ W', '–ö–æ–ª–æ–Ω–∫–∞ X',
    '–ö–æ–ª–æ–Ω–∫–∞ Y', '–ö–æ–ª–æ–Ω–∫–∞ Z'
  ];

  const totalReadyOrders = files.reduce((sum, file) => 
    sum + (file.colorFilteredData?.filter(row => row.rowColor === 'green').length || 0), 0
  );

  return (
    <div style={{ width: '100%' }}>
      <Card>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: 16 }}>
          <div>
            <Title level={4}>
              <FileExcelOutlined /> {title}
            </Title>
            <Paragraph type="secondary">{description}</Paragraph>
            
            <Alert
              message="‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –†–µ–∞–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤"
              description="–¢–µ–ø–µ—Ä—å –ø—Ä–µ–≤—å—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ù–ê–°–¢–û–Ø–©–ò–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–∏—Ö Excel —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ backend API"
              type="success"
              style={{ marginBottom: 16 }}
              showIcon
            />
          </div>
          <Button
            icon={<SettingOutlined />}
            onClick={() => setSettingsModalVisible(true)}
            type="default"
            size="large"
          >
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
          </Button>
        </div>

        <Dragger {...uploadProps} style={{ marginBottom: 24 }}>
          <p className="ant-upload-drag-icon">
            <InboxOutlined style={{ fontSize: '48px', color: '#1890ff' }} />
          </p>
          <p className="ant-upload-text" style={{ fontSize: '18px', marginBottom: '8px' }}>
            –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞
          </p>
          <div className="ant-upload-hint" style={{ color: '#666' }}>
            <div>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {acceptedFormats.join(', ')}</div>
            <div>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {maxFileSize}MB</div>
            <div style={{ marginTop: '8px', fontSize: '14px', fontWeight: 'bold', color: '#1890ff' }}>
              üéØ –ü—Ä–µ–≤—å—é –ø–æ–∫–∞–∂–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞!
            </div>
            <Space direction="vertical" size="small" style={{ marginTop: '8px' }}>
              <Text type="success">üü¢ –ó–µ–ª–µ–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ = –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É)</Text>
              <Text type="warning">üü° –ñ–µ–ª—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ = –æ–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã</Text>
              <Text type="danger">üî¥ –ö—Ä–∞—Å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ = –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã</Text>
              <Text style={{ color: '#1890ff' }}>üîµ –°–∏–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ = –ø–ª–∞–Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã</Text>
              <div style={{ marginTop: '8px', paddingTop: '8px', borderTop: '1px solid #f0f0f0' }}>
                <Checkbox
                  checked={showSettingsAfterUpload}
                  onChange={(e) => setShowSettingsAfterUpload(e.target.checked)}
                >
                  <Text style={{ fontSize: '12px' }}>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏</Text>
                </Checkbox>
              </div>
            </Space>
          </div>
        </Dragger>

        {files.length > 0 && (
          <>
            <div style={{ marginBottom: 16, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Title level={5}>
                –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({files.length})
                {totalReadyOrders > 0 && (
                  <Badge count={totalReadyOrders} style={{ marginLeft: 8 }}>
                    <Tag color="success">–ì–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {totalReadyOrders}</Tag>
                  </Badge>
                )}
              </Title>
            </div>

            <Space direction="vertical" style={{ width: '100%' }} size="middle">
              {files.map((file, index) => {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const currentData = file.filteredData || file.colorFilteredData || [];
                const allData = file.data || [];
                const readyOrdersCount = currentData.filter(row => row.rowColor === 'green').length;
                const totalOrdersCount = currentData.length;
                const isShowingAll = !file.importSettings?.importOnlySelected;
                
                return (
                  <Card key={index} size="small" style={{ backgroundColor: '#fafafa' }}>
                    <Row align="middle" gutter={16}>
                      <Col flex="auto">
                        <Space>
                          {getStatusIcon(file.status)}
                          <div>
                            <Text strong>{file.file.name}</Text>
                            <br />
                            <Text type="secondary" style={{ fontSize: '12px' }}>
                              {(file.file.size / 1024 / 1024).toFixed(2)} MB
                              {totalOrdersCount > 0 && (
                                <>
                                  {` ‚Ä¢ ${totalOrdersCount} —Å—Ç—Ä–æ–∫`}
                                  {!isShowingAll && allData.length > totalOrdersCount && (
                                    <Text type="warning"> (—Ñ–∏–ª—å—Ç—Ä –∏–∑ {allData.length})</Text>
                                  )}
                                </>
                              )}
                              {readyOrdersCount > 0 && (
                                <Text type="success"> ‚Ä¢ {readyOrdersCount} –≥–æ—Ç–æ–≤—ã—Ö</Text>
                              )}
                              {isShowingAll && allData.length > 0 && (
                                <Text style={{ color: '#1890ff' }}> ‚Ä¢ –ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ</Text>
                              )}
                            </Text>
                          </div>
                        </Space>
                      </Col>
                      <Col>
                        <Tag color={getStatusColor(file.status)}>
                          {getStatusText(file.status)}
                        </Tag>
                      </Col>
                      <Col>
                        <Space>
                          {file.status === 'done' && file.data && (
                            <Space direction="vertical" size="small">
                              <Space size="small">
                                <Tooltip title="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (—Å —Ü–≤–µ—Ç–æ–≤—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)">
                                  <Button 
                                    size="small"
                                    icon={<FilterOutlined />}
                                    type={file.importSettings?.importOnlySelected ? "primary" : "default"}
                                    onClick={() => {
                                      const newSettings: ImportSettings = {
                                        ...defaultImportSettings,
                                        ...file.importSettings,
                                        importOnlySelected: true
                                      };
                                      const colorFilteredData = applyColorFilters(file.data!, newSettings);
                                      setFiles(prev => prev.map((f, i) => 
                                        i === index ? {
                                          ...f,
                                          importSettings: newSettings,
                                          filteredData: colorFilteredData,
                                          colorFilteredData
                                        } : f
                                      ));
                                      message.info(`–ü–æ–∫–∞–∑–∞–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (${colorFilteredData.length} –∏–∑ ${file.data!.length})`);
                                    }}
                                  >
                                    –í—ã–±–æ—Ä–æ—á–Ω–æ ({file.filteredData?.length || 0})
                                  </Button>
                                </Tooltip>
                                
                                <Tooltip title="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞">
                                  <Button 
                                    size="small"
                                    icon={<EyeOutlined />}
                                    type={!file.importSettings?.importOnlySelected ? "primary" : "default"}
                                    onClick={() => {
                                      const newSettings: ImportSettings = {
                                        ...defaultImportSettings,
                                        ...file.importSettings,
                                        importOnlySelected: false
                                      };
                                      const allData = file.data!;
                                      setFiles(prev => prev.map((f, i) => 
                                        i === index ? {
                                          ...f,
                                          importSettings: newSettings,
                                          filteredData: allData,
                                          colorFilteredData: allData
                                        } : f
                                      ));
                                      message.info(`–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ (${allData.length})`);
                                    }}
                                  >
                                    –í—Å–µ ({file.data?.length || 0})
                                  </Button>
                                </Tooltip>
                              </Space>
                              
                              <Space size="small">
                                {readyOrdersCount > 0 && (
                                  <Tooltip title={`–°–∫–∞—á–∞—Ç—å ${readyOrdersCount} –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤`}>
                                    <Button 
                                      type="primary"
                                      size="small" 
                                      icon={<DownloadOutlined />}
                                      onClick={() => handleDownload(index)}
                                    >
                                      –°–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ ({readyOrdersCount})
                                    </Button>
                                  </Tooltip>
                                )}
                                {showPreview && (
                                  <Button 
                                    size="small" 
                                    icon={<EyeOutlined />}
                                    onClick={() => handlePreview(index)}
                                  >
                                    –ü—Ä–µ–≤—å—é
                                  </Button>
                                )}
                              </Space>
                            </Space>
                          )}
                          
                          {file.status === 'error' && (
                            <Button 
                              size="small" 
                              icon={<ReloadOutlined />}
                              onClick={() => handleRetry(index)}
                            >
                              –ü–æ–≤—Ç–æ—Ä
                            </Button>
                          )}
                          <Button 
                            size="small" 
                            danger 
                            icon={<DeleteOutlined />}
                            onClick={() => handleRemoveFile(index)}
                          >
                            –£–¥–∞–ª–∏—Ç—å
                          </Button>
                        </Space>
                      </Col>
                    </Row>
                    
                    {file.progress > 0 && file.progress < 100 && (
                      <Progress 
                        percent={file.progress} 
                        size="small" 
                        style={{ marginTop: 8 }}
                        status={file.status === 'error' ? 'exception' : 'active'}
                      />
                    )}
                    
                    {file.error && (
                      <Alert
                        message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                        description={file.error}
                        type="error"
                        style={{ marginTop: 8 }}
                      />
                    )}
                    
                    {file.uploadResponse && (
                      <Alert
                        message="–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                        description={file.uploadResponse.message || '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'}
                        type="success"
                        style={{ marginTop: 8 }}
                      />
                    )}
                  </Card>
                );
              })}
            </Space>
          </>
        )}
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–º–ø–æ—Ä—Ç–∞ */}
      <ImportSettingsModal
        visible={settingsModalVisible}
        onClose={() => setSettingsModalVisible(false)}
        onApply={handleImportSettingsApply}
        availableColumns={availableColumns}
        currentSettings={defaultImportSettings}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–µ–≤—å—é —Å –†–ï–ê–õ–¨–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏ */}
      <Modal
        title={`üìÑ –ü—Ä–µ–≤—å—é —Ñ–∞–π–ª–∞: ${selectedFileIndex >= 0 ? files[selectedFileIndex]?.file.name : ''}`}
        open={previewModalVisible}
        onCancel={() => setPreviewModalVisible(false)}
        width={1400}
        footer={[
          <Button key="close" type="primary" onClick={() => setPreviewModalVisible(false)}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        ]}
      >
        {selectedFileIndex >= 0 && files[selectedFileIndex] && (
          <div>
            <Alert 
              message="‚úÖ –ü—Ä–µ–≤—å—é –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–∞—à–µ–≥–æ Excel —Ñ–∞–π–ª–∞"
              description={
                <div>
                  <div>–ü–æ–∫–∞–∑–∞–Ω–æ: {files[selectedFileIndex].filteredData?.length || 0} –∏–∑ {files[selectedFileIndex].data?.length || 0} —Å—Ç—Ä–æ–∫</div>
                  <div style={{ marginTop: 8 }}>
                    <Space size="small">
                      <Tag color="success">üü¢ –ó–µ–ª–µ–Ω—ã–µ = –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)</Tag>
                      <Tag color="warning">üü° –ñ–µ–ª—Ç—ã–µ = –æ–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã</Tag>
                      <Tag color="error">üî¥ –ö—Ä–∞—Å–Ω—ã–µ = –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã</Tag>
                      <Tag color="processing">üîµ –°–∏–Ω–∏–µ = –ø–ª–∞–Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã</Tag>
                    </Space>
                  </div>
                  <div style={{ marginTop: 8, fontSize: '12px', color: '#1890ff' }}>
                    üéØ –≠—Ç–æ –ù–ê–°–¢–û–Ø–©–ò–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ Excel —Ñ–∞–π–ª–∞!
                  </div>
                </div>
              }
              type="success"
              style={{ marginBottom: 16 }}
            />
            <Table
              dataSource={files[selectedFileIndex].filteredData || files[selectedFileIndex].preview}
              columns={createPreviewColumns(
                files[selectedFileIndex].headers || [], 
                selectedFileIndex
              )}
              size="small"
              pagination={{ 
                pageSize: 10,
                showSizeChanger: true,
                showQuickJumper: true,
                showTotal: (total, range) => `${range[0]}-${range[1]} –∏–∑ ${total} –∑–∞–ø–∏—Å–µ–π`
              }}
              scroll={{ x: true }}
              bordered
              rowClassName={(record) => {
                const colorMap = {
                  green: 'row-green',
                  yellow: 'row-yellow',
                  red: 'row-red',
                  blue: 'row-blue',
                };
                return colorMap[record.rowColor as keyof typeof colorMap] || '';
              }}
            />
          </div>
        )}
      </Modal>

      <div>
        <style>
          {`
            .row-green { background-color: #f6ffed !important; }
            .row-yellow { background-color: #fffbe6 !important; }
            .row-red { background-color: #fff2f0 !important; }
            .row-blue { background-color: #f0f5ff !important; }
          `}
        </style>
      </div>
    </div>
  );
};

export default ExcelUploaderWithSettings;