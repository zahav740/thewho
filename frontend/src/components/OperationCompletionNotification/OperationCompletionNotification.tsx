/**
 * @file: OperationCompletionNotification.tsx
 * @description: –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @dependencies: antd, react-query, PlanningModal
 * @created: 2025-06-12
 */
import React, { useState, useEffect } from 'react';
import {
  Modal,
  Button,
  Space,
  Typography,
  Card,
  Progress,
  Tag,
  Alert,
  Statistic,
  Row,
  Col,
  message
} from 'antd';
import {
  CheckCircleOutlined,
  PlayCircleOutlined,
  SettingOutlined,
  ClockCircleOutlined,
  ToolOutlined,
  FileTextOutlined
} from '@ant-design/icons';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import PlanningModal from '../PlanningModal/PlanningModal';

const { Title, Text } = Typography;

interface CompletionCheckResult {
  operationId: number;
  isCompleted: boolean;
  completedQuantity: number;
  plannedQuantity: number;
  progress: number;
  orderInfo: {
    drawingNumber: string;
    quantity: number;
  };
  operationInfo: {
    operationNumber: number;
    operationType: string;
  };
}

interface OperationCompletionNotificationProps {
  completedOperations: CompletionCheckResult[];
  onClearNotifications: () => void;
  machines?: any[]; // –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
}

export type { OperationCompletionNotificationProps };

// API —Ñ—É–Ω–∫—Ü–∏–∏
const completionApi = {
  handleCompletion: async (operationId: number, action: 'close' | 'continue' | 'plan', completedQuantity: number) => {
    const response = await fetch('/api/operations/completion/handle', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        operationId,
        action,
        completedQuantity
      })
    });
    const data = await response.json();
    if (!response.ok) throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
    return data;
  }
};

const OperationCompletionNotification: React.FC<OperationCompletionNotificationProps> = ({
  completedOperations,
  onClearNotifications,
  machines = []
}) => {
  const queryClient = useQueryClient();
  const [currentNotificationIndex, setCurrentNotificationIndex] = useState(0);
  const [planningModalVisible, setPlanningModalVisible] = useState(false);
  const [selectedMachineForPlanning, setSelectedMachineForPlanning] = useState<any>(null);

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  const handleCompletionMutation = useMutation({
    mutationFn: ({ operationId, action, completedQuantity }: any) =>
      completionApi.handleCompletion(operationId, action, completedQuantity),
    onSuccess: (data, variables) => {
      message.success(data.message);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –í–°–ï —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      queryClient.invalidateQueries({ queryKey: ['machines-with-progress'] });
      queryClient.invalidateQueries({ queryKey: ['machines-availability'] });
      queryClient.invalidateQueries({ queryKey: ['production-metrics'] });
      queryClient.invalidateQueries({ queryKey: ['active-operations'] });
      queryClient.invalidateQueries({ queryKey: ['operations'] });
      queryClient.invalidateQueries({ queryKey: ['operations', 'in-progress'] });
      queryClient.invalidateQueries({ queryKey: ['shift-records'] });
      queryClient.invalidateQueries({ queryKey: ['shifts'] });
      queryClient.invalidateQueries({ queryKey: ['shifts', 'today'] });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫—ç—à–∏
      queryClient.refetchQueries({ queryKey: ['machines'] });
      queryClient.refetchQueries({ queryKey: ['operations'] });
      queryClient.refetchQueries({ queryKey: ['shifts'] });
      
      console.log('üîÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏');

      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      if (data.shouldOpenPlanning && data.machineId) {
        const machine = machines.find(m => m.id === data.machineId || m.id === data.machineId.toString());
        if (machine) {
          setSelectedMachineForPlanning(machine);
          setPlanningModalVisible(true);
        }
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º
      handleNextNotification();
    },
    onError: (error: any) => {
      message.error(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  const currentOperation = completedOperations[currentNotificationIndex];
  const hasNotifications = completedOperations.length > 0;

  const handleNextNotification = () => {
    if (currentNotificationIndex < completedOperations.length - 1) {
      setCurrentNotificationIndex(currentNotificationIndex + 1);
    } else {
      // –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã
      onClearNotifications();
      setCurrentNotificationIndex(0);
    }
  };

  const handleAction = (action: 'close' | 'continue' | 'plan') => {
    if (!currentOperation) return;
    
    handleCompletionMutation.mutate({
      operationId: currentOperation.operationId,
      action,
      completedQuantity: currentOperation.completedQuantity
    });
  };

  // –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  useEffect(() => {
    if (completedOperations.length === 0) {
      setCurrentNotificationIndex(0);
    }
  }, [completedOperations.length]);

  if (!hasNotifications) {
    return null;
  }

  const getOperationTypeColor = (type: string) => {
    switch (type) {
      case 'MILLING': return '#1890ff';
      case 'TURNING': return '#52c41a';
      default: return '#722ed1';
    }
  };

  const getOperationTypeText = (type: string) => {
    switch (type) {
      case 'MILLING': return '–§—Ä–µ–∑–µ—Ä–Ω–∞—è';
      case 'TURNING': return '–¢–æ–∫–∞—Ä–Ω–∞—è';
      default: return type;
    }
  };

  return (
    <>
      <Modal
        title={
          <Space>
            <CheckCircleOutlined style={{ color: '#52c41a', fontSize: '20px' }} />
            <span style={{ fontSize: '18px', fontWeight: 'bold' }}>
              –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! ({currentNotificationIndex + 1} –∏–∑ {completedOperations.length})
            </span>
          </Space>
        }
        open={hasNotifications}
        onCancel={() => {
          onClearNotifications();
          setCurrentNotificationIndex(0);
        }}
        width={700}
        style={{ borderRadius: '12px' }}
        footer={null}
        closable={true}
        maskClosable={false}
      >
        {currentOperation && (
          <div>
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
            <Alert
              message="üéâ –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–≥–ª–∞ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞!"
              description={`–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${currentOperation.completedQuantity} –∏–∑ ${currentOperation.plannedQuantity} –¥–µ—Ç–∞–ª–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.`}
              type="success"
              showIcon
              style={{ marginBottom: 24, borderRadius: '8px' }}
            />

            {/* –î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
            <Card
              style={{ 
                marginBottom: 24,
                borderColor: getOperationTypeColor(currentOperation.operationInfo.operationType),
                borderWidth: 2,
                borderRadius: '12px'
              }}
            >
              <Row gutter={24}>
                <Col span={12}>
                  <Card 
                    size="small" 
                    title={<Space><FileTextOutlined />–ó–∞–∫–∞–∑</Space>}
                    style={{ height: '100%', borderRadius: '8px' }}
                  >
                    <div style={{ marginBottom: 12 }}>
                      <Text strong>–ß–µ—Ä—Ç–µ–∂:</Text>
                      <div style={{ marginTop: 4 }}>
                        <Text style={{ fontSize: '16px', color: '#1890ff' }}>
                          {currentOperation.orderInfo.drawingNumber}
                        </Text>
                      </div>
                    </div>
                    <div>
                      <Text strong>–ü–ª–∞–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</Text>
                      <div style={{ marginTop: 4 }}>
                        <Tag color="blue" style={{ fontSize: '14px', padding: '4px 8px' }}>
                          {currentOperation.orderInfo.quantity} —à—Ç.
                        </Tag>
                      </div>
                    </div>
                  </Card>
                </Col>
                
                <Col span={12}>
                  <Card 
                    size="small" 
                    title={<Space><ToolOutlined />–û–ø–µ—Ä–∞—Ü–∏—è</Space>}
                    style={{ height: '100%', borderRadius: '8px' }}
                  >
                    <div style={{ marginBottom: 12 }}>
                      <Text strong>–ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏:</Text>
                      <div style={{ marginTop: 4 }}>
                        <Tag 
                          color={getOperationTypeColor(currentOperation.operationInfo.operationType)}
                          style={{ fontSize: '14px', padding: '4px 8px' }}
                        >
                          #{currentOperation.operationInfo.operationNumber}
                        </Tag>
                      </div>
                    </div>
                    <div>
                      <Text strong>–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:</Text>
                      <div style={{ marginTop: 4 }}>
                        <Text style={{ fontSize: '14px' }}>
                          {getOperationTypeText(currentOperation.operationInfo.operationType)}
                        </Text>
                      </div>
                    </div>
                  </Card>
                </Col>
              </Row>
            </Card>

            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
            <Card style={{ marginBottom: 24, borderRadius: '8px' }}>
              <Row gutter={24} align="middle">
                <Col span={16}>
                  <div>
                    <Text strong style={{ fontSize: '16px' }}>
                      –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    </Text>
                    <div style={{ marginTop: 8 }}>
                      <Progress
                        percent={currentOperation.progress}
                        size="default"
                        status="success"
                        format={(percent) => `${currentOperation.completedQuantity}/${currentOperation.plannedQuantity}`}
                      />
                    </div>
                  </div>
                </Col>
                <Col span={8}>
                  <Statistic
                    title="–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
                    value={currentOperation.completedQuantity}
                    suffix={`/ ${currentOperation.plannedQuantity}`}
                    valueStyle={{ color: '#52c41a', fontWeight: 'bold' }}
                    prefix={<CheckCircleOutlined />}
                  />
                </Col>
              </Row>
            </Card>

            {/* –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π */}
            <Card 
              title="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
              style={{ marginBottom: 24, borderRadius: '8px' }}
            >
              <Space direction="vertical" size="middle" style={{ width: '100%' }}>
                <Alert
                  type="info"
                  description={
                    <div>
                      <p><strong>üîí –ó–∞–∫—Ä—ã—Ç—å:</strong> –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∞—Ä—Ö–∏–≤–µ. –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω –±—É–¥—É—Ç –æ–±–Ω—É–ª–µ–Ω—ã.</p>
                      <p><strong>‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å:</strong> –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Å–≤–µ—Ä—Ö –ø–ª–∞–Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.</p>
                      <p><strong>üìã –°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å:</strong> –ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.</p>
                    </div>
                  }
                  showIcon={false}
                  style={{ borderRadius: '8px' }}
                />
              </Space>
            </Card>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div style={{ textAlign: 'center' }}>
              <Space size="large">
                <Button
                  type="primary"
                  size="large"
                  icon={<CheckCircleOutlined />}
                  onClick={() => handleAction('close')}
                  loading={handleCompletionMutation.isPending}
                  style={{ 
                    backgroundColor: '#52c41a',
                    borderColor: '#52c41a',
                    borderRadius: '8px',
                    minWidth: '140px'
                  }}
                >
                  –ó–∞–∫—Ä—ã—Ç—å
                </Button>

                <Button
                  size="large"
                  icon={<PlayCircleOutlined />}
                  onClick={() => handleAction('continue')}
                  loading={handleCompletionMutation.isPending}
                  style={{ 
                    borderRadius: '8px',
                    minWidth: '140px'
                  }}
                >
                  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                </Button>

                <Button
                  type="default"
                  size="large"
                  icon={<SettingOutlined />}
                  onClick={() => handleAction('plan')}
                  loading={handleCompletionMutation.isPending}
                  style={{ 
                    backgroundColor: '#722ed1',
                    borderColor: '#722ed1',
                    color: 'white',
                    borderRadius: '8px',
                    minWidth: '140px'
                  }}
                >
                  –°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
                </Button>
              </Space>
            </div>

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
            {completedOperations.length > 1 && (
              <div style={{ textAlign: 'center', marginTop: 16 }}>
                <Text type="secondary">
                  <ClockCircleOutlined style={{ marginRight: 4 }} />
                  –û—Å—Ç–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {completedOperations.length - currentNotificationIndex - 1}
                </Text>
              </div>
            )}
          </div>
        )}
      </Modal>

      {/* –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <PlanningModal
        visible={planningModalVisible}
        onCancel={() => {
          setPlanningModalVisible(false);
          setSelectedMachineForPlanning(null);
        }}
        selectedMachine={selectedMachineForPlanning}
      />
    </>
  );
};

export default OperationCompletionNotification;
