/**
 * @file: OperationDetailsModal.tsx
 * @description: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (Ant Design)
 * @created: 2025-06-07
 */
import React, { useState } from 'react';
import {
  Modal,
  Typography,
  Row,
  Col,
  Card,
  Table,
  Progress,
  Tag,
  Tabs,
  Button,
  Alert,
  Divider,
  Space
} from 'antd';
import {
  PrinterOutlined,
  RiseOutlined,
  UserOutlined,
  DashboardOutlined,
  LineChartOutlined
} from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';

const { Title, Text } = Typography;

interface OperationDetailsModalProps {
  open: boolean;
  onClose: () => void;
  operationData: {
    operationNumber: number;
    drawingNumber: string;
    operationType: string;
    totalQuantityPlanned: number;
    totalQuantityProduced: number;
    startDate: Date;
    estimatedCompletion: Date;
    machines: MachineStatistic[];
    operators: OperatorStatistic[];
  } | null;
}

interface MachineStatistic {
  machineId: number;
  machineName: string;
  quantityProduced: number;
  workingTime: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  efficiency: number;
  status: 'working' | 'setup' | 'idle' | 'maintenance';
}

interface OperatorStatistic {
  operatorName: string;
  shift: 'DAY' | 'NIGHT';
  quantityProduced: number;
  partsPerHour: number;
  timePerPart: number;
  efficiency: number;
  rating: 'A' | 'B' | 'C' | 'D' | 'F';
}

const OperationDetailsModal: React.FC<OperationDetailsModalProps> = ({
  open,
  onClose,
  operationData
}) => {
  const [currentTab, setCurrentTab] = useState('machines');

  if (!operationData) return null;

  const progressPercent = (operationData.totalQuantityProduced / operationData.totalQuantityPlanned) * 100;
  const isOnSchedule = new Date() <= operationData.estimatedCompletion;

  const handlePrint = () => {
    window.print();
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'working': return 'success';
      case 'setup': return 'warning';
      case 'idle': return 'error';
      case 'maintenance': return 'processing';
      default: return 'default';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'working': return 'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç';
      case 'setup': return 'üü° –ù–∞–ª–∞–¥–∫–∞';
      case 'idle': return 'üî¥ –ü—Ä–æ—Å—Ç–æ–π';
      case 'maintenance': return 'üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getRatingColor = (rating: string) => {
    switch (rating) {
      case 'A': return 'success';
      case 'B': return 'processing';
      case 'C': return 'warning';
      case 'D': case 'F': return 'error';
      default: return 'default';
    }
  };

  const generateRecommendations = () => {
    const recommendations = [];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    const lowEfficiencyOperators = operationData.operators.filter(op => op.efficiency < 80);
    if (lowEfficiencyOperators.length > 0) {
      recommendations.push({
        type: 'warning',
        title: '–ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤',
        description: `–û–ø–µ—Ä–∞—Ç–æ—Ä—ã ${lowEfficiencyOperators.map(op => op.operatorName).join(', ')} –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∏–∂–µ 80%. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ.`
      });
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞–Ω–∫–æ–≤
    const idleMachines = operationData.machines.filter(m => m.status === 'idle');
    if (idleMachines.length > 0) {
      recommendations.push({
        type: 'info',
        title: '–ü—Ä–æ—Å—Ç–∞–∏–≤–∞—é—â–∏–µ —Å—Ç–∞–Ω–∫–∏',
        description: `–°—Ç–∞–Ω–∫–∏ ${idleMachines.map(m => m.machineName).join(', ')} –ø—Ä–æ—Å—Ç–∞–∏–≤–∞—é—Ç. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏.`
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
    if (progressPercent < 90 && !isOnSchedule) {
      recommendations.push({
        type: 'error',
        title: '–û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ –æ—Ç –ø–ª–∞–Ω–∞',
        description: '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç—Å—Ç–∞–µ—Ç –æ—Ç –ø–ª–∞–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å —Å–º–µ–Ω—ã –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.'
      });
    }

    return recommendations;
  };

  const recommendations = generateRecommendations();

  // –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞–Ω–∫–æ–≤
  const machineColumns: ColumnsType<MachineStatistic> = [
    {
      title: '–°—Ç–∞–Ω–æ–∫',
      dataIndex: 'machineName',
      key: 'machineName',
      render: (text: string) => <Text strong>{text}</Text>
    },
    {
      title: '–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ',
      dataIndex: 'quantityProduced',
      key: 'quantityProduced',
      render: (value: number) => `${value} –¥–µ—Ç.`,
      align: 'right'
    },
    {
      title: '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã',
      dataIndex: 'workingTime',
      key: 'workingTime',
      render: (minutes: number) => `${Math.round(minutes / 60)}—á ${minutes % 60}–º`,
      align: 'right'
    },
    {
      title: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      dataIndex: 'efficiency',
      key: 'efficiency',
      render: (efficiency: number) => {
        let color = 'default';
        if (efficiency >= 90) color = 'success';
        else if (efficiency >= 75) color = 'warning';
        else color = 'error';
        
        return <Tag color={color}>{efficiency.toFixed(1)}%</Tag>;
      },
      align: 'right'
    },
    {
      title: '–°—Ç–∞—Ç—É—Å',
      dataIndex: 'status',
      key: 'status',
      render: (status: string) => (
        <Tag color={getStatusColor(status)}>
          {getStatusText(status)}
        </Tag>
      )
    }
  ];

  // –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
  const operatorColumns: ColumnsType<OperatorStatistic> = [
    {
      title: '–û–ø–µ—Ä–∞—Ç–æ—Ä',
      dataIndex: 'operatorName',
      key: 'operatorName',
      render: (text: string) => <Text strong>{text}</Text>
    },
    {
      title: '–°–º–µ–Ω–∞',
      dataIndex: 'shift',
      key: 'shift',
      render: (shift: string) => (
        <Tag color={shift === 'DAY' ? 'blue' : 'purple'}>
          {shift === 'DAY' ? '–î–µ–Ω—å' : '–ù–æ—á—å'}
        </Tag>
      )
    },
    {
      title: '–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ',
      dataIndex: 'quantityProduced',
      key: 'quantityProduced',
      render: (value: number) => `${value} –¥–µ—Ç.`,
      align: 'right'
    },
    {
      title: '–î–µ—Ç/—á–∞—Å',
      dataIndex: 'partsPerHour',
      key: 'partsPerHour',
      render: (value: number) => value.toFixed(1),
      align: 'right'
    },
    {
      title: '–í—Ä–µ–º—è/–¥–µ—Ç',
      dataIndex: 'timePerPart',
      key: 'timePerPart',
      render: (value: number) => `${value.toFixed(1)} –º–∏–Ω`,
      align: 'right'
    },
    {
      title: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      dataIndex: 'efficiency',
      key: 'efficiency',
      render: (efficiency: number) => {
        let color = 'default';
        if (efficiency >= 90) color = 'success';
        else if (efficiency >= 75) color = 'warning';
        else color = 'error';
        
        return <Tag color={color}>{efficiency.toFixed(1)}%</Tag>;
      },
      align: 'right'
    },
    {
      title: '–†–µ–π—Ç–∏–Ω–≥',
      dataIndex: 'rating',
      key: 'rating',
      render: (rating: string) => (
        <Tag color={getRatingColor(rating)}>{rating}</Tag>
      ),
      align: 'center'
    }
  ];

  return (
    <Modal
      title={
        <div>
          <Title level={4} style={{ margin: 0 }}>
            üìã –û–ø–µ—Ä–∞—Ü–∏—è ‚Ññ{operationData.operationNumber} - {operationData.drawingNumber}
          </Title>
          <Text type="secondary">
            üè≠ –¢–∏–ø: {operationData.operationType} | üìÖ –ü–µ—Ä–∏–æ–¥: {operationData.startDate.toLocaleDateString('ru-RU')} - {operationData.estimatedCompletion.toLocaleDateString('ru-RU')}
          </Text>
        </div>
      }
      open={open}
      onCancel={onClose}
      width={1200}
      footer={[
        <Button key="print" icon={<PrinterOutlined />} onClick={handlePrint}>
          –ü–µ—á–∞—Ç—å –æ—Ç—á–µ—Ç–∞
        </Button>,
        <Button key="close" type="primary" onClick={onClose}>
          –ó–∞–∫—Ä—ã—Ç—å
        </Button>
      ]}
      style={{ top: 20 }}
    >
      {/* –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
      <Card style={{ marginBottom: 16 }}>
        <Title level={5}>üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏</Title>
        
        <Row gutter={24} align="middle">
          <Col xs={24} md={16}>
            <div style={{ marginBottom: 8 }}>
              <Text>
                –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {operationData.totalQuantityProduced} –∏–∑ {operationData.totalQuantityPlanned} –¥–µ—Ç.
              </Text>
              <Text strong style={{ float: 'right' }}>
                {progressPercent.toFixed(1)}%
              </Text>
            </div>
            <Progress 
              percent={progressPercent} 
              status={progressPercent >= 90 ? 'success' : progressPercent >= 70 ? 'normal' : 'exception'}
              strokeWidth={12}
            />
          </Col>
          
          <Col xs={24} md={8} style={{ textAlign: 'center' }}>
            <Text type="secondary">–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</Text>
            <div style={{ marginTop: 8 }}>
              <Tag 
                color={isOnSchedule ? 'success' : 'error'}
                style={{ fontSize: '14px', padding: '4px 12px' }}
              >
                {isOnSchedule ? '–í —Å—Ä–æ–∫' : '–° –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º'}
              </Tag>
            </div>
          </Col>
        </Row>
      </Card>

      {/* –¢–∞–±—ã —Å –¥–µ—Ç–∞–ª—è–º–∏ */}
      <Tabs 
        activeKey={currentTab} 
        onChange={setCurrentTab}
        items={[
          {
            key: 'machines',
            label: (
              <span>
                <DashboardOutlined />
                –°—Ç–∞–Ω–∫–∏
              </span>
            ),
            children: (
              <>
                <Title level={5}>üè≠ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–Ω–∫–∞–º</Title>
                <Table
                  columns={machineColumns}
                  dataSource={operationData.machines}
                  rowKey="machineId"
                  pagination={false}
                  size="small"
                />
              </>
            )
          },
          {
            key: 'operators',
            label: (
              <span>
                <UserOutlined />
                –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
              </span>
            ),
            children: (
              <>
                <Title level={5}>üë®‚Äçüîß –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤</Title>
                <Table
                  columns={operatorColumns}
                  dataSource={operationData.operators}
                  rowKey="operatorName"
                  pagination={false}
                  size="small"
                />
              </>
            )
          },
          {
            key: 'performance',
            label: (
              <span>
                <LineChartOutlined />
                –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
              </span>
            ),
            children: (
              <>
                <Title level={5}>üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</Title>
                
                <Row gutter={16}>
                  <Col xs={24} md={12}>
                    <Card>
                      <Title level={5}>üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º</Title>
                      <div style={{ 
                        height: 200, 
                        display: 'flex', 
                        alignItems: 'center', 
                        justifyContent: 'center',
                        backgroundColor: '#f5f5f5',
                        borderRadius: 6
                      }}>
                        <Text type="secondary">
                          –ì—Ä–∞—Ñ–∏–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
                        </Text>
                      </div>
                    </Card>
                  </Col>
                  
                  <Col xs={24} md={12}>
                    <Card>
                      <Title level={5}>üî• –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–Ω–∫–æ–≤ –ø–æ —á–∞—Å–∞–º</Title>
                      <div style={{ 
                        height: 200, 
                        display: 'flex', 
                        alignItems: 'center', 
                        justifyContent: 'center',
                        backgroundColor: '#f5f5f5',
                        borderRadius: 6
                      }}>
                        <Text type="secondary">
                          –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
                        </Text>
                      </div>
                    </Card>
                  </Col>
                </Row>
              </>
            )
          },
          {
            key: 'recommendations',
            label: (
              <span>
                <RiseOutlined />
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
              </span>
            ),
            children: (
              <>
                <Title level={5}>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</Title>
                
                {recommendations.length === 0 ? (
                  <Alert
                    message="üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
                    description="–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç."
                    type="success"
                    showIcon
                  />
                ) : (
                  <Space direction="vertical" style={{ width: '100%' }}>
                    {recommendations.map((rec, index) => (
                      <Alert
                        key={index}
                        message={rec.title}
                        description={rec.description}
                        type={rec.type as any}
                        showIcon
                      />
                    ))}
                  </Space>
                )}

                <Divider />

                <Title level={5}>üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</Title>
                
                <Row gutter={16}>
                  <Col xs={24} md={12}>
                    <Card>
                      <Title level={5} style={{ color: '#1890ff' }}>
                        üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
                      </Title>
                      <Text>
                        ‚Ä¢ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏<br/>
                        ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å—Ç–∞–Ω–∫–æ–≤<br/>
                        ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏
                      </Text>
                    </Card>
                  </Col>
                  
                  <Col xs={24} md={12}>
                    <Card>
                      <Title level={5} style={{ color: '#722ed1' }}>
                        üìö –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
                      </Title>
                      <Text>
                        ‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤<br/>
                        ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤<br/>
                        ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
                      </Text>
                    </Card>
                  </Col>
                </Row>
              </>
            )
          }
        ]}
      />
    </Modal>
  );
};

export default OperationDetailsModal;
