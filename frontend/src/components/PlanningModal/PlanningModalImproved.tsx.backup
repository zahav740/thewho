/**
 * @file: PlanningModalImproved.tsx
 * @description: –£–õ–£–ß–®–ï–ù–ù–û–ï –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É—á–µ—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ä–∞–±–æ—Ç–µ
 * @dependencies: antd, planningApi, MachineAvailability
 * @created: 2025-06-08
 */
import React, { useState } from 'react';
import {
  Modal,
  Card,
  Typography,
  Row,
  Col,
  Space,
  Alert,
  Spin,
  Button,
  Tag,
  Statistic,
  List,
  Steps,
  Result,
  Collapse,
  message,
} from 'antd';
import {
  CheckCircleOutlined,
  ToolOutlined,
  ClockCircleOutlined,
  InfoCircleOutlined,
  WarningOutlined,
  ThunderboltOutlined,
} from '@ant-design/icons';
import { useMutation, useQuery } from '@tanstack/react-query';
import { planningApi } from '../../services/planningApi';
import { MachineAvailability } from '../../types/machine.types';

const { Title, Text } = Typography;

interface PlanningResult {
  selectedOrders: any[];
  operationsQueue: any[];
  totalTime: number;
  calculationDate: string;
  warnings?: string[];
}

interface ImprovedPlanningResult {
  success: boolean;
  message: string;
  result: {
    selectedOrdersCount: number;
    operationsQueueLength: number;
    totalTime: number;
    totalTimeFormatted: string;
    calculationDate: string;
    hasWarnings: boolean;
    warnings: string[];
    details: PlanningResult;
  };
  analysis: {
    availableOperations: number;
    totalEstimatedTime: number;
    operationsByType: Record<string, number>;
    operationsByPriority: Record<string, number>;
  };
}

interface PlanningModalImprovedProps {
  visible: boolean;
  onCancel: () => void;
  selectedMachine: MachineAvailability | null;
}

const PlanningModalImproved: React.FC<PlanningModalImprovedProps> = ({
  visible,
  onCancel,
  selectedMachine,
}) => {
  console.log('üéØ –£–õ–£–ß–®–ï–ù–ù–û–ï –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: PlanningModal render:', { visible, selectedMachine: selectedMachine?.machineName });
  
  const [currentStep, setCurrentStep] = useState(0);
  const [planningResult, setPlanningResult] = useState<ImprovedPlanningResult | null>(null);
  const [showResultModal, setShowResultModal] = useState(false);
  const [selectedOperation, setSelectedOperation] = useState<any>(null);
  const [selectedOrder, setSelectedOrder] = useState<any>(null);
  const [showOperationModal, setShowOperationModal] = useState(false);
  const [showAnalysis, setShowAnalysis] = useState(false);
  const [selectedOperationForAssign, setSelectedOperationForAssign] = useState<any>(null);

  console.log('üéØ Current state:', { currentStep, planningResult: !!planningResult, showResultModal });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã
  const { data: systemAnalysis } = useQuery({
    queryKey: ['system-analysis'],
    queryFn: planningApi.getSystemAnalysis,
    enabled: visible,
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const improvedPlanningMutation = useMutation({
    mutationFn: planningApi.planProductionImproved,
    onSuccess: (result: any) => {
      console.log('‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', result);
      // –ü—Ä–∏–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
      setPlanningResult(result as ImprovedPlanningResult);
      setCurrentStep(2);
      setShowResultModal(true);
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    },
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const demoImprovedMutation = useMutation({
    mutationFn: planningApi.demoImprovedPlanning,
    onSuccess: (result: any) => {
      console.log('‚úÖ –î–ï–ú–û —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ:', result);
      // –ü—Ä–∏–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
      setPlanningResult(result as ImprovedPlanningResult);
      setCurrentStep(2);
      setShowResultModal(true);
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    },
  });

  const handleStartImprovedPlanning = () => {
    if (!selectedMachine) return;

    setCurrentStep(1);
    const machineIds = [parseInt(selectedMachine.id, 10)];
    improvedPlanningMutation.mutate({
      selectedMachines: machineIds,
      excelData: null,
    });
  };

  const handleDemoImprovedPlanning = () => {
    setCurrentStep(1);
    demoImprovedMutation.mutate();
  };

  // üÜï –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
  const assignOperationMutation = useMutation({
    mutationFn: ({ operationId, machineId }: { operationId: string; machineId: number }) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∏–∑ planningApi –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      return planningApi.assignOperation(operationId, machineId.toString());
    },
    onSuccess: (result) => {
      console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞:', result);
      message.success(`–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω–æ–∫ ${selectedMachine?.machineName}`);
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–∫–æ–≤
      handleClose();
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞–Ω–∫–æ–≤
      window.location.reload(); // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    },
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const handleSelectOperation = (operation: any) => {
    console.log('üéØ –í—ã–±—Ä–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', operation);
    setSelectedOperationForAssign(operation);
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    const order = planningResult?.result.details.selectedOrders.find(o => o.id === operation.orderId);
    const drawingNumber = order?.drawingNumber || `–ó–∞–∫–∞–∑ #${operation.orderId}`;
    
    Modal.confirm({
      title: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
      content: (
        <div>
          <p><strong>–ß–µ—Ä—Ç—ë–∂:</strong> {drawingNumber}</p>
          <p><strong>–û–ø–µ—Ä–∞—Ü–∏—è:</strong> {operation.operationNumber} ({operation.operationType})</p>
          <p><strong>–°—Ç–∞–Ω–æ–∫:</strong> {selectedMachine?.machineName}</p>
          <p><strong>–í—Ä–µ–º—è:</strong> {formatTime(operation.estimatedTime)}</p>
          <p><strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> {operation.priority}</p>
        </div>
      ),
      okText: '–î–∞, –Ω–∞–∑–Ω–∞—á–∏—Ç—å',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      onOk: () => {
        if (selectedMachine) {
          assignOperationMutation.mutate({
            operationId: operation.operationId.toString(),
            machineId: parseInt(selectedMachine.id)
          });
        }
      },
    });
  };

  const formatTime = (minutes: number): string => {
    if (!minutes || minutes <= 0) return '0 –º–∏–Ω';
    
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    
    if (hours === 0) {
      return `${remainingMinutes} –º–∏–Ω`;
    } else if (remainingMinutes === 0) {
      return `${hours} —á`;
    } else {
      return `${hours} —á ${remainingMinutes} –º–∏–Ω`;
    }
  };

  const getMachineTypeColor = (type: string) => {
    switch (type) {
      case 'MILLING':
        return '#1890ff';
      case 'TURNING':
        return '#52c41a';
      default:
        return '#666';
    }
  };

  const getMachineIcon = (type: string) => {
    switch (type) {
      case 'TURNING':
        return <ToolOutlined rotate={90} />;
      default:
        return <ToolOutlined />;
    }
  };

  const steps = [
    {
      title: '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞–Ω–æ–∫',
      description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–Ω–∫–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
      icon: <ToolOutlined />,
    },
    {
      title: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
      description: '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
      icon: <ThunderboltOutlined />,
    },
    {
      title: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã',
      description: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
      icon: <CheckCircleOutlined />,
    },
  ];

  const handleClose = () => {
    setCurrentStep(0);
    setPlanningResult(null);
    setShowResultModal(false);
    setSelectedOperation(null);
    setSelectedOrder(null);
    setShowOperationModal(false);
    onCancel();
  };

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  React.useEffect(() => {
    if (visible && selectedMachine) {
      console.log('üîÑ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã–ª–æ—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
      setCurrentStep(0);
      setPlanningResult(null);
      setShowResultModal(false);
    }
  }, [visible, selectedMachine]);

  if (!selectedMachine) {
    console.log('üö´ PlanningModal: No selectedMachine, returning null');
    return null;
  }

  const machineTypeColor = getMachineTypeColor(selectedMachine.machineType);

  console.log('‚úÖ PlanningModal: Rendering modal with machine:', selectedMachine.machineName);

  return (
    <>
      <Modal
        title={
          <Space>
            <span style={{ color: '#faad14', fontSize: '20px' }}>
              <ThunderboltOutlined />
            </span>
            <span style={{ fontSize: '18px', fontWeight: 'bold' }}>
              üÜï –£–õ–£–ß–®–ï–ù–ù–û–ï –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–Ω–∫–∞ "{selectedMachine.machineName}"
            </span>
          </Space>
        }
        open={visible}
        onCancel={handleClose}
        width={900}
        style={{ borderRadius: '12px' }}
        footer={null}
      >
        <Steps 
          current={currentStep} 
          items={steps} 
          style={{ marginBottom: 32 }}
          size="default"
        />

        {currentStep === 0 && (
          <>
            {/* –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã */}
            {systemAnalysis?.success && (
              <Alert
                message="üîç –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã"
                description={
                  <div>
                    <p><strong>–°—Ç–∞–Ω–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ:</strong> {systemAnalysis.analysis.machines.available} –∏–∑ {systemAnalysis.analysis.machines.active}</p>
                    <p><strong>–û–ø–µ—Ä–∞—Ü–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:</strong> {systemAnalysis.analysis.operations.inProgress}</p>
                    <p><strong>–ó–∞–∫–∞–∑–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏:</strong> {systemAnalysis.analysis.orders.withPriorities}</p>
                    {systemAnalysis.analysis.recommendations.length > 0 && (
                      <Button 
                        type="link" 
                        size="small"
                        onClick={() => setShowAnalysis(!showAnalysis)}
                        icon={<InfoCircleOutlined />}
                      >
                        {showAnalysis ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                      </Button>
                    )}
                  </div>
                }
                type="info"
                showIcon
                style={{ marginBottom: 24, borderRadius: '8px' }}
              />
            )}

            {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã */}
            {showAnalysis && systemAnalysis?.analysis?.recommendations && (
              <Card title="üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã" style={{ marginBottom: 24, borderRadius: '8px' }}>
                {systemAnalysis.analysis.recommendations.map((rec: any, index: number) => (
                  <Alert
                    key={index}
                    message={rec.message}
                    description={rec.action}
                    type={rec.type}
                    showIcon
                    style={{ marginBottom: 8 }}
                  />
                ))}
              </Card>
            )}

            <Alert
              message="üÜï –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
              description="–ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–±–æ—Ç–µ, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑."
              type="success"
              showIcon
              style={{ marginBottom: 24, borderRadius: '8px' }}
            />

            <div style={{ textAlign: 'center' }}>
              <Space size="large">
                <Button
                  type="primary"
                  size="large"
                  icon={<ThunderboltOutlined />}
                  onClick={handleStartImprovedPlanning}
                  loading={improvedPlanningMutation.isPending}
                  style={{ 
                    height: '48px',
                    fontSize: '16px',
                    borderRadius: '8px',
                    minWidth: '260px',
                    backgroundColor: '#faad14',
                    borderColor: '#faad14',
                  }}
                >
                  üÜï –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                </Button>

                <Button
                  size="large"
                  icon={<InfoCircleOutlined />}
                  onClick={handleDemoImprovedPlanning}
                  loading={demoImprovedMutation.isPending}
                  style={{ 
                    height: '48px',
                    fontSize: '16px',
                    borderRadius: '8px',
                    minWidth: '220px'
                  }}
                >
                  üéØ –î–µ–º–æ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ
                </Button>
              </Space>
            </div>
          </>
        )}

        {currentStep === 1 && (
          <div style={{ textAlign: 'center', padding: '80px 50px' }}>
            <Spin size="large" />
            <div style={{ marginTop: 24 }}>
              <Title level={3} style={{ marginBottom: '8px' }}>üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...</Title>
              <Text type="secondary" style={{ fontSize: '16px' }}>
                –ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ä–∞–±–æ—Ç–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω–∫–æ–≤ –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
              </Text>
            </div>
          </div>
        )}

        {currentStep === 2 && planningResult && (
          <Result
            status={planningResult.success ? "success" : "warning"}
            title={planningResult.success ? "‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ" : "‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"}
            subTitle={
              planningResult.success 
                ? `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${planningResult.result.selectedOrdersCount} –∑–∞–∫–∞–∑–æ–≤, ${planningResult.result.operationsQueueLength} –æ–ø–µ—Ä–∞—Ü–∏–π`
                : `${planningResult.result.warnings.length} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ`
            }
            extra={[
              <Button 
                type="primary" 
                key="view"
                size="large"
                onClick={() => setShowResultModal(true)}
                style={{ borderRadius: '8px', backgroundColor: '#faad14', borderColor: '#faad14' }}
              >
                üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏
              </Button>,
              <Button 
                key="restart"
                size="large"
                onClick={() => setCurrentStep(0)}
                style={{ borderRadius: '8px' }}
              >
                üîÑ –ù–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
              </Button>,
            ]}
          >
            {planningResult.result.hasWarnings && (
              <Alert
                message="‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
                description={
                  <ul style={{ margin: 0, paddingLeft: '20px' }}>
                    {planningResult.result.warnings.map((warning, index) => (
                      <li key={index}>{warning}</li>
                    ))}
                  </ul>
                }
                type="warning"
                showIcon
                style={{ marginBottom: 24, borderRadius: '8px' }}
              />
            )}

            <div style={{ marginBottom: 24 }}>
              <Card style={{ borderRadius: '8px', backgroundColor: '#f6ffed' }}>
                <Statistic
                  title="–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                  value={planningResult.result.totalTimeFormatted}
                  valueStyle={{ color: '#52c41a', fontSize: '24px', fontWeight: 'bold' }}
                  prefix={<ClockCircleOutlined style={{ color: '#52c41a' }} />}
                />
              </Card>
            </div>
          </Result>
        )}
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ */}
      <Modal
        title={<span style={{ fontSize: '18px', fontWeight: 'bold' }}>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</span>}
        open={showResultModal}
        onCancel={() => setShowResultModal(false)}
        width={1000}
        style={{ borderRadius: '12px' }}
        footer={[
          <Button 
            key="close" 
            size="large"
            onClick={() => setShowResultModal(false)}
            style={{ borderRadius: '8px' }}
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        ]}
      >
        {planningResult && (
          <div>
            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <Row gutter={24} style={{ marginBottom: 32 }}>
              <Col span={6}>
                <Card size="small" style={{ textAlign: 'center', borderRadius: '8px' }}>
                  <Statistic
                    title="–ó–∞–∫–∞–∑–æ–≤"
                    value={planningResult.result.selectedOrdersCount}
                    prefix={<InfoCircleOutlined style={{ color: '#1890ff' }} />}
                    valueStyle={{ color: '#1890ff' }}
                  />
                </Card>
              </Col>
              <Col span={6}>
                <Card size="small" style={{ textAlign: 'center', borderRadius: '8px' }}>
                  <Statistic
                    title="–û–ø–µ—Ä–∞—Ü–∏–π"
                    value={planningResult.result.operationsQueueLength}
                    prefix={<ToolOutlined style={{ color: '#722ed1' }} />}
                    valueStyle={{ color: '#722ed1' }}
                  />
                </Card>
              </Col>
              <Col span={6}>
                <Card size="small" style={{ textAlign: 'center', borderRadius: '8px' }}>
                  <Statistic
                    title="–û–±—â–µ–µ –≤—Ä–µ–º—è"
                    value={planningResult.result.totalTimeFormatted}
                    prefix={<ClockCircleOutlined style={{ color: '#52c41a' }} />}
                    valueStyle={{ color: '#52c41a' }}
                  />
                </Card>
              </Col>
              <Col span={6}>
                <Card size="small" style={{ textAlign: 'center', borderRadius: '8px' }}>
                  <Statistic
                    title="–°—Ç–∞—Ç—É—Å"
                    value={planningResult.success ? '–£—Å–ø–µ—à–Ω–æ' : '–° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏'}
                    prefix={planningResult.success ? <CheckCircleOutlined style={{ color: '#52c41a' }} /> : <WarningOutlined style={{ color: '#faad14' }} />}
                    valueStyle={{ color: planningResult.success ? '#52c41a' : '#faad14' }}
                  />
                </Card>
              </Col>
            </Row>

            {/* –ê–Ω–∞–ª–∏–∑ */}
            <Collapse 
              style={{ marginBottom: 24 }}
              items={[
                {
                  key: 'analysis',
                  label: 'üìà –ê–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
                  children: (
                    <Row gutter={16}>
                      <Col span={12}>
                        <Card size="small" title="–ü–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π">
                          {Object.entries(planningResult.analysis.operationsByType).map(([type, count]) => (
                            <div key={type} style={{ marginBottom: 8 }}>
                              <Tag color="blue">{type}</Tag>
                              <Text strong>{count}</Text>
                            </div>
                          ))}
                        </Card>
                      </Col>
                      <Col span={12}>
                        <Card size="small" title="–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º">
                          {Object.entries(planningResult.analysis.operationsByPriority).map(([priority, count]) => (
                            <div key={priority} style={{ marginBottom: 8 }}>
                              <Tag color={priority.includes('1') ? 'red' : priority.includes('2') ? 'orange' : 'green'}>
                                –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority.replace('priority_', '')}
                              </Tag>
                              <Text strong>{count}</Text>
                            </div>
                          ))}
                        </Card>
                      </Col>
                    </Row>
                  )
                }
              ]}
            />

            {/* –û—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–π */}
            <Title level={4} style={{ marginBottom: '20px', color: '#262626' }}>
              üìã –û—á–µ—Ä–µ–¥—å –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å—Ç–∞–Ω–∫–∞ "{selectedMachine.machineName}"
            </Title>
            
            {planningResult.result.details.operationsQueue && planningResult.result.details.operationsQueue.length > 0 && (
              <Alert
                message="üéØ –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞–Ω–æ–∫"
                description="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞–Ω–æ–∫ {selectedMachine.machineName}"
                type="info"
                showIcon
                style={{ marginBottom: 16, borderRadius: '8px' }}
              />
            )}
            
            {planningResult.result.details.operationsQueue && planningResult.result.details.operationsQueue.length > 0 ? (
              <List
                dataSource={planningResult.result.details.operationsQueue}
                renderItem={(operation, index) => {
                  const order = planningResult.result.details.selectedOrders.find(o => o.id === operation.orderId);
                  const drawingNumber = order?.drawingNumber || `–ó–∞–∫–∞–∑ #${operation.orderId}`;
                  
                  return (
                    <List.Item 
                      style={{ 
                        padding: '20px',
                        borderRadius: '12px',
                        marginBottom: '12px',
                        border: selectedOperationForAssign?.operationId === operation.operationId ? '2px solid #faad14' : '1px solid #f0f0f0',
                        background: selectedOperationForAssign?.operationId === operation.operationId 
                          ? 'linear-gradient(135deg, #fff7e6 0%, #fffbe6 100%)' 
                          : 'linear-gradient(135deg, #fff 0%, #fafafa 100%)',
                        boxShadow: selectedOperationForAssign?.operationId === operation.operationId 
                          ? '0 4px 16px rgba(250, 173, 20, 0.3)' 
                          : '0 2px 8px rgba(0, 0, 0, 0.04)',
                        cursor: 'pointer',
                        transition: 'all 0.3s ease'
                      }}
                      onClick={() => handleSelectOperation(operation)}
                      onMouseEnter={(e) => {
                        if (selectedOperationForAssign?.operationId !== operation.operationId) {
                          e.currentTarget.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.1)';
                          e.currentTarget.style.transform = 'translateY(-2px)';
                        }
                      }}
                      onMouseLeave={(e) => {
                        if (selectedOperationForAssign?.operationId !== operation.operationId) {
                          e.currentTarget.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.04)';
                          e.currentTarget.style.transform = 'translateY(0)';
                        }
                      }}
                    >
                      <List.Item.Meta
                        avatar={
                          <div style={{
                            width: '40px',
                            height: '40px',
                            borderRadius: '20px',
                            background: 'linear-gradient(135deg, #faad14 0%, #fa8c16 100%)',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            color: 'white',
                            fontWeight: 'bold',
                            fontSize: '16px'
                          }}>
                            {index + 1}
                          </div>
                        }
                        title={
                          <Space wrap>
                            <span style={{ fontWeight: 'bold', fontSize: '16px', color: '#262626' }}>
                              –ß–µ—Ä—Ç–µ–∂ {drawingNumber}
                            </span>
                            <Tag 
                              color="blue" 
                              style={{ 
                                borderRadius: '16px',
                                padding: '4px 12px',
                                fontSize: '12px',
                                fontWeight: '500'
                              }}
                            >
                              –û–ø–µ—Ä–∞—Ü–∏—è {operation.operationNumber || operation.operationId}
                            </Tag>
                          </Space>
                        }
                        description={
                          <div style={{ marginTop: '8px' }}>
                            <Space wrap size={[8, 8]}>
                              <Tag color="green" style={{ borderRadius: '16px', padding: '4px 12px', fontSize: '12px' }}>
                                üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {operation.priority}
                              </Tag>
                              <Tag color="orange" style={{ borderRadius: '16px', padding: '4px 12px', fontSize: '12px' }}>
                                ‚è±Ô∏è {formatTime(operation.estimatedTime)}
                              </Tag>
                              <Tag color="purple" style={{ borderRadius: '16px', padding: '4px 12px', fontSize: '12px' }}>
                                üè≠ {selectedMachine.machineName}
                              </Tag>
                              <Tag color="cyan" style={{ borderRadius: '16px', padding: '4px 12px', fontSize: '12px' }}>
                                üîß {operation.operationType}
                              </Tag>
                            </Space>
                          </div>
                        }
                      />
                    </List.Item>
                  );
                }}
              />
            ) : (
              <Alert
                message="‚ùå –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
                description={
                  <div>
                    <p style={{ marginBottom: '8px' }}>
                      –î–ª—è —Å—Ç–∞–Ω–∫–∞ "{selectedMachine.machineName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
                    </p>
                    {planningResult.result.warnings.length > 0 && (
                      <div>
                        <p><strong>–ü—Ä–∏—á–∏–Ω—ã:</strong></p>
                        <ul style={{ margin: 0, paddingLeft: '20px' }}>
                          {planningResult.result.warnings.map((warning, index) => (
                            <li key={index}>{warning}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                }
                type="warning"
                showIcon
                style={{ 
                  borderRadius: '8px',
                  backgroundColor: '#fff7e6',
                  borderColor: '#ffd591'
                }}
              />
            )}
          </div>
        )}
      </Modal>
    </>
  );
};

export default PlanningModalImproved;