/**
 * @file: StableExcelImporter.tsx
 * @description: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ Excel —Ñ–∞–π–ª–æ–≤
 * @dependencies: antd, SheetJS (–≥–ª–æ–±–∞–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω)
 * @created: 2025-06-09
 * @updated: 2025-06-09 // –ò–°–ü–†–ê–í–õ–ï–ù–û: TypeScript –æ—à–∏–±–∫–∏
 */
import React, { useState, useRef } from 'react';
import {
  Modal,
  Upload,
  Button,
  Table,
  Progress,
  Alert,
  Typography,
  Space,
  Card,
  Divider,
  Tag,
  notification,
  Spin
} from 'antd';
import {
  InboxOutlined,
  FileExcelOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  DeleteOutlined,
  UploadOutlined
} from '@ant-design/icons';
// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ ordersApi
import { ordersApi } from '../services/ordersApi';

const { Dragger } = Upload;
const { Title, Text, Paragraph } = Typography;

interface StableExcelImporterProps {
  visible: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ operations –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CreateOrderDto
interface ParsedOrder {
  drawingNumber: string;
  quantity: number;
  deadline: string;
  priority: number;
  workType: string;
  operations?: any[]; // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
}

interface ConnectionStatus {
  online: boolean;
  checking: boolean;
}

export const StableExcelImporter: React.FC<StableExcelImporterProps> = ({
  visible,
  onClose,
  onSuccess,
}) => {
  const [loading, setLoading] = useState(false);
  const [parsedOrders, setParsedOrders] = useState<ParsedOrder[]>([]);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>({
    online: false,
    checking: true
  });
  const [csvData, setCsvData] = useState('');
  const [currentStep, setCurrentStep] = useState<'upload' | 'preview' | 'uploading' | 'complete'>('upload');
  const fileInputRef = useRef<HTMLInputElement>(null);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è timeout –∏–∑ fetch
  const checkApiConnection = async (): Promise<boolean> => {
    setConnectionStatus({ online: false, checking: true });
    
    try {
      // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);
      
      const response = await fetch('/api/health', { 
        method: 'GET',
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      const isOnline = response.ok;
      setConnectionStatus({ online: isOnline, checking: false });
      return isOnline;
    } catch (error) {
      setConnectionStatus({ online: false, checking: false });
      return false;
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∞
  React.useEffect(() => {
    if (visible) {
      checkApiConnection();
      resetState();
    }
  }, [visible]);

  const resetState = () => {
    setParsedOrders([]);
    setUploadProgress(0);
    setCsvData('');
    setCurrentStep('upload');
    setLoading(false);
  };

  // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
  const parseDate = (dateStr: string): string => {
    if (!dateStr) {
      // –î–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü
      const date = new Date();
      date.setMonth(date.getMonth() + 1);
      return date.toISOString().split('T')[0];
    }

    try {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
      const normalizedDate = dateStr.replace(/\./g, '-').replace(/\//g, '-');
      const date = new Date(normalizedDate);
      
      if (!isNaN(date.getTime())) {
        return date.toISOString().split('T')[0];
      }
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É:', dateStr);
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞—Ç—É —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü
    const fallbackDate = new Date();
    fallbackDate.setMonth(fallbackDate.getMonth() + 1);
    return fallbackDate.toISOString().split('T')[0];
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ SheetJS
  const handleExcelFile = (file: File) => {
    setLoading(true);
    
    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É XLSX
        const data = new Uint8Array(e.target?.result as ArrayBuffer);
        const workbook = (window as any).XLSX.read(data, { type: 'array' });
        
        const firstSheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[firstSheetName];
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV —Å —Ç–∞–±—É–ª—è—Ü–∏–µ–π
        const csvText = (window as any).XLSX.utils.sheet_to_csv(worksheet, { FS: '\t' });
        
        console.log('‚úÖ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω —á–µ—Ä–µ–∑ SheetJS');
        console.log('üìä CSV –¥–∞–Ω–Ω—ã–µ:', csvText.substring(0, 200) + '...');
        
        setCsvData(csvText);
        processCSVData(csvText);
        
        notification.success({
          message: '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω',
          description: `Excel —Ñ–∞–π–ª "${file.name}" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`
        });
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel:', error);
        notification.error({
          message: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞',
          description: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Excel —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.'
        });
      } finally {
        setLoading(false);
      }
    };
    
    reader.readAsArrayBuffer(file);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV –¥–∞–Ω–Ω—ã—Ö
  const processCSVData = (csvText: string) => {
    try {
      const lines = csvText.split('\n').filter(line => line.trim());
      
      if (lines.length < 2) {
        throw new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ');
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
      const separator = lines[0].includes('\t') ? '\t' : ';';
      console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å:', separator === '\t' ? 'TAB' : 'SEMICOLON');

      const orders: ParsedOrder[] = [];
      const errors: string[] = [];

      // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
      for (let i = 1; i < lines.length; i++) {
        try {
          const values = lines[i].split(separator).map(v => v.trim());
          
          if (values.length >= 2 && values[0] && values[1]) {
            const order: ParsedOrder = {
              drawingNumber: values[0],
              quantity: parseInt(values[1]) || 1,
              deadline: parseDate(values[2]),
              priority: Math.max(1, Math.min(3, parseInt(values[3]) || 2)),
              workType: values[4] || '–û–±—Ä–∞–±–æ—Ç–∫–∞',
              operations: [] // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
            };
            
            orders.push(order);
            console.log(`‚úÖ –°—Ç—Ä–æ–∫–∞ ${i + 1}: ${order.drawingNumber} (${order.quantity} —à—Ç.)`);
          } else {
            errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö`);
          }
        } catch (error) {
          errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: ${error}`);
        }
      }

      if (orders.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.');
      }

      setParsedOrders(orders);
      setCurrentStep('preview');

      if (errors.length > 0) {
        notification.warning({
          message: '–ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞',
          description: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${errors.length} —Å—Ç—Ä–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏`
        });
      } else {
        notification.success({
          message: '–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã',
          description: `–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤`
        });
      }

    } catch (error) {
      notification.error({
        message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        description: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ CSV –¥–∞–Ω–Ω—ã—Ö
  const handleCSVPaste = () => {
    if (!csvData.trim()) {
      notification.warning({
        message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        description: '–í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ'
      });
      return;
    }

    processCSVData(csvData);
  };

  // –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const clearDatabase = async () => {
    try {
      setLoading(true);
      
      const result = await ordersApi.deleteAll();
      
      notification.success({
        message: '–ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞',
        description: `–£–¥–∞–ª–µ–Ω–æ ${result.deleted} –∑–∞–∫–∞–∑–æ–≤`
      });
      
    } catch (error) {
      notification.error({
        message: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö'
      });
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const uploadToDatabase = async () => {
    if (parsedOrders.length === 0) {
      notification.warning({
        message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
        description: '–°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ Excel —Ñ–∞–π–ª'
      });
      return;
    }

    try {
      setCurrentStep('uploading');
      setUploadProgress(0);
      
      let created = 0;
      let errors = 0;
      const total = parsedOrders.length;

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–∫–∞–∑—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      for (let i = 0; i < parsedOrders.length; i++) {
        try {
          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É –¥–ª—è API
          await ordersApi.create(parsedOrders[i] as any);
          created++;
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑: ${parsedOrders[i].drawingNumber}`);
        } catch (error) {
          errors++;
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${parsedOrders[i].drawingNumber}:`, error);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        const progress = Math.round((i + 1) / total * 100);
        setUploadProgress(progress);

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      }

      setCurrentStep('complete');

      const successRate = Math.round(created / total * 100);
      
      if (created > 0) {
        notification.success({
          message: '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
          description: `–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ${created} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ ${total} (${successRate}%)`
        });
        
        // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
        setTimeout(() => {
          onSuccess();
          onClose();
        }, 1500);
      } else {
        notification.error({
          message: '–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å',
          description: `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ ${total}`
        });
      }

    } catch (error) {
      notification.error({
        message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
        description: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö'
      });
      setCurrentStep('preview');
    }
  };

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Upload –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const uploadProps = {
    accept: '.xlsx,.xls',
    beforeUpload: (file: File) => {
      handleExcelFile(file);
      return false; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É
    },
    showUploadList: false,
    multiple: false
  };

  // –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–≤—å—é
  const previewColumns = [
    {
      title: '–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞',
      dataIndex: 'drawingNumber',
      key: 'drawingNumber',
      width: 150,
    },
    {
      title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      dataIndex: 'quantity',
      key: 'quantity',
      width: 100,
    },
    {
      title: '–°—Ä–æ–∫',
      dataIndex: 'deadline',
      key: 'deadline',
      width: 120,
    },
    {
      title: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
      dataIndex: 'priority',
      key: 'priority',
      width: 100,
      render: (priority: number) => {
        const colors = { 1: 'red', 2: 'orange', 3: 'green' };
        const labels = { 1: '–í—ã—Å–æ–∫–∏–π', 2: '–°—Ä–µ–¥–Ω–∏–π', 3: '–ù–∏–∑–∫–∏–π' };
        return <Tag color={colors[priority as keyof typeof colors]}>{labels[priority as keyof typeof labels]}</Tag>;
      }
    },
    {
      title: '–¢–∏–ø —Ä–∞–±–æ—Ç—ã',
      dataIndex: 'workType',
      key: 'workType',
      ellipsis: true,
    },
  ];

  return (
    <Modal
      title="üéØ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç Excel —Ñ–∞–π–ª–æ–≤"
      open={visible}
      onCancel={onClose}
      width={900}
      footer={null}
      destroyOnClose
    >
      <div style={{ maxHeight: '70vh', overflowY: 'auto' }}>
        {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        <Alert
          message={
            connectionStatus.checking ? (
              <><Spin size="small" /> –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...</>
            ) : connectionStatus.online ? (
              <><CheckCircleOutlined style={{ color: '#52c41a' }} /> –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω</>
            ) : (
              <><ExclamationCircleOutlined style={{ color: '#ff4d4f' }} /> –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend.</>
            )
          }
          type={connectionStatus.online ? 'success' : 'warning'}
          style={{ marginBottom: 20 }}
        />

        {/* –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ */}
        {currentStep === 'upload' && (
          <Card title="üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞" style={{ marginBottom: 20 }}>
            <Dragger {...uploadProps} style={{ marginBottom: 20 }}>
              <p className="ant-upload-drag-icon">
                <InboxOutlined style={{ fontSize: 48, color: '#1890ff' }} />
              </p>
              <p className="ant-upload-text">
                <strong>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ Excel —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</strong>
              </p>
              <p className="ant-upload-hint">
                –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã .xlsx –∏ .xls
              </p>
            </Dragger>

            <Divider>–ò–õ–ò</Divider>

            <Card size="small" title="üìã –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel">
              <Paragraph>
                –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel (Ctrl+C) –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ:
              </Paragraph>
              
              <textarea
                style={{
                  width: '100%',
                  height: 150,
                  fontFamily: 'Courier New, monospace',
                  fontSize: 14,
                  border: '1px solid #d9d9d9',
                  borderRadius: 6,
                  padding: 12,
                  resize: 'vertical'
                }}
                placeholder={`–í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel –∑–¥–µ—Å—å...

–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:
–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞	–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ	–°—Ä–æ–∫	–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç	–¢–∏–ø —Ä–∞–±–æ—Ç—ã
DWG-001	10	2025-06-15	1	–§—Ä–µ–∑–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
DWG-002	5	2025-06-20	2	–¢–æ–∫–∞—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞`}
                value={csvData}
                onChange={(e) => setCsvData(e.target.value)}
              />
              
              <Button
                type="primary"
                icon={<FileExcelOutlined />}
                onClick={handleCSVPaste}
                style={{ marginTop: 10 }}
                disabled={!csvData.trim()}
              >
                –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
              </Button>
            </Card>
          </Card>
        )}

        {/* –®–∞–≥ 2: –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö */}
        {currentStep === 'preview' && (
          <Card title={`üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä (${parsedOrders.length} –∑–∞–∫–∞–∑–æ–≤)`}>
            <Table
              columns={previewColumns}
              dataSource={parsedOrders.slice(0, 10)} // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
              rowKey="drawingNumber"
              pagination={false}
              size="small"
              style={{ marginBottom: 20 }}
            />
            
            {parsedOrders.length > 10 && (
              <Text type="secondary">
                ... –∏ –µ—â–µ {parsedOrders.length - 10} –∑–∞–∫–∞–∑–æ–≤
              </Text>
            )}

            <Divider />

            <Space>
              <Button
                type="primary"
                danger
                icon={<DeleteOutlined />}
                onClick={clearDatabase}
                loading={loading}
              >
                –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
              </Button>
              
              <Button
                type="primary"
                icon={<UploadOutlined />}
                onClick={uploadToDatabase}
                disabled={!connectionStatus.online}
              >
                –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –ë–î ({parsedOrders.length} –∑–∞–∫–∞–∑–æ–≤)
              </Button>
              
              <Button onClick={() => setCurrentStep('upload')}>
                –ù–∞–∑–∞–¥
              </Button>
            </Space>
          </Card>
        )}

        {/* –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ */}
        {currentStep === 'uploading' && (
          <Card title="üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É">
            <Progress percent={uploadProgress} status="active" />
            <Text style={{ display: 'block', textAlign: 'center', marginTop: 10 }}>
              –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã... {uploadProgress}%
            </Text>
          </Card>
        )}

        {/* –®–∞–≥ 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ */}
        {currentStep === 'complete' && (
          <Card title="üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!">
            <Alert
              message="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
              description="–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—Å—è."
              type="success"
              showIcon
            />
          </Card>
        )}

        {loading && (
          <div style={{ textAlign: 'center', padding: 20 }}>
            <Spin size="large" />
            <div style={{ marginTop: 10 }}>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª...</div>
          </div>
        )}
      </div>
    </Modal>
  );
};

export default StableExcelImporter;
