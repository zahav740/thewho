/**
 * @file: PdfDebugViewer.tsx
 * @description: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ PDF –ø—Ä–µ–≤—å—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PDF.js
 * @created: 2025-06-21
 * @updated: 2025-06-21 - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ PDF.js –¥–ª—è iframe –ø—Ä–æ–±–ª–µ–º
 */
import React, { useState, useEffect } from 'react';
import { Modal, Spin, Alert, Button, Card, Typography, Space, Divider, Switch } from 'antd';
import { 
  CloseOutlined, 
  DownloadOutlined, 
  ExpandOutlined, 
  BugOutlined,
  FileTextOutlined,
  EyeOutlined 
} from '@ant-design/icons';

const { Text, Title } = Typography;

interface PdfDebugViewerProps {
  visible: boolean;
  onClose: () => void;
  pdfUrl: string;
  fileName?: string;
  allowDownload?: boolean;
}

export const PdfDebugViewer: React.FC<PdfDebugViewerProps> = ({
  visible,
  onClose,
  pdfUrl,
  fileName = 'document.pdf',
  allowDownload = true,
}) => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [debugInfo, setDebugInfo] = useState<any>(null);
  const [viewMode, setViewMode] = useState<'iframe' | 'pdfjs' | 'object'>('pdfjs');

  useEffect(() => {
    if (visible && pdfUrl) {
      checkPdfAvailability();
    }
  }, [visible, pdfUrl]);

  const checkPdfAvailability = async () => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PDF:', pdfUrl);
    
    try {
      const response = await fetch(pdfUrl, { method: 'HEAD' });
      
      const info = {
        url: pdfUrl,
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries()),
        accessible: response.ok,
        timestamp: new Date().toISOString()
      };
      
      console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PDF:', info);
      setDebugInfo(info);
      
      if (!response.ok) {
        setError(`HTTP ${response.status}: ${response.statusText}`);
      } else {
        setError(null);
      }
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PDF:', err);
      setError(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${err.message}`);
      setDebugInfo({
        url: pdfUrl,
        error: err.message,
        timestamp: new Date().toISOString()
      });
    }
    
    setLoading(false);
  };

  const handleDownload = () => {
    const link = document.createElement('a');
    link.href = pdfUrl;
    link.download = fileName;
    link.target = '_blank';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleOpenInNewTab = () => {
    window.open(pdfUrl, '_blank');
  };

  const handleTestDirectAccess = () => {
    window.open(pdfUrl, '_blank');
  };

  // PDF.js URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ PDF
  const getPdfJsUrl = () => {
    return `https://mozilla.github.io/pdf.js/web/viewer.html?file=${encodeURIComponent(pdfUrl)}`;
  };

  // –û–±—ä–µ–∫—Ç embed URL
  const getObjectUrl = () => {
    return `${pdfUrl}#toolbar=1&navpanes=1&scrollbar=1&view=FitH`;
  };

  const renderPdfViewer = () => {
    if (loading) {
      return (
        <div style={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          zIndex: 1000,
          textAlign: 'center'
        }}>
          <Spin size="large" />
          <div style={{ marginTop: 16 }}>
            –ó–∞–≥—Ä—É–∑–∫–∞ PDF...
          </div>
        </div>
      );
    }

    if (error) {
      return (
        <div style={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          zIndex: 1000,
          width: '80%',
        }}>
          <Alert
            message="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF"
            description={
              <div>
                <div>{error}</div>
                <div style={{ marginTop: 8, fontSize: '12px' }}>
                  URL: <Text code>{pdfUrl}</Text>
                </div>
              </div>
            }
            type="error"
            showIcon
            action={
              <Space direction="vertical">
                <Button size="small" onClick={handleTestDirectAccess}>
                  –û—Ç–∫—Ä—ã—Ç—å –Ω–∞–ø—Ä—è–º—É—é
                </Button>
                <Button size="small" onClick={checkPdfAvailability}>
                  –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
                </Button>
              </Space>
            }
          />
        </div>
      );
    }

    // –†–µ–Ω–¥–µ—Ä–∏–º PDF –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    switch (viewMode) {
      case 'pdfjs':
        return (
          <iframe
            src={getPdfJsUrl()}
            style={{
              width: '100%',
              height: '100%',
              border: 'none',
            }}
            title={fileName}
          />
        );

      case 'object':
        return (
          <object
            data={getObjectUrl()}
            type="application/pdf"
            style={{
              width: '100%',
              height: '100%',
              border: 'none',
            }}
          >
            <div style={{ padding: '20px', textAlign: 'center' }}>
              <Alert
                message="PDF –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω"
                description="–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä PDF"
                type="warning"
                action={
                  <Button onClick={handleOpenInNewTab}>
                    –û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                  </Button>
                }
              />
            </div>
          </object>
        );

      case 'iframe':
      default:
        return (
          <iframe
            src={`${pdfUrl}#toolbar=1&navpanes=1&scrollbar=1&view=FitH`}
            style={{
              width: '100%',
              height: '100%',
              border: 'none',
            }}
            title={fileName}
          />
        );
    }
  };

  return (
    <Modal
      title={
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <span><FileTextOutlined style={{ marginRight: 8 }} />{fileName}</span>
          <div>
            <Button
              type="text"
              icon={<BugOutlined />}
              onClick={checkPdfAvailability}
              style={{ marginRight: 8 }}
              title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"
            />
            {allowDownload && (
              <Button
                type="text"
                icon={<DownloadOutlined />}
                onClick={handleDownload}
                style={{ marginRight: 8 }}
                title="–°–∫–∞—á–∞—Ç—å PDF"
              />
            )}
            <Button
              type="text"
              icon={<ExpandOutlined />}
              onClick={handleOpenInNewTab}
              style={{ marginRight: 8 }}
              title="–û—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ"
            />
            <Button
              type="text"
              icon={<CloseOutlined />}
              onClick={onClose}
              title="–ó–∞–∫—Ä—ã—Ç—å"
            />
          </div>
        </div>
      }
      open={visible}
      onCancel={onClose}
      width="95vw"
      style={{ top: 10 }}
      bodyStyle={{ height: '85vh', padding: 0 }}
      footer={null}
      closable={false}
    >
      <div style={{ height: '100%', display: 'flex' }}>
        {/* –ü–∞–Ω–µ–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ */}
        <div style={{ 
          width: '300px', 
          borderRight: '1px solid #f0f0f0',
          padding: '16px',
          overflow: 'auto',
          backgroundColor: '#fafafa'
        }}>
          <Title level={5}>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PDF</Title>
          
          <Card size="small" style={{ marginBottom: 16 }}>
            <Text strong>URL:</Text>
            <br />
            <Text code style={{ fontSize: '11px', wordBreak: 'break-all' }}>
              {pdfUrl}
            </Text>
          </Card>

          {debugInfo && (
            <Card size="small" style={{ marginBottom: 16 }}>
              <Text strong>–°—Ç–∞—Ç—É—Å HTTP:</Text>
              <br />
              <Text type={debugInfo.accessible ? 'success' : 'danger'}>
                {debugInfo.status} {debugInfo.statusText}
              </Text>
              <br />
              <Text type="secondary" style={{ fontSize: '12px' }}>
                –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {new Date(debugInfo.timestamp).toLocaleTimeString()}
              </Text>
            </Card>
          )}

          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
          <Card size="small" style={{ marginBottom: 16 }}>
            <Text strong>–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</Text>
            <br />
            <Space direction="vertical" style={{ width: '100%', marginTop: 8 }}>
              <Button
                size="small"
                type={viewMode === 'pdfjs' ? 'primary' : 'default'}
                onClick={() => setViewMode('pdfjs')}
                block
              >
                üìÑ PDF.js (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
              </Button>
              <Button
                size="small"
                type={viewMode === 'object' ? 'primary' : 'default'}
                onClick={() => setViewMode('object')}
                block
              >
                üñºÔ∏è Object —ç–ª–µ–º–µ–Ω—Ç
              </Button>
              <Button
                size="small"
                type={viewMode === 'iframe' ? 'primary' : 'default'}
                onClick={() => setViewMode('iframe')}
                block
              >
                üåê Iframe (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
              </Button>
            </Space>
          </Card>

          <Space direction="vertical" style={{ width: '100%' }}>
            <Button 
              size="small" 
              block 
              onClick={handleTestDirectAccess}
              icon={<ExpandOutlined />}
            >
              –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
            </Button>
            
            <Button 
              size="small" 
              block 
              onClick={checkPdfAvailability}
              icon={<BugOutlined />}
            >
              –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
            </Button>
          </Space>

          <Divider />

          <div style={{ fontSize: '12px' }}>
            <Text strong>–†–µ–∂–∏–º—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</Text>
            <ul style={{ margin: '8px 0', paddingLeft: '16px', fontSize: '11px' }}>
              <li><strong>PDF.js</strong> - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Mozilla PDF.js –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</li>
              <li><strong>Object</strong> - –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –±—Ä–∞—É–∑–µ—Ä–∞</li>
              <li><strong>Iframe</strong> - –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è localhost</li>
            </ul>
            
            <Text strong>–ü–æ–º–æ—â—å:</Text>
            <ul style={{ margin: '8px 0', paddingLeft: '16px', fontSize: '11px' }}>
              <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω</li>
              <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</li>
              <li>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</li>
              <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø" –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</li>
            </ul>
          </div>
        </div>

        {/* –û–±–ª–∞—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF */}
        <div style={{ 
          flex: 1, 
          position: 'relative',
          border: '1px solid #d9d9d9',
          margin: '16px',
          borderRadius: '6px',
          overflow: 'hidden'
        }}>
          {renderPdfViewer()}
        </div>
      </div>
    </Modal>
  );
};
