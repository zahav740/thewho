/**
 * @file: api.config.ts
 * @description: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * @created: 2025-06-21
 * @updated: 2025-06-21 - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
 */

import { getOptimalApiUrl, findAvailableBackend, testApiConnection } from '../utils/network.utils';

// –ö—ç—à –¥–ª—è URL
let cachedApiUrl: string | null = null;
let lastCacheTime: number = 0;
const CACHE_DURATION = 30000; // 30 —Å–µ–∫—É–Ω–¥

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API URL —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
export const getApiUrl = async (): Promise<string> => {
  const now = Date.now();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –æ–Ω —Å–≤–µ–∂–∏–π
  if (cachedApiUrl && (now - lastCacheTime) < CACHE_DURATION) {
    return cachedApiUrl;
  }
  
  try {
    console.log('üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π API URL...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π URL
    const optimalUrl = await getOptimalApiUrl();
    
    if (await testApiConnection(optimalUrl)) {
      cachedApiUrl = optimalUrl;
      lastCacheTime = now;
      console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π API URL: ${optimalUrl}`);
      return optimalUrl;
    }
    
    // –ï—Å–ª–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—â–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    console.log('‚ö†Ô∏è –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã...');
    const availableUrl = await findAvailableBackend();
    
    cachedApiUrl = availableUrl;
    lastCacheTime = now;
    console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π API URL: ${availableUrl}`);
    return availableUrl;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ API URL:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π URL
    const defaultUrl = process.env.REACT_APP_API_URL || 'http://localhost:5100/api';
    cachedApiUrl = defaultUrl;
    lastCacheTime = now;
    return defaultUrl;
  }
};

// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const getApiUrlSync = (): string => {
  return cachedApiUrl || process.env.REACT_APP_API_URL || 'http://localhost:5100/api';
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞
export const resetApiUrl = (): void => {
  cachedApiUrl = null;
  lastCacheTime = 0;
  console.log('üîÑ –ö—ç—à API URL —Å–±—Ä–æ—à–µ–Ω');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API URL
export const refreshApiUrl = async (): Promise<string> => {
  resetApiUrl();
  return await getApiUrl();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export const checkCurrentConnection = async (): Promise<boolean> => {
  if (!cachedApiUrl) {
    return false;
  }
  
  return await testApiConnection(cachedApiUrl);
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API URL –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
let initPromise: Promise<string> | null = null;

export const initializeApi = (): Promise<string> => {
  if (!initPromise) {
    initPromise = getApiUrl();
  }
  return initPromise;
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
initializeApi().then(url => {
  console.log(`üöÄ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${url}`);
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API:', error);
});

// –≠–∫—Å–ø–æ—Ä—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const getBackendUrl = getApiUrl;
