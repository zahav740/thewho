/**
 * @file: useOperationCompletion.ts
 * @description: –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
 * @dependencies: react-query, operations API
 * @created: 2025-06-12
 */
import { useState, useCallback, useEffect } from 'react';
import { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';
import { message, notification } from 'antd';
// –í—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–ª–∏ –∏–º–ø–æ—Ä—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏
// import { useTranslation } from '../i18n';

interface CompletedOperation {
  id: string;
  operationNumber: number;
  operationType: string;
  orderDrawingNumber: string;
  machineName: string;
  machineType: string;
  targetQuantity: number;
  completedQuantity: number;
  progressPercentage: number;
  estimatedTime: number;
  actualTime?: number;
  dayShiftQuantity: number;
  nightShiftQuantity: number;
  dayShiftOperator?: string;
  nightShiftOperator?: string;
  startedAt: string;
  completedAt: string;
}

interface OperationCompletionOptions {
  onOperationClosed?: (operation: CompletedOperation) => void;
  onOperationContinued?: (operation: CompletedOperation) => void;
  onNewOperationPlanned?: (operation: CompletedOperation) => void;
  checkInterval?: number;
  targetQuantity?: number;
}

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–π
const operationCompletionApi = {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  checkCompletedOperations: async (): Promise<CompletedOperation[]> => {
    const response = await fetch('/api/operations/completed-check');
    const data = await response.json();
    return data.success ? data.data : [];
  },

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  closeOperation: async (operationId: string, saveResults: boolean = true) => {
    const response = await fetch(`/api/operations/${operationId}/close`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ saveResults })
    });
    return await response.json();
  },

  // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  continueOperation: async (operationId: string) => {
    const response = await fetch(`/api/operations/${operationId}/continue`, {
      method: 'POST',
    });
    return await response.json();
  },

  // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞
  archiveAndFree: async (operationId: string) => {
    const response = await fetch(`/api/operations/${operationId}/archive-and-free`, {
      method: 'POST',
    });
    return await response.json();
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  getCompletionDetails: async (operationId: string): Promise<CompletedOperation> => {
    const response = await fetch(`/api/operations/${operationId}/completion-details`);
    const data = await response.json();
    return data.success ? data.data : null;
  },
};

export const useOperationCompletion = (options: OperationCompletionOptions = {}) => {
  // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã
  // const { t } = useTranslation();
  const queryClient = useQueryClient();
  
  const {
    onOperationClosed,
    onOperationContinued,
    onNewOperationPlanned,
    checkInterval = 10000,
    targetQuantity = 30,
  } = options;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const [completionModalVisible, setCompletionModalVisible] = useState(false);
  const [currentCompletedOperation, setCurrentCompletedOperation] = useState<CompletedOperation | null>(null);
  const [pendingCompletions, setPendingCompletions] = useState<CompletedOperation[]>([]);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const { data: completedOperations } = useQuery({
    queryKey: ['completed-operations-check'],
    queryFn: operationCompletionApi.checkCompletedOperations,
    refetchInterval: checkInterval,
    enabled: checkInterval > 0,
  });

  // –ú—É—Ç–∞—Ü–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
  const closeOperationMutation = useMutation({
    mutationFn: ({ operationId, saveResults }: { operationId: string; saveResults: boolean }) =>
      operationCompletionApi.closeOperation(operationId, saveResults),
    onSuccess: (response, variables) => {
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      queryClient.invalidateQueries({ queryKey: ['machines-with-progress'] });
      queryClient.invalidateQueries({ queryKey: ['machines-availability'] });
      queryClient.invalidateQueries({ queryKey: ['operations'] });
      queryClient.invalidateQueries({ queryKey: ['shifts'] });
      
      message.success('–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      
      if (currentCompletedOperation && onOperationClosed) {
        onOperationClosed(currentCompletedOperation);
      }
      
      setCompletionModalVisible(false);
      setCurrentCompletedOperation(null);
    },
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    },
  });

  const continueOperationMutation = useMutation({
    mutationFn: operationCompletionApi.continueOperation,
    onSuccess: (response) => {
      queryClient.invalidateQueries({ queryKey: ['completed-operations-check'] });
      
      message.success('–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è');
      
      if (currentCompletedOperation && onOperationContinued) {
        onOperationContinued(currentCompletedOperation);
      }
      
      setCompletionModalVisible(false);
      setCurrentCompletedOperation(null);
    },
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏');
    },
  });

  const archiveAndFreeMutation = useMutation({
    mutationFn: operationCompletionApi.archiveAndFree,
    onSuccess: (response) => {
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      queryClient.invalidateQueries({ queryKey: ['machines-with-progress'] });
      queryClient.invalidateQueries({ queryKey: ['machines-availability'] });
      queryClient.invalidateQueries({ queryKey: ['operations'] });
      queryClient.invalidateQueries({ queryKey: ['shifts'] });
      
      message.success('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —Å—Ç–∞–Ω–æ–∫ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω');
      
      if (currentCompletedOperation && onNewOperationPlanned) {
        onNewOperationPlanned(currentCompletedOperation);
      }
      
      setCompletionModalVisible(false);
      setCurrentCompletedOperation(null);
    },
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    },
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  useEffect(() => {
    if (completedOperations && completedOperations.length > 0) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      const reallyCompletedOperations = completedOperations.filter(
        op => op.progressPercentage >= 100 && op.completedQuantity >= op.targetQuantity
      );
      
      const newCompletions = reallyCompletedOperations.filter(
        op => !pendingCompletions.some(p => p.id === op.id)
      );
      
      if (newCompletions.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö
        setPendingCompletions(prev => [...prev, ...newCompletions]);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        newCompletions.forEach(op => {
          notification.success({
            message: 'üéâ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
            description: `–û–ø–µ—Ä–∞—Ü–∏—è ${op.operationNumber} –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${op.machineName} –¥–æ—Å—Ç–∏–≥–ª–∞ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞`,
            placement: 'topRight',
            duration: 6,
            onClick: () => {
              handleShowCompletion(op);
            },
          });
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (!completionModalVisible && newCompletions.length > 0) {
          handleShowCompletion(newCompletions[0]);
        }
      }
    }
  }, [completedOperations, pendingCompletions, completionModalVisible]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  const handleShowCompletion = useCallback(async (operation: CompletedOperation) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
      const detailedOperation = await operationCompletionApi.getCompletionDetails(operation.id);
      setCurrentCompletedOperation(detailedOperation || operation);
      setCompletionModalVisible(true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      setCurrentCompletedOperation(operation);
      setCompletionModalVisible(true);
    }
  }, []);

  const handleCloseOperation = useCallback(() => {
    if (currentCompletedOperation) {
      closeOperationMutation.mutate({
        operationId: currentCompletedOperation.id,
        saveResults: true,
      });
    }
  }, [currentCompletedOperation, closeOperationMutation]);

  const handleContinueOperation = useCallback(() => {
    if (currentCompletedOperation) {
      continueOperationMutation.mutate(currentCompletedOperation.id);
    }
  }, [currentCompletedOperation, continueOperationMutation]);

  const handlePlanNewOperation = useCallback(() => {
    if (currentCompletedOperation) {
      archiveAndFreeMutation.mutate(currentCompletedOperation.id);
    }
  }, [currentCompletedOperation, archiveAndFreeMutation]);

  const handleCloseModal = useCallback(() => {
    setCompletionModalVisible(false);
    setCurrentCompletedOperation(null);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  const checkSpecificOperation = useCallback(async (operationId: string) => {
    try {
      const details = await operationCompletionApi.getCompletionDetails(operationId);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      if (details && details.progressPercentage >= 100 && details.completedQuantity >= details.targetQuantity) {
        handleShowCompletion(details);
      } else {
        console.log('üö´ –û–ø–µ—Ä–∞—Ü–∏—è –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
          operationId,
          progress: details?.progressPercentage,
          completed: details?.completedQuantity,
          target: details?.targetQuantity
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
    }
  }, [handleShowCompletion]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const clearPendingCompletions = useCallback(() => {
    setPendingCompletions([]);
  }, []);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    completionModalVisible,
    currentCompletedOperation,
    pendingCompletions,
    hasCompletedOperations: pendingCompletions.length > 0,
    
    // –ó–∞–≥—Ä—É–∑–∫–∞
    isClosing: closeOperationMutation.isPending,
    isContinuing: continueOperationMutation.isPending,
    isArchiving: archiveAndFreeMutation.isPending,
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    handleShowCompletion,
    handleCloseOperation,
    handleContinueOperation,
    handlePlanNewOperation,
    handleCloseModal,
    checkSpecificOperation,
    clearPendingCompletions,
    
    // –î–∞–Ω–Ω—ã–µ
    completedOperations: completedOperations || [],
  };
};

export default useOperationCompletion;
