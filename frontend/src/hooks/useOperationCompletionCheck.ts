/**
 * @file: useOperationCompletionCheck.ts
 * @description: –•—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
 * @dependencies: react-query
 * @created: 2025-06-12
 */
import { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';

interface CompletionCheckResult {
  operationId: number;
  isCompleted: boolean;
  completedQuantity: number;
  plannedQuantity: number;
  progress: number;
  orderInfo: {
    drawingNumber: string;
    quantity: number;
  };
  operationInfo: {
    operationNumber: number;
    operationType: string;
  };
}

// API —Ñ—É–Ω–∫—Ü–∏–∏
const completionCheckApi = {
  checkAllActiveOperations: async (): Promise<CompletionCheckResult[]> => {
    const response = await fetch('/api/operations/completion/check-all-active');
    if (!response.ok) throw new Error('Failed to check operations');
    return await response.json();
  },

  checkOperation: async (operationId: number): Promise<CompletionCheckResult> => {
    const response = await fetch(`/api/operations/completion/check/${operationId}`);
    if (!response.ok) throw new Error('Failed to check operation');
    return await response.json();
  }
};

interface UseOperationCompletionCheckOptions {
  enabled?: boolean;
  checkInterval?: number; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  onOperationCompleted?: (completedOperations: CompletionCheckResult[]) => void;
}

export const useOperationCompletionCheck = (options: UseOperationCompletionCheckOptions = {}) => {
  const {
    enabled = true,
    checkInterval = 30000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    onOperationCompleted
  } = options;

  const [notifiedOperations, setNotifiedOperations] = useState<Set<number>>(new Set());
  const [pendingNotifications, setPendingNotifications] = useState<CompletionCheckResult[]>([]);

  // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const { data: completedOperations = [], isLoading, error } = useQuery({
    queryKey: ['operation-completion-check'],
    queryFn: completionCheckApi.checkAllActiveOperations,
    enabled,
    refetchInterval: checkInterval,
    refetchIntervalInBackground: true, // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–∂–µ –≤ —Ñ–æ–Ω–µ
    staleTime: 1000, // –î–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–º–∏ 1 —Å–µ–∫—É–Ω–¥—É
    retry: 3, // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  useEffect(() => {
    if (!completedOperations.length) return;

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (100% –∏–ª–∏ –±–æ–ª—å—à–µ)
    const reallyCompletedOperations = completedOperations.filter(
      operation => operation.isCompleted && operation.progress >= 100
    );

    if (reallyCompletedOperations.length === 0) return;

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–æ –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏)
    const newCompletedOperations = reallyCompletedOperations.filter(
      operation => !notifiedOperations.has(operation.operationId)
    );

    if (newCompletedOperations.length > 0) {
      console.log('üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', newCompletedOperations);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      setPendingNotifications(prev => [...prev, ...newCompletedOperations]);
      
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–µ
      setNotifiedOperations(prev => {
        const newSet = new Set(prev);
        newCompletedOperations.forEach(op => newSet.add(op.operationId));
        return newSet;
      });

      // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (onOperationCompleted) {
        onOperationCompleted(newCompletedOperations);
      }
    }
  }, [completedOperations, notifiedOperations, onOperationCompleted]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const clearNotifications = () => {
    setPendingNotifications([]);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const clearNotification = (operationId: number) => {
    setPendingNotifications(prev => 
      prev.filter(notification => notification.operationId !== operationId)
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  const checkSpecificOperation = async (operationId: number): Promise<CompletionCheckResult | null> => {
    try {
      const result = await completionCheckApi.checkOperation(operationId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      const isReallyCompleted = result.isCompleted && 
                              result.progress >= 100 && 
                              result.completedQuantity >= result.plannedQuantity;
      
      if (isReallyCompleted && !notifiedOperations.has(operationId)) {
        setPendingNotifications(prev => [...prev, result]);
        setNotifiedOperations(prev => new Set(prev).add(operationId));
        
        if (onOperationCompleted) {
          onOperationCompleted([result]);
        }
        
        return result;
      } else if (!isReallyCompleted) {
        console.log('üö´ –û–ø–µ—Ä–∞—Ü–∏—è –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
          operationId,
          isCompleted: result.isCompleted,
          progress: result.progress,
          completed: result.completedQuantity,
          planned: result.plannedQuantity
        });
      }
      
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      return null;
    }
  };

  // –°–±—Ä–æ—Å notified –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–Ω–æ–≤–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    setNotifiedOperations(new Set());
  }, []);

  return {
    // –î–∞–Ω–Ω—ã–µ
    completedOperations,
    pendingNotifications,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading,
    error,
    hasNotifications: pendingNotifications.length > 0,
    notificationCount: pendingNotifications.length,
    
    // –ú–µ—Ç–æ–¥—ã
    clearNotifications,
    clearNotification,
    checkSpecificOperation,
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats: {
      totalCompleted: completedOperations.length,
      pendingNotifications: pendingNotifications.length,
      notifiedOperations: notifiedOperations.size
    }
  };
};

export default useOperationCompletionCheck;
