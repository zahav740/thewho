/**
 * @file: fix-production-shifts-sync.ts
 * @description: –ü–∞—Ç—á –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É Production –∏ Shifts
 * @created: 2025-06-12
 */
import { useCallback } from 'react';
import { useQueryClient } from '@tanstack/react-query';
import { message } from 'antd';
import { QUERY_KEYS } from '../utils/queryKeys';

/**
 * –•—É–∫ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É Production –∏ Shifts
 */
export const useProductionShiftsSync = () => {
  const queryClient = useQueryClient();

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  const syncAfterOperationAssignment = useCallback(async (operationId: string, machineId: string) => {
    console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId} –Ω–∞ —Å—Ç–∞–Ω–æ–∫ ${machineId}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    message.loading('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏...', 1.5);
    
    // 1. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ –∫–ª—é—á–∏
    const keysToInvalidate = [
      QUERY_KEYS.MACHINES,
      QUERY_KEYS.MACHINES_AVAILABILITY,
      QUERY_KEYS.MACHINES_WITH_STATUS,
      QUERY_KEYS.MACHINES_WITH_PROGRESS,
      QUERY_KEYS.OPERATIONS,
      QUERY_KEYS.OPERATIONS_IN_PROGRESS,
      QUERY_KEYS.OPERATIONS_ASSIGNED,
      QUERY_KEYS.SHIFTS,
      QUERY_KEYS.SHIFTS_TODAY
    ];
    
    keysToInvalidate.forEach(key => {
      queryClient.invalidateQueries({ queryKey: key });
    });
    
    // 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ 500–º—Å
    setTimeout(() => {
      queryClient.refetchQueries({ queryKey: QUERY_KEYS.MACHINES_AVAILABILITY });
      queryClient.refetchQueries({ queryKey: QUERY_KEYS.OPERATIONS_IN_PROGRESS });
      console.log('üîÑ –ü–µ—Ä–≤–∞—è –≤–æ–ª–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }, 500);
    
    // 3. –í—Ç–æ—Ä–∞—è –≤–æ–ª–Ω–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      queryClient.refetchQueries({ queryKey: QUERY_KEYS.SHIFTS_TODAY });
      queryClient.refetchQueries({ queryKey: QUERY_KEYS.MACHINES });
      console.log('üîÑ –í—Ç–æ—Ä–∞—è –≤–æ–ª–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      message.success('–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Å–µ–∫—Ü–∏–∏ –°–º–µ–Ω—ã', 2);
    }, 2000);
    
    // 4. –¢—Ä–µ—Ç—å—è –≤–æ–ª–Ω–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
    setTimeout(() => {
      console.log('üîÑ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');
      keysToInvalidate.forEach(key => {
        queryClient.invalidateQueries({ queryKey: key });
      });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(() => {
        queryClient.refetchQueries({ queryKey: QUERY_KEYS.MACHINES_AVAILABILITY });
        queryClient.refetchQueries({ queryKey: QUERY_KEYS.OPERATIONS_IN_PROGRESS });
        queryClient.refetchQueries({ queryKey: QUERY_KEYS.SHIFTS_TODAY });
      }, 200);
    }, 5000);
    
  }, [queryClient]);

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
   */
  const verifyOperationAssignment = useCallback(async (operationId: string, machineId: string) => {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId} –Ω–∞ —Å—Ç–∞–Ω–æ–∫ ${machineId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
    const machines = queryClient.getQueryData(QUERY_KEYS.MACHINES_AVAILABILITY);
    const operations = queryClient.getQueryData(QUERY_KEYS.OPERATIONS_IN_PROGRESS);
    
    console.log('–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ:', { machines, operations });
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º
    if (!machines || !operations) {
      console.log('‚ùå –î–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ –Ω–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º...');
      await queryClient.refetchQueries({ queryKey: QUERY_KEYS.MACHINES_AVAILABILITY });
      await queryClient.refetchQueries({ queryKey: QUERY_KEYS.OPERATIONS_IN_PROGRESS });
    }
    
    return true;
  }, [queryClient]);

  return {
    syncAfterOperationAssignment,
    verifyOperationAssignment,
  };
};

export default useProductionShiftsSync;
