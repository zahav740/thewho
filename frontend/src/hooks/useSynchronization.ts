/**
 * @file: useSynchronization.ts
 * @description: –•—É–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ Production –∏ Shifts
 * @dependencies: React, useQuery, synchronizationApi
 * @created: 2025-06-15
 */
import { useEffect, useCallback } from 'react';
import { useQueryClient } from '@tanstack/react-query';
import { synchronizationApi } from '../services/synchronizationApi';

interface UseSynchronizationOptions {
  autoSync?: boolean;
  syncInterval?: number;
  onSyncSuccess?: (data: any) => void;
  onSyncError?: (error: any) => void;
}

export const useSynchronization = (options: UseSynchronizationOptions = {}) => {
  const {
    autoSync = true,
    syncInterval = 10000, // 10 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    onSyncSuccess,
    onSyncError,
  } = options;

  const queryClient = useQueryClient();

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const forceSyncAll = useCallback(async () => {
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
      
      const result = await synchronizationApi.syncAllActiveOperations();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      await queryClient.invalidateQueries({ queryKey: ['machines'] });
      await queryClient.invalidateQueries({ queryKey: ['shifts'] });
      await queryClient.invalidateQueries({ queryKey: ['operations'] });
      await queryClient.invalidateQueries({ queryKey: ['operation-progress'] });
      
      console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result);
      
      if (onSyncSuccess) {
        onSyncSuccess(result);
      }
      
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      
      if (onSyncError) {
        onSyncError(error);
      }
      
      throw error;
    }
  }, [queryClient, onSyncSuccess, onSyncError]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  const syncOperation = useCallback(async (operationId: number) => {
    try {
      console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}...`);
      
      const result = await synchronizationApi.updateOperationProgress(operationId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      await queryClient.invalidateQueries({ queryKey: ['machines'] });
      await queryClient.invalidateQueries({ queryKey: ['shifts', 'today'] });
      await queryClient.invalidateQueries({ queryKey: ['operation-progress', operationId] });
      
      console.log(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è ${operationId} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:`, result);
      
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}:`, error);
      throw error;
    }
  }, [queryClient]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const getSyncStatus = useCallback(async (operationId: number) => {
    try {
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}...`);
      
      const result = await synchronizationApi.getSynchronizationStatus(operationId);
      
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω:`, result);
      
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}:`, error);
      throw error;
    }
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const checkSyncHealth = useCallback(async () => {
    try {
      console.log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
      
      const result = await synchronizationApi.healthCheck();
      
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:', result);
      
      return result;
    } catch (error) {
      console.error('‚ùå –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error);
      throw error;
    }
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
  useEffect(() => {
    if (!autoSync) return;

    console.log(`üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ ${syncInterval / 1000} —Å–µ–∫—É–Ω–¥`);

    const intervalId = setInterval(async () => {
      try {
        await forceSyncAll();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      }
    }, syncInterval);

    return () => {
      console.log('üõë –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      clearInterval(intervalId);
    };
  }, [autoSync, syncInterval, forceSyncAll]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const handleOperationAssigned = (event: CustomEvent) => {
      console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', event.detail);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      queryClient.invalidateQueries({ queryKey: ['shifts'] });
    };

    const handleOperationCompleted = (event: CustomEvent) => {
      console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', event.detail);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      queryClient.invalidateQueries({ queryKey: ['shifts'] });
      queryClient.invalidateQueries({ queryKey: ['operation-progress'] });
    };

    const handleOperationProgress = (event: CustomEvent) => {
      console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:', event.detail);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      queryClient.invalidateQueries({ queryKey: ['shifts', 'today'] });
      queryClient.invalidateQueries({ queryKey: ['operation-progress'] });
    };

    const handleOperationCleared = () => {
      console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—á–∏—Å—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      queryClient.invalidateQueries({ queryKey: ['shifts'] });
    };

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    window.addEventListener('operationAssigned', handleOperationAssigned as EventListener);
    window.addEventListener('operationCompleted', handleOperationCompleted as EventListener);
    window.addEventListener('operationProgress', handleOperationProgress as EventListener);
    window.addEventListener('operationCleared', handleOperationCleared);

    return () => {
      // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      window.removeEventListener('operationAssigned', handleOperationAssigned as EventListener);
      window.removeEventListener('operationCompleted', handleOperationCompleted as EventListener);
      window.removeEventListener('operationProgress', handleOperationProgress as EventListener);
      window.removeEventListener('operationCleared', handleOperationCleared);
    };
  }, [queryClient]);

  return {
    forceSyncAll,
    syncOperation,
    getSyncStatus,
    checkSyncHealth,
  };
};

export default useSynchronization;
