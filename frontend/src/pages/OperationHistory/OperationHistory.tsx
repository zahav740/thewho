/**
 * @file: OperationHistory.tsx  
 * @description: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–æ–º (Ant Design)
 * @created: 2025-06-07
 */
import React, { useState, useEffect, useMemo } from 'react';
import { 
  Card, 
  Typography, 
  Input, 
  Button, 
  Table, 
  Row,
  Col,
  Select,
  DatePicker,
  Tag,
  Alert,
  Spin,
  Statistic,
  Space,
  message,
  Tooltip
} from 'antd';
import { 
  FileExcelOutlined,
  SearchOutlined,
  ReloadOutlined,
  FilterOutlined,
  BarChartOutlined
} from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';
import dayjs, { Dayjs } from 'dayjs';
import { 
  operationHistoryService, 
  OperationHistoryRecord, 
  DrawingInfo 
} from '../../services/operationHistory/operationHistoryService';

const { Title, Text } = Typography;
const { Option } = Select;
const { RangePicker } = DatePicker;

interface Filters {
  drawingNumber: string;
  dateRange: [Dayjs, Dayjs] | null;
  machineName: string;
  operatorName: string;
  shiftType: string;
}

const OperationHistory: React.FC = () => {
  // State –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
  const [records, setRecords] = useState<OperationHistoryRecord[]>([]);
  const [drawings, setDrawings] = useState<DrawingInfo[]>([]);
  const [loading, setLoading] = useState(false);
  
  // State –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [filters, setFilters] = useState<Filters>({
    drawingNumber: '',
    dateRange: null,
    machineName: '',
    operatorName: '',
    shiftType: ''
  });

  // State –¥–ª—è –ø–æ–∏—Å–∫–∞
  const [searchQuery, setSearchQuery] = useState('');

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–µ—Ä—Ç–µ–∂–µ–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadDrawings();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ—Ä—Ç–µ–∂–∞
  useEffect(() => {
    if (filters.drawingNumber) {
      loadOperationHistory();
    }
  }, [filters.drawingNumber, filters.dateRange]);

  const loadDrawings = async () => {
    try {
      setLoading(true);
      const data = await operationHistoryService.getAvailableDrawings();
      setDrawings(data);
    } catch (err) {
      message.error(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —á–µ—Ä—Ç–µ–∂–µ–π');
    } finally {
      setLoading(false);
    }
  };

  const loadOperationHistory = async () => {
    if (!filters.drawingNumber) return;

    try {
      setLoading(true);
      const dateFrom = filters.dateRange?.[0]?.toDate();
      const dateTo = filters.dateRange?.[1]?.toDate();
      
      const data = await operationHistoryService.getOperationHistory(
        filters.drawingNumber,
        dateFrom,
        dateTo
      );
      
      setRecords(data);
    } catch (err) {
      message.error(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π');
    } finally {
      setLoading(false);
    }
  };

  const handleFilterChange = (field: keyof Filters, value: any) => {
    setFilters(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleExportExcel = async () => {
    if (!filters.drawingNumber) {
      message.warning('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      return;
    }

    try {
      setLoading(true);
      const downloadUrl = await operationHistoryService.exportToExcel({
        drawingNumber: filters.drawingNumber,
        dateFrom: filters.dateRange?.[0]?.toDate(),
        dateTo: filters.dateRange?.[1]?.toDate(),
        exportType: 'excel'
      });

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
      const fileName = downloadUrl.split('/').pop();
      if (fileName) {
        await operationHistoryService.downloadFile(fileName);
        message.success('–§–∞–π–ª Excel —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω');
      }
    } catch (err) {
      message.error(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  const filteredRecords = useMemo(() => {
    let filtered = records;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
    if (searchQuery) {
      filtered = filtered.filter(record =>
        record.drawingNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||
        record.operatorName?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        record.machineName.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (filters.machineName) {
      filtered = filtered.filter(record => 
        record.machineName.toLowerCase().includes(filters.machineName.toLowerCase())
      );
    }

    if (filters.operatorName) {
      filtered = filtered.filter(record => 
        record.operatorName?.toLowerCase().includes(filters.operatorName.toLowerCase())
      );
    }

    if (filters.shiftType) {
      filtered = filtered.filter(record => record.shiftType === filters.shiftType);
    }

    return filtered;
  }, [records, searchQuery, filters]);

  // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const uniqueMachines = [...new Set(records.map(r => r.machineName))];
  const uniqueOperators = [...new Set(records.map(r => r.operatorName).filter(Boolean))];

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
  const columns: ColumnsType<OperationHistoryRecord> = [
    {
      title: '–î–∞—Ç–∞',
      dataIndex: 'dateCompleted',
      key: 'dateCompleted',
      sorter: (a, b) => new Date(a.dateCompleted).getTime() - new Date(b.dateCompleted).getTime(),
      render: (date: Date) => dayjs(date).format('DD.MM.YYYY'),
      width: 110,
    },
    {
      title: '–û–ø–µ—Ä–∞—Ü–∏—è ‚Ññ',
      dataIndex: 'operationNumber',
      key: 'operationNumber',
      sorter: (a, b) => a.operationNumber - b.operationNumber,
      width: 100,
    },
    {
      title: '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏',
      dataIndex: 'operationType',
      key: 'operationType',
      width: 150,
    },
    {
      title: '–°—Ç–∞–Ω–æ–∫',
      dataIndex: 'machineName',
      key: 'machineName',
      sorter: (a, b) => a.machineName.localeCompare(b.machineName),
      width: 120,
    },
    {
      title: '–û–ø–µ—Ä–∞—Ç–æ—Ä',
      dataIndex: 'operatorName',
      key: 'operatorName',
      render: (name: string) => name || '-',
      width: 120,
    },
    {
      title: '–°–º–µ–Ω–∞',
      dataIndex: 'shiftType',
      key: 'shiftType',
      render: (shiftType: string) => (
        <Tag color={shiftType === 'DAY' ? 'blue' : 'purple'}>
          {shiftType === 'DAY' ? '–î–µ–Ω—å' : '–ù–æ—á—å'}
        </Tag>
      ),
      width: 80,
    },
    {
      title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      dataIndex: 'quantityProduced',
      key: 'quantityProduced',
      sorter: (a, b) => a.quantityProduced - b.quantityProduced,
      render: (quantity: number) => (
        <Text strong>{quantity} –¥–µ—Ç.</Text>
      ),
      align: 'right',
      width: 100,
    },
    {
      title: '–í—Ä–µ–º—è/–¥–µ—Ç',
      dataIndex: 'timePerUnit',
      key: 'timePerUnit',
      render: (time: number) => time ? `${time} –º–∏–Ω` : '-',
      align: 'right',
      width: 100,
    },
    {
      title: '–û–±—â–µ–µ –≤—Ä–µ–º—è',
      dataIndex: 'totalTime',
      key: 'totalTime',
      render: (time: number) => time ? `${Math.round(time / 60)} —á ${time % 60} –º` : '-',
      align: 'right',
      width: 120,
    },
    {
      title: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      dataIndex: 'efficiencyRating',
      key: 'efficiencyRating',
      sorter: (a, b) => (a.efficiencyRating || 0) - (b.efficiencyRating || 0),
      render: (efficiency: number) => {
        if (!efficiency) return '-';
        
        let color = 'default';
        if (efficiency >= 90) color = 'success';
        else if (efficiency >= 75) color = 'warning';
        else color = 'error';
        
        return (
          <Tag color={color}>
            {efficiency.toFixed(1)}%
          </Tag>
        );
      },
      align: 'right',
      width: 110,
    },
  ];

  return (
    <div style={{ padding: '24px' }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={{ marginBottom: 24 }}>
        <Title level={2}>üìö –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</Title>
        <Text type="secondary">
          –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        </Text>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <Card title={
        <Space>
          <FilterOutlined />
          <span>–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</span>
        </Space>
      } style={{ marginBottom: 16 }}>
        <Row gutter={[16, 16]}>
          {/* –í—ã–±–æ—Ä —á–µ—Ä—Ç–µ–∂–∞ */}
          <Col xs={24} sm={12} md={6}>
            <div>
              <Text>–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞:</Text>
              <Select
                style={{ width: '100%', marginTop: 4 }}
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ä—Ç–µ–∂"
                value={filters.drawingNumber || undefined}
                onChange={(value) => handleFilterChange('drawingNumber', value)}
                loading={loading}
              >
                <Option value="">–í—Å–µ —á–µ—Ä—Ç–µ–∂–∏</Option>
                {drawings.map(drawing => (
                  <Option key={drawing.drawingNumber} value={drawing.drawingNumber}>
                    {drawing.drawingNumber} ({drawing.recordCount} –∑–∞–ø–∏—Å–µ–π)
                  </Option>
                ))}
              </Select>
            </div>
          </Col>

          {/* –ü–µ—Ä–∏–æ–¥ –¥–∞—Ç */}
          <Col xs={24} sm={12} md={6}>
            <div>
              <Text>–ü–µ—Ä–∏–æ–¥:</Text>
              <RangePicker
                style={{ width: '100%', marginTop: 4 }}
                value={filters.dateRange}
                onChange={(dates) => handleFilterChange('dateRange', dates)}
                format="DD.MM.YYYY"
              />
            </div>
          </Col>

          {/* –°—Ç–∞–Ω–æ–∫ */}
          <Col xs={24} sm={12} md={4}>
            <div>
              <Text>–°—Ç–∞–Ω–æ–∫:</Text>
              <Select
                style={{ width: '100%', marginTop: 4 }}
                placeholder="–í—Å–µ —Å—Ç–∞–Ω–∫–∏"
                value={filters.machineName || undefined}
                onChange={(value) => handleFilterChange('machineName', value)}
              >
                <Option value="">–í—Å–µ —Å—Ç–∞–Ω–∫–∏</Option>
                {uniqueMachines.map(machine => (
                  <Option key={machine} value={machine}>{machine}</Option>
                ))}
              </Select>
            </div>
          </Col>

          {/* –°–º–µ–Ω–∞ */}
          <Col xs={24} sm={12} md={3}>
            <div>
              <Text>–°–º–µ–Ω–∞:</Text>
              <Select
                style={{ width: '100%', marginTop: 4 }}
                placeholder="–í—Å–µ"
                value={filters.shiftType || undefined}
                onChange={(value) => handleFilterChange('shiftType', value)}
              >
                <Option value="">–í—Å–µ</Option>
                <Option value="DAY">–î–µ–Ω—å</Option>
                <Option value="NIGHT">–ù–æ—á—å</Option>
              </Select>
            </div>
          </Col>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <Col xs={24} sm={12} md={5}>
            <div>
              <Text>–î–µ–π—Å—Ç–≤–∏—è:</Text>
              <div style={{ marginTop: 4 }}>
                <Space>
                  <Tooltip title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ">
                    <Button 
                      icon={<ReloadOutlined />}
                      onClick={loadOperationHistory}
                      disabled={loading || !filters.drawingNumber}
                    />
                  </Tooltip>
                  
                  <Tooltip title="–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel">
                    <Button 
                      type="primary"
                      icon={<FileExcelOutlined />}
                      onClick={handleExportExcel}
                      disabled={loading || !filters.drawingNumber}
                    >
                      Excel
                    </Button>
                  </Tooltip>
                </Space>
              </div>
            </div>
          </Col>
        </Row>

        {/* –ü–æ–∏—Å–∫ */}
        <Row style={{ marginTop: 16 }}>
          <Col span={24}>
            <Input
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —á–µ—Ä—Ç–µ–∂–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ —Å—Ç–∞–Ω–∫—É..."
              prefix={<SearchOutlined />}
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              allowClear
            />
          </Col>
        </Row>
      </Card>

      {/* –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {records.length > 0 && (
        <Row gutter={16} style={{ marginBottom: 16 }}>
          <Col xs={12} sm={6}>
            <Card>
              <Statistic
                title="–ó–∞–ø–∏—Å–µ–π –Ω–∞–π–¥–µ–Ω–æ"
                value={filteredRecords.length}
                prefix={<BarChartOutlined />}
                valueStyle={{ color: '#1890ff' }}
              />
            </Card>
          </Col>
          
          <Col xs={12} sm={6}>
            <Card>
              <Statistic
                title="–î–µ—Ç–∞–ª–µ–π –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ"
                value={filteredRecords.reduce((sum, r) => sum + r.quantityProduced, 0)}
                valueStyle={{ color: '#52c41a' }}
              />
            </Card>
          </Col>
          
          <Col xs={12} sm={6}>
            <Card>
              <Statistic
                title="–°—Ç–∞–Ω–∫–æ–≤ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ"
                value={uniqueMachines.length}
                valueStyle={{ color: '#13c2c2' }}
              />
            </Card>
          </Col>
          
          <Col xs={12} sm={6}>
            <Card>
              <Statistic
                title="–û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–ª–æ"
                value={uniqueOperators.length}
                valueStyle={{ color: '#fa8c16' }}
              />
            </Card>
          </Col>
        </Row>
      )}

      {/* –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö */}
      <Card>
        <Table
          columns={columns}
          dataSource={filteredRecords}
          rowKey="id"
          loading={loading}
          pagination={{
            total: filteredRecords.length,
            pageSize: 50,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) => 
              `${range[0]}-${range[1]} –∏–∑ ${total} –∑–∞–ø–∏—Å–µ–π`,
          }}
          locale={{
            emptyText: filters.drawingNumber 
              ? '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' 
              : '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏'
          }}
          scroll={{ x: 1200 }}
        />
      </Card>
    </div>
  );
};

export default OperationHistory;
