/**
 * @file: ProductionPage.tsx
 * @description: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
 * @dependencies: MachineCard, OrderRecommendations, PlanningModalImproved
 * @created: 2025-01-28
 * @updated: 2025-06-08
 */
import React, { useState } from 'react';
import { Row, Col, Spin, Alert, Button, Switch, Space, Card, Typography, Tag } from 'antd';
import { ThunderboltOutlined, BugOutlined } from '@ant-design/icons';
import { useQuery } from '@tanstack/react-query';
import { useTranslation } from '../../i18n';
import { machinesApi } from '../../services/machinesApi';
import { synchronizationApi } from '../../services/synchronizationApi'; // üÜï –ù–æ–≤—ã–π API —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
import { useSynchronization } from '../../hooks'; // üÜï –•—É–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
import { MachineAvailability } from '../../types/machine.types';
import { MachineCard } from './components/MachineCard';
import { OrderRecommendations } from './components/OrderRecommendations';
import { PlanningModal } from '../../components/PlanningModal';
import { QUERY_KEYS } from '../../utils/queryKeys';
// üÜï –ò–ú–ü–û–†–¢ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø
import PlanningModalImproved from '../../components/PlanningModal/PlanningModalImproved';

const { Text } = Typography;

export const ProductionPage: React.FC = () => {
  const { t, currentLanguage } = useTranslation();
  const [selectedMachine, setSelectedMachine] = useState<MachineAvailability | null>(null);
  const [planningModalVisible, setPlanningModalVisible] = useState(false);
  const [planningMachine, setPlanningMachine] = useState<MachineAvailability | null>(null);
  // üÜï –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø
  const [useImprovedPlanning, setUseImprovedPlanning] = useState(true); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
  // –ù–û–í–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  const [selectedOperation, setSelectedOperation] = useState<any>(null);

  // üÜï –ù–û–í–û–ï: –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const {
    forceSyncAll,
    syncOperation,
    getSyncStatus,
    checkSyncHealth,
  } = useSynchronization({
    autoSync: true,
    syncInterval: 15000, // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    onSyncSuccess: (data) => {
      console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', data);
    },
    onSyncError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    },
  });

  const { data: machines, isLoading, error } = useQuery({
    queryKey: QUERY_KEYS.MACHINES, // –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
    queryFn: machinesApi.getAll,
    refetchInterval: 5000, // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  });

  const handleOpenPlanningModal = (machine: MachineAvailability) => {
    console.log('üî•üî•üî• handleOpenPlanningModal called with machine:', machine.machineName);
    console.log('üî•üî•üî• Current modal state - visible:', planningModalVisible, 'machine:', planningMachine);
    console.log('üî•üî•üî• Using improved planning:', useImprovedPlanning);
    setPlanningMachine(machine);
    setPlanningModalVisible(true);
    console.log('üî•üî•üî• Modal state updated - should be visible now');
  };

  const handleClosePlanningModal = () => {
    setPlanningModalVisible(false);
    setPlanningMachine(null);
  };

  // üÜï –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
  const handleOperationSelect = async (operation: any) => {
    try {
      console.log('üéØ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞ –≤ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ:', operation);
      
      // üÜï 1. –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API
      const syncResult = await synchronizationApi.assignOperationThroughPlanning({
        operationId: operation.id,
        machineId: operation.machineId || operation.assignedMachine,
      });
      
      if (syncResult.success) {
        console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:', syncResult);
        
        // üÜï 2. –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const enhancedOperation = {
          ...operation,
          syncedWithShifts: true,
          assignedAt: syncResult.data.assignedAt,
          synchronizationStatus: syncResult.data.synchronizationStatus,
        };
        
        setSelectedOperation(enhancedOperation);
        
        // üÜï 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        window.dispatchEvent(new CustomEvent('operationAssigned', {
          detail: enhancedOperation
        }));
        
        // üÜï 4. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        await forceSyncAll();
        
        console.log('üì¢ –û–ø–µ—Ä–∞—Ü–∏—è', operation.operationNumber, '–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ú–æ–¥—É–ª–µ–º –°–º–µ–Ω');
        
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', syncResult.error);
        
        // –û—Ç–∫–∞—Ç –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
        await handleLegacyOperationSelect(operation);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π:', error);
      
      // –û—Ç–∫–∞—Ç –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
      await handleLegacyOperationSelect(operation);
    }
  };

  // üÜï –û—Ç–∫–∞—Ç –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const handleLegacyOperationSelect = async (operation: any) => {
    try {
      console.log('‚ö†Ô∏è –û—Ç–∫–∞—Ç –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏');
      
      setSelectedOperation({
        ...operation,
        syncedWithShifts: false,
        legacyMode: true,
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      localStorage.setItem('selectedOperation', JSON.stringify(operation));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è legacy-—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      window.dispatchEvent(new CustomEvent('operationAssigned', {
        detail: { ...operation, legacyMode: true }
      }));
      
      console.log('‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É:', error);
    }
  };

  if (isLoading) {
    return (
      <div className="loading-container">
        <Spin size="large">
          <div style={{ minHeight: '200px', padding: '50px' }}>
            <div>{t('message.loading')}</div>
          </div>
        </Spin>
      </div>
    );
  }

  if (error) {
    return (
      <Alert
        message={t('message.error.load')}
        description={t('message.error.load')}
        type="error"
        showIcon
      />
    );
  }

  return (
    <div className="page-container">
      {/* üÜï –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï–ú */}
      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
        <Col span={24}>
          <Card 
            size="small" 
            style={{ 
              background: 'linear-gradient(135deg, #e6f7ff 0%, #f0f9ff 100%)',
              borderColor: '#1890ff',
              borderRadius: '12px',
              marginBottom: 16
            }}
          >
            <Space align="center" style={{ width: '100%', justifyContent: 'space-between' }}>
              <Space direction="vertical" size={4}>
                <div style={{ fontWeight: 'bold', fontSize: '16px', color: '#1890ff' }}>
                  üåê {t('app.title')} - {t('language.current')}: {currentLanguage.toUpperCase()}
                </div>
                <div style={{ fontSize: '14px', color: '#595959' }}>
                  {t('page.production.title')} | {t('menu.production')}
                </div>
              </Space>
            </Space>
          </Card>
        </Col>
      </Row>
      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
        <Col span={24}>
          <Card 
            size="small" 
            style={{ 
              background: useImprovedPlanning 
                ? 'linear-gradient(135deg, #fff7e6 0%, #fffbe6 100%)' 
                : 'linear-gradient(135deg, #f6ffed 0%, #f0f9ff 100%)',
              borderColor: useImprovedPlanning ? '#faad14' : '#52c41a',
              borderRadius: '12px'
            }}
          >
            <Space align="center" style={{ width: '100%', justifyContent: 'space-between' }}>
              <Space>
                {useImprovedPlanning ? (
                  <ThunderboltOutlined style={{ color: '#faad14', fontSize: '20px' }} />
                ) : (
                  <BugOutlined style={{ color: '#52c41a', fontSize: '20px' }} />
                )}
                <span style={{ fontWeight: 'bold', fontSize: '16px' }}>
                  {useImprovedPlanning ? t('planning.improved_enabled') : t('planning.standard_enabled')}
                </span>
              </Space>
              <Space>
                <span>{t('planning.standard')}</span>
                <Switch 
                  checked={useImprovedPlanning}
                  onChange={setUseImprovedPlanning}
                  style={{
                    backgroundColor: useImprovedPlanning ? '#faad14' : undefined
                  }}
                />
                <span>{t('planning.improved')}</span>
                
                {/* üÜï –ù–û–í–û–ï: –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π */}
                <Button
                  type="primary"
                  size="small"
                  icon={<span>üîÑ</span>}
                  onClick={async () => {
                    try {
                      console.log('üîÑ –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');
                      await forceSyncAll();
                      console.log('‚úÖ –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                    } catch (error) {
                      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
                    }
                  }}
                  style={{
                    backgroundColor: '#52c41a',
                    borderColor: '#52c41a',
                    marginLeft: '16px'
                  }}
                >
                  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
                </Button>
                
                <Button
                  size="small"
                  icon={<span>üå°Ô∏è</span>}
                  onClick={async () => {
                    try {
                      console.log('üå°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
                      const healthStatus = await checkSyncHealth();
                      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthStatus);
                    } catch (error) {
                      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã:', error);
                    }
                  }}
                >
                  –ü—Ä–æ–≤–µ—Ä–∫–∞
                </Button>
              </Space>
            </Space>
            
            {useImprovedPlanning && (
              <div style={{ marginTop: 12, color: '#8c5700', fontSize: '14px' }}>
                {t('planning.features_enabled')}
              </div>
            )}
          </Card>
        </Col>
      </Row>

      <Row gutter={[16, 16]}>
        <Col span={24}>
          <h2>{t('production.machines')}</h2>
          
          {/* –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ */}
          <Button 
            type="primary" 
            onClick={() => {
              console.log('üß™ Test button clicked');
              if (machines && machines.length > 0) {
                handleOpenPlanningModal(machines[0]);
              }
            }}
            style={{ 
              marginBottom: '16px',
              backgroundColor: useImprovedPlanning ? '#faad14' : undefined,
              borderColor: useImprovedPlanning ? '#faad14' : undefined
            }}
            icon={useImprovedPlanning ? <ThunderboltOutlined /> : <BugOutlined />}
          >
            {useImprovedPlanning ? t('planning.test_improved') : t('planning.test_standard')}
          </Button>
          
          {/* –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞–Ω–∫–æ–≤ –ø–æ —Ç–∏–ø–∞–º —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º */}
          <div className="machines-grid">
            {/* –ì—Ä—É–ø–ø–∞: –§—Ä–µ–∑–µ—Ä–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ */}
            {(() => {
              const millingMachines = machines
                ?.filter(machine => machine.machineType === 'MILLING' || machine.machineType === 'milling' || machine.machineType.includes('milling'))
                .sort((a, b) => a.machineName.localeCompare(b.machineName)); // –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏
              
              if (millingMachines && millingMachines.length > 0) {
                return (
                  <div key="milling-group" style={{ marginBottom: '32px' }}>
                    <div style={{ 
                      marginBottom: '16px', 
                      padding: '12px', 
                      backgroundColor: '#e6f7ff', 
                      borderRadius: '8px',
                      borderLeft: '4px solid #1890ff'
                    }}>
                      <h3 style={{ 
                        margin: 0, 
                        color: '#1890ff', 
                        fontSize: '18px',
                        fontWeight: 'bold'
                      }}>
                        üîß –§—Ä–µ–∑–µ—Ä–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ ({millingMachines.length})
                      </h3>
                    </div>
                    <Row gutter={[16, 16]}>
                      {millingMachines.map((machine) => (
                        <Col xs={24} sm={12} lg={8} xl={6} key={`milling-${machine.id}`}>
                          <MachineCard
                            machine={machine}
                            isSelected={selectedMachine?.id === machine.id}
                            onSelect={() => setSelectedMachine(machine)}
                            onOpenPlanningModal={handleOpenPlanningModal}
                          />
                        </Col>
                      ))}
                    </Row>
                  </div>
                );
              }
              return null;
            })()}
            
            {/* –ì—Ä—É–ø–ø–∞: –¢–æ–∫–∞—Ä–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ */}
            {(() => {
              const turningMachines = machines
                ?.filter(machine => machine.machineType === 'TURNING' || machine.machineType === 'turning' || machine.machineType.includes('turning'))
                .sort((a, b) => a.machineName.localeCompare(b.machineName)); // –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏
              
              if (turningMachines && turningMachines.length > 0) {
                return (
                  <div key="turning-group" style={{ marginBottom: '32px' }}>
                    <div style={{ 
                      marginBottom: '16px', 
                      padding: '12px', 
                      backgroundColor: '#f6ffed', 
                      borderRadius: '8px',
                      borderLeft: '4px solid #52c41a'
                    }}>
                      <h3 style={{ 
                        margin: 0, 
                        color: '#52c41a', 
                        fontSize: '18px',
                        fontWeight: 'bold'
                      }}>
                        üîÑ –¢–æ–∫–∞—Ä–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ ({turningMachines.length})
                      </h3>
                    </div>
                    <Row gutter={[16, 16]}>
                      {turningMachines.map((machine) => (
                        <Col xs={24} sm={12} lg={8} xl={6} key={`turning-${machine.id}`}>
                          <MachineCard
                            machine={machine}
                            isSelected={selectedMachine?.id === machine.id}
                            onSelect={() => setSelectedMachine(machine)}
                            onOpenPlanningModal={handleOpenPlanningModal}
                          />
                        </Col>
                      ))}
                    </Row>
                  </div>
                );
              }
              return null;
            })()}
            
            {/* –ì—Ä—É–ø–ø–∞: –î—Ä—É–≥–∏–µ —Å—Ç–∞–Ω–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) */}
            {(() => {
              const otherMachines = machines
                ?.filter(machine => 
                  !['MILLING', 'milling', 'TURNING', 'turning'].includes(machine.machineType) &&
                  !machine.machineType.includes('milling') &&
                  !machine.machineType.includes('turning')
                )
                .sort((a, b) => a.machineName.localeCompare(b.machineName)); // –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏
              
              if (otherMachines && otherMachines.length > 0) {
                return (
                  <div key="other-group" style={{ marginBottom: '32px' }}>
                    <div style={{ 
                      marginBottom: '16px', 
                      padding: '12px', 
                      backgroundColor: '#fff7e6', 
                      borderRadius: '8px',
                      borderLeft: '4px solid #faad14'
                    }}>
                      <h3 style={{ 
                        margin: 0, 
                        color: '#faad14', 
                        fontSize: '18px',
                        fontWeight: 'bold'
                      }}>
                        ‚öôÔ∏è –î—Ä—É–≥–∏–µ —Å—Ç–∞–Ω–∫–∏ ({otherMachines.length})
                      </h3>
                    </div>
                    <Row gutter={[16, 16]}>
                      {otherMachines.map((machine) => (
                        <Col xs={24} sm={12} lg={8} xl={6} key={`other-${machine.id}`}>
                          <MachineCard
                            machine={machine}
                            isSelected={selectedMachine?.id === machine.id}
                            onSelect={() => setSelectedMachine(machine)}
                            onOpenPlanningModal={handleOpenPlanningModal}
                          />
                        </Col>
                      ))}
                    </Row>
                  </div>
                );
              }
              return null;
            })()}
          </div>
        </Col>
      </Row>

      {selectedMachine && (
        <Row gutter={[16, 16]} style={{ marginTop: 24 }}>
          <Col span={24}>
            <OrderRecommendations 
              machine={selectedMachine} 
              onOperationSelect={handleOperationSelect}
            />
          </Col>
        </Row>
      )}

      {/* üÜï –ù–û–í–û–ï: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å—Ç–∞—Ç—É—Å–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
      {selectedOperation && (
        <Row gutter={[16, 16]} style={{ marginTop: 24 }}>
          <Col span={24}>
            <Card 
              title="üéÜ –í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è" 
              extra={
                <Space>
                  {selectedOperation.syncedWithShifts && (
                    <Tag color="green" style={{ fontSize: '12px' }}>
                      ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
                    </Tag>
                  )}
                  <Button 
                    type="link" 
                    onClick={() => {
                      setSelectedOperation(null);
                      localStorage.removeItem('selectedOperation');
                      // üÜï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—á–∏—Å—Ç–∫–µ
                      window.dispatchEvent(new CustomEvent('operationCleared'));
                      console.log('üóëÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –æ—á–∏—â–µ–Ω–∞');
                    }}
                  >
                    –û—á–∏—Å—Ç–∏—Ç—å
                  </Button>
                </Space>
              }
              style={{ 
                borderColor: selectedOperation.syncedWithShifts ? '#52c41a' : '#faad14',
                backgroundColor: selectedOperation.syncedWithShifts ? '#f6ffed' : '#fffbe6',
                borderRadius: '12px'
              }}
            >
              <Space direction="vertical" style={{ width: '100%' }}>
                <Text strong style={{ fontSize: '16px', color: selectedOperation.syncedWithShifts ? '#52c41a' : '#faad14' }}>
                  üìã –û–ø–µ—Ä–∞—Ü–∏—è #{selectedOperation.operationNumber}
                </Text>
                <div>
                  <Text strong>–¢–∏–ø:</Text> {selectedOperation.operationType}
                </div>
                <div>
                  <Text strong>–°—Ç–∞–Ω–æ–∫:</Text> {selectedOperation.machineName} ({selectedOperation.machineType})
                </div>
                <div>
                  <Text strong>–ß–µ—Ä—Ç–µ–∂:</Text> {selectedOperation.orderDrawingNumber}
                </div>
                <div>
                  <Text strong>–í—Ä–µ–º—è:</Text> {selectedOperation.estimatedTime} –º–∏–Ω
                </div>
                
                {/* üÜï –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
                {selectedOperation.syncedWithShifts ? (
                  <div style={{ 
                    padding: '12px', 
                    backgroundColor: '#d4edda', 
                    borderRadius: '8px',
                    marginTop: '8px',
                    border: '2px solid #52c41a'
                  }}>
                    <Text strong style={{ color: '#155724' }}>
                      ‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
                    </Text>
                    <br />
                    <Text style={{ fontSize: '12px', color: '#155724' }}>
                      ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å —Å–º–µ–Ω—ã<br />
                      ‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å–º–µ–Ω<br />
                      ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    </Text>
                    {selectedOperation.synchronizationStatus && (
                      <div style={{ marginTop: '8px' }}>
                        <Text style={{ fontSize: '11px', color: '#666' }}>
                          –ü—Ä–æ–≥—Ä–µ—Å—Å: {selectedOperation.synchronizationStatus.progress.toFixed(1)}% 
                          ({selectedOperation.synchronizationStatus.totalProduced}/{selectedOperation.synchronizationStatus.targetQuantity})
                        </Text>
                      </div>
                    )}
                  </div>
                ) : (
                  <div style={{ 
                    padding: '8px', 
                    backgroundColor: '#fff3cd', 
                    borderRadius: '6px',
                    marginTop: '8px'
                  }}>
                    <Text strong style={{ color: '#856404' }}>
                      ‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞, –Ω–æ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
                    </Text>
                  </div>
                )}
              </Space>
            </Card>
          </Col>
        </Row>
      )}

      {/* üÜï –ö–û–ù–î–ò–¶–ò–û–ù–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù */}
      {useImprovedPlanning ? (
        <PlanningModalImproved
          visible={planningModalVisible}
          onCancel={handleClosePlanningModal}
          selectedMachine={planningMachine}
        />
      ) : (
        <PlanningModal
          visible={planningModalVisible}
          onCancel={handleClosePlanningModal}
          selectedMachine={planningMachine}
        />
      )}
      
      {/* –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
      {planningModalVisible && (
        <div style={{ 
          position: 'fixed', 
          top: 10, 
          right: 10, 
          background: useImprovedPlanning ? '#faad14' : '#52c41a', 
          color: 'white', 
          padding: '10px',
          zIndex: 9999,
          borderRadius: '4px',
          fontWeight: 'bold'
        }}>
          {useImprovedPlanning ? 'üÜï –£–ª—É—á—à–µ–Ω–Ω–æ–µ' : 'üß™ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'} –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ! –°—Ç–∞–Ω–æ–∫: {planningMachine?.machineName}
        </div>
      )}
    </div>
  );
};
