/**
 * @file: MachineCard.tsx
 * @description: Machine card component (enhanced version)
 * @dependencies: antd, machine.types
 * @created: 2025-01-28
 * @updated: 2025-06-07 - Enhanced design and functionality
 */
import React, { useState } from 'react';
import { Card, Tag, Badge, Row, Col, Button, Typography, Space, Modal, InputNumber, Form, Input, Divider, message } from 'antd';
import { 
  ToolOutlined, 
  CheckCircleOutlined, 
  ClockCircleOutlined,
  PlayCircleOutlined,
  CloseCircleOutlined,
  ExclamationCircleOutlined,
  EditOutlined,
  DeleteOutlined,
  WarningOutlined
} from '@ant-design/icons';
import { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';
import { useTranslation } from '../../../i18n';
import { 
  MachineAvailability, 
  getMachineTypeLabel, 
  formatEstimatedTime 
} from '../../../types/machine.types';
import { machinesApi } from '../../../services/machinesApi';
import { shiftsApi } from '../../../services/shiftsApi';
import { useOperationCompletion } from '../../../hooks';
import { OperationCompletionModal } from '../../../components/OperationCompletion';
import { QUERY_KEYS, invalidateOperationRelatedQueries } from '../../../utils/queryKeys';
import dayjs from 'dayjs';

const { confirm } = Modal;
const { Text } = Typography;

interface MachineCardProps {
  machine: MachineAvailability;
  isSelected: boolean;
  onSelect: () => void;
  onOpenPlanningModal?: (machine: MachineAvailability) => void;
}

export const MachineCard: React.FC<MachineCardProps> = ({
  machine,
  isSelected,
  onSelect,
  onOpenPlanningModal,
}) => {
  const { t } = useTranslation();
  const queryClient = useQueryClient();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const [editModalVisible, setEditModalVisible] = useState(false);
  const [progressModalVisible, setProgressModalVisible] = useState(false);
  const [editForm] = Form.useForm();
  const [progressForm] = Form.useForm();

  // –ù–û–í–û–ï: –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
  const {
    completionModalVisible,
    currentCompletedOperation,
    handleCloseOperation,
    handleContinueOperation,
    handlePlanNewOperation,
    handleCloseModal,
    checkSpecificOperation,
    isClosing,
    isContinuing,
    isArchiving,
  } = useOperationCompletion({
    checkInterval: 0, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è Production —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    targetQuantity: 30,
    onOperationClosed: (operation) => {
      console.log('üìã –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –≤ Production:', operation.operationNumber);
      // –û–±–Ω–æ–≤–ª–µ–Ω–æ: –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      invalidateOperationRelatedQueries(queryClient);
    },
    onOperationContinued: (operation) => {
      console.log('‚ñ∂Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞ –≤ Production:', operation.operationNumber);
    },
    onNewOperationPlanned: (operation) => {
      console.log('üöÄ –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ Production –¥–ª—è —Å—Ç–∞–Ω–∫–∞:', operation.machineName);
      // –û–±–Ω–æ–≤–ª–µ–Ω–æ: –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      invalidateOperationRelatedQueries(queryClient);
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      if (onOpenPlanningModal) {
        // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–Ω–æ–∫ –ø–æ –∏–º–µ–Ω–∏
        const foundMachine = { ...machine, machineName: operation.machineName };
        onOpenPlanningModal(foundMachine);
      }
    },
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏–∑ —Å–º–µ–Ω (–ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–∞—Å—à–∏—Ä–µ–Ω –ø–µ—Ä–∏–æ–¥)
  const { data: todayShifts = [] } = useQuery({
    queryKey: ['shifts', 'recent', machine.id],
    queryFn: async () => {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –≤–º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è
      const startDate = dayjs().subtract(3, 'days').format('YYYY-MM-DD');
      const endDate = dayjs().format('YYYY-MM-DD');
      console.log(`üîç –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—Ä–æ—Å —Å–º–µ–Ω –¥–ª—è —Å—Ç–∞–Ω–∫–∞ ${machine.machineName} (ID: ${machine.id}) –∑–∞ –ø–µ—Ä–∏–æ–¥ ${startDate} - ${endDate}`);
      return shiftsApi.getAll({
        startDate,
        endDate,
      });
    },
    refetchInterval: 5000, // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  });

  // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  React.useEffect(() => {
    console.log(`üîç === –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–ê–ù–ö–ê ${machine.machineName} ===`);
    console.log(`üè≠ –î–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–∫–∞:`, {
      id: machine.id,
      machineName: machine.machineName,
      isAvailable: machine.isAvailable,
      currentOperationId: machine.currentOperationId,
      hasCurrentOperationDetails: !!machine.currentOperationDetails,
      currentOperationDetails: machine.currentOperationDetails
    });
    
    console.log(`üìä –î–∞–Ω–Ω—ã–µ —Å–º–µ–Ω:`, {
      shiftsCount: todayShifts?.length || 0,
      shifts: todayShifts
    });
    
    if (todayShifts && todayShifts.length > 0) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å–º–µ–Ω—ã –¥–ª—è —Å—Ç–∞–Ω–∫–∞ ${machine.machineName}:`, todayShifts);
      console.log(`üìä –í—Å–µ–≥–æ —Å–º–µ–Ω: ${todayShifts.length}`);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–º–µ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞–Ω–∫–∞
      const machineShifts = todayShifts.filter((shift: any) => {
        console.log(`üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É ${shift.id}: machineId=${shift.machineId}, –æ–∂–∏–¥–∞–µ–º=${machine.id}`);
        return shift.machineId === parseInt(machine.id);
      });
      
      console.log(`üéØ –°–º–µ–Ω—ã –¥–ª—è —Å—Ç–∞–Ω–∫–∞ ${machine.machineName} (ID: ${machine.id}): ${machineShifts.length}`);
      machineShifts.forEach((shift: any) => {
        console.log(`  üìù –°–º–µ–Ω–∞ ${shift.id}: ${shift.drawingNumber || shift.orderDrawingNumber}, –î–µ–Ω—å: ${shift.dayShiftQuantity}, –ù–æ—á—å: ${shift.nightShiftQuantity}`);
      });
    } else {
      console.log(`‚ùå –ù–ï–¢ –î–ê–ù–ù–´–• –°–ú–ï–ù –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤`);
    }
    console.log(`üîç === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===`);
  }, [todayShifts, machine.id, machine.machineName, machine.currentOperationDetails]);

  // –£–õ–£–ß–®–ï–ù–ù–û–ï –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω
  const operationProgress = React.useMemo(() => {
    console.log(`üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–õ–Ø –°–¢–ê–ù–ö–ê ${machine.machineName} ===`);
    
    if (!machine.currentOperationDetails || !todayShifts) {
      console.log(`üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö:`, {
        hasOperation: !!machine.currentOperationDetails,
        hasShifts: !!todayShifts,
        shiftsLength: todayShifts?.length || 0
      });
      return null;
    }

    console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:`);
    console.log(`   –°—Ç–∞–Ω–æ–∫ ID: ${machine.id} (—Ç–∏–ø: ${typeof machine.id})`);
    console.log(`   –û–ø–µ—Ä–∞—Ü–∏—è: ${machine.currentOperationDetails.orderDrawingNumber}`);
    console.log(`   –í—Å–µ–≥–æ —Å–º–µ–Ω: ${todayShifts.length}`);

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥–æ–π —Å–º–µ–Ω—ã
    console.log(`üìã –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–º–µ–Ω:`);
    todayShifts.forEach((shift: any, index: number) => {
      console.log(`   –°–º–µ–Ω–∞ ${index + 1} (ID: ${shift.id}):`);
      console.log(`     machineId: ${shift.machineId} (—Ç–∏–ø: ${typeof shift.machineId})`);
      console.log(`     drawingNumber: "${shift.drawingNumber}"`);
      console.log(`     orderDrawingNumber: "${shift.orderDrawingNumber}"`);
      console.log(`     operationId: ${shift.operationId}`);
      console.log(`     –¥–∞—Ç–∞: ${shift.date}`);
      console.log(`     –¥–µ–Ω—å: ${shift.dayShiftQuantity}, –Ω–æ—á—å: ${shift.nightShiftQuantity}`);
    });

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è - –∏—â–µ–º —Å–º–µ–Ω—ã –¢–û–õ–¨–ö–û –¥–ª—è –¢–ï–ö–£–©–ï–ô –æ–ø–µ—Ä–∞—Ü–∏–∏
    console.log(`üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ —Å–º–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${machine.currentOperationDetails.orderDrawingNumber}`);
    
    let matchedShifts: any[] = [];
    let usedAlgorithm = 'none';
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    const operationStartTime = (machine.currentOperationDetails as any)?.createdAt || (machine.currentOperationDetails as any)?.startedAt;
    console.log(`üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operationStartTime}`);
    
    // –ê–ª–≥–æ—Ä–∏—Ç–º 1: –¢–û–ß–ù–´–ô –ø–æ–∏—Å–∫ –ø–æ ID –æ–ø–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if (machine.currentOperationId) {
      const algorithm1Results = todayShifts.filter((shift: any) => {
        const matchesOperationId = shift.operationId === machine.currentOperationId;
        console.log(`   üîß –ê–ª–≥–æ—Ä–∏—Ç–º 1 - –°–º–µ–Ω–∞ ${shift.id}: operationId ${shift.operationId} === ${machine.currentOperationId} ‚Üí ${matchesOperationId}`);
        return matchesOperationId;
      });
      
      console.log(`üìà –ê–ª–≥–æ—Ä–∏—Ç–º 1 (–ø–æ ID –æ–ø–µ—Ä–∞—Ü–∏–∏): ${algorithm1Results.length} —Å–º–µ–Ω`);
      
      if (algorithm1Results.length > 0) {
        matchedShifts = algorithm1Results;
        usedAlgorithm = '—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ ID –æ–ø–µ—Ä–∞—Ü–∏–∏';
      }
    }
    
    // –ê–ª–≥–æ—Ä–∏—Ç–º 2: –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞–Ω–∫—É + —á–µ—Ä—Ç–µ–∂—É + –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É (–µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ ID)
    if (matchedShifts.length === 0) {
      const algorithm2Results = todayShifts.filter((shift: any) => {
        const shiftMachineId = parseInt(shift.machineId?.toString() || '0');
        const currentMachineId = parseInt(machine.id?.toString() || '0');
        const matchesMachine = shiftMachineId === currentMachineId;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞
        const drawingNumberField = shift.drawingNumber || shift.orderDrawingNumber;
        const matchesDrawing = drawingNumberField === machine.currentOperationDetails?.orderDrawingNumber;
        
        // –ù–û–í–û–ï: –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–º–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        const shiftDate = dayjs(shift.date || shift.createdAt);
        const isRecent = shiftDate.isAfter(dayjs().subtract(1, 'day'));
        
        const matches = matchesMachine && matchesDrawing && isRecent;
        
        console.log(`   üîß –ê–ª–≥–æ—Ä–∏—Ç–º 2 - –°–º–µ–Ω–∞ ${shift.id}:`);
        console.log(`      —Å—Ç–∞–Ω–æ–∫: ${shiftMachineId} === ${currentMachineId} ‚Üí ${matchesMachine}`);
        console.log(`      —á–µ—Ä—Ç–µ–∂: "${drawingNumberField}" === "${machine.currentOperationDetails?.orderDrawingNumber}" ‚Üí ${matchesDrawing}`);
        console.log(`      –Ω–µ–¥–∞–≤–Ω—è—è: ${shiftDate.format('YYYY-MM-DD HH:mm')} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á) ‚Üí ${isRecent}`);
        console.log(`      –∏—Ç–æ–≥–æ: ${matches}`);
        
        return matches;
      });
      
      console.log(`üìà –ê–ª–≥–æ—Ä–∏—Ç–º 2 (—Å—Ç–∞–Ω–æ–∫ + —á–µ—Ä—Ç–µ–∂ + –≤—Ä–µ–º—è): ${algorithm2Results.length} —Å–º–µ–Ω`);
      
      if (algorithm2Results.length > 0) {
        matchedShifts = algorithm2Results;
        usedAlgorithm = '–ø–æ–∏—Å–∫ –ø–æ —Å—Ç–∞–Ω–∫—É + —á–µ—Ä—Ç–µ–∂—É + –≤—Ä–µ–º–µ–Ω–∏';
      }
    }
    
    // –ê–ª–≥–æ—Ä–∏—Ç–º 3: –¢–æ–ª—å–∫–æ —Å—Ç–∞–Ω–æ–∫ (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º)
    if (matchedShifts.length === 0) {
      const algorithm3Results = todayShifts.filter((shift: any) => {
        const shiftMachineId = parseInt(shift.machineId?.toString() || '0');
        const currentMachineId = parseInt(machine.id?.toString() || '0');
        return shiftMachineId === currentMachineId;
      });
      
      console.log(`‚ö†Ô∏è –ê–ª–≥–æ—Ä–∏—Ç–º 3 (–†–ï–ó–ï–†–í–ù–´–ô - —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–æ–∫): ${algorithm3Results.length} —Å–º–µ–Ω`);
      console.log(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–æ–≥—É—Ç –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π!`);
      
      // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–º–µ–Ω—ã —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏
      matchedShifts = algorithm3Results.slice(-2);
      usedAlgorithm = '—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Å—Ç–∞–Ω–∫—É (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–º–µ–Ω—ã)';
    }

    console.log(`üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–ª–≥–æ—Ä–∏—Ç–º: "${usedAlgorithm}"`);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${matchedShifts.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–º–µ–Ω`);

    if (matchedShifts.length === 0) {
      console.log(`‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –°–û–í–ü–ê–î–ï–ù–ò–ô - –ü–†–û–ë–õ–ï–ú–ê –í –î–ê–ù–ù–´–• –ò–õ–ò –ê–õ–ì–û–†–ò–¢–ú–ï`);
      console.log(`üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:`);
      console.log(`   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ machineId –≤ —Å–º–µ–Ω–∞—Ö –∏ —Å—Ç–∞–Ω–∫–∞—Ö`);
      console.log(`   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —á–µ—Ä—Ç–µ–∂–µ–π`);
      console.log(`   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ operationId –∑–∞–ø–æ–ª–Ω–µ–Ω –≤ —Å–º–µ–Ω–∞—Ö`);
      console.log(`   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (—Å—Ç—Ä–æ–∫–∏ vs —á–∏—Å–ª–∞)`);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω
    const totalProduced = matchedShifts.reduce((sum: number, shift: any) => {
      const dayShift = shift.dayShiftQuantity || 0;
      const nightShift = shift.nightShiftQuantity || 0;
      const total = dayShift + nightShift;
      console.log(`üìä –°–º–µ–Ω–∞ ${shift.id}: ${dayShift} + ${nightShift} = ${total}`);
      return sum + total;
    }, 0);

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∞ –Ω–µ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–µ–º
    const targetQuantity = (machine.currentOperationDetails as any)?.targetQuantity || 
                          (machine.currentOperationDetails as any)?.plannedQuantity || 
                          (machine.currentOperationDetails as any)?.quantity || 
                          30; // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    console.log(`üéØ –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏: ${targetQuantity} –¥–µ—Ç–∞–ª–µ–π`);
    const percentage = Math.min((totalProduced / targetQuantity) * 100, 100);

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const isCompleted = totalProduced >= targetQuantity && totalProduced > 0;
    
    const result = {
      completedParts: totalProduced,
      totalParts: targetQuantity,
      percentage: Math.round(percentage),
      isCompleted: isCompleted,
      startedAt: matchedShifts.length > 0 ? new Date(matchedShifts[0].date) : null,
      dayShiftQuantity: matchedShifts.reduce((sum: number, shift: any) => sum + (shift.dayShiftQuantity || 0), 0),
      nightShiftQuantity: matchedShifts.reduce((sum: number, shift: any) => sum + (shift.nightShiftQuantity || 0), 0),
      dayShiftOperator: matchedShifts.find((shift: any) => shift.dayShiftOperator)?.dayShiftOperator || '-',
      nightShiftOperator: matchedShifts.find((shift: any) => shift.nightShiftOperator)?.nightShiftOperator || '–ê—Ä–∫–∞–¥–∏–π',
      matchingAlgorithm: usedAlgorithm, // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      shiftsUsed: matchedShifts.length, // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    };

    console.log(`üèÅ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, result);
    console.log(`üîç === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===`);

    return result;
  }, [machine.currentOperationDetails, machine.id, todayShifts]);

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ —Å –æ—Ç–º–µ–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  const freeAndClearOperationMutation = useMutation({
    mutationFn: async () => {
      console.log(`üõ†Ô∏è –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞–Ω–æ–∫ ${machine.machineName} —Å –æ—Ç–º–µ–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏`);
      
      // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (machine.currentOperationId) {
        console.log(`üìã –û—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: ${machine.currentOperationId}`);
        await machinesApi.unassignOperation(machine.machineName);
      }
      
      // –ó–∞—Ç–µ–º –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞–Ω–æ–∫
      return await machinesApi.updateAvailability(machine.machineName, true);
    },
    onSuccess: (updatedMachine) => {
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      queryClient.invalidateQueries({ queryKey: ['operations'] });
      queryClient.invalidateQueries({ queryKey: ['shifts'] });
      
      message.success(`–°—Ç–∞–Ω–æ–∫ "${machine.machineName}" –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω, –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞`);
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      if (onOpenPlanningModal) {
        console.log('üéâ –°—Ç–∞–Ω–æ–∫ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω! –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
        setTimeout(() => {
          onOpenPlanningModal(updatedMachine);
        }, 1000);
      }
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–æ–∫
      onSelect();
    },
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å—Ç–∞–Ω–∫–∞:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Å—Ç–∞–Ω–∫–∞');
    },
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–±–µ–∑ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏)
  const updateAvailabilityMutation = useMutation({
    mutationFn: async (isAvailable: boolean) => {
      console.log(`üîÑ –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞–Ω–∫–∞ ${machine.machineName} –Ω–∞ ${isAvailable}`);
      return await machinesApi.updateAvailability(machine.machineName, isAvailable);
    },
    onSuccess: (updatedMachine) => {
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      const status = updatedMachine.isAvailable ? '–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω' : '–æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π';
      message.success(`–°—Ç–∞–Ω–æ–∫ "${machine.machineName}" ${status}`);
    },
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞–Ω–∫–∞');
    },
  });
  const unassignOperationMutation = useMutation({
    mutationFn: () => machinesApi.unassignOperation(machine.machineName),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      message.success(t('machine.message.operation_cancelled'));
    },
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      message.error(t('message.error.delete'));
    },
  });

  // –ú—É—Ç–∞—Ü–∏–∏ –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
  const updateOperationMutation = useMutation({
    mutationFn: async (data: any) => {
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', data);
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
      return { success: true };
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      queryClient.invalidateQueries({ queryKey: ['shifts'] });
      setEditModalVisible(false);
      message.success('–û–ø–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    },
  });

  const deleteOperationMutation = useMutation({
    mutationFn: async (operationId: string) => {
      console.log('–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', operationId);
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
      return { success: true };
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      message.success('–û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    },
  });

  const updateProgressMutation = useMutation({
    mutationFn: async (data: any) => {
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', data);
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
      return { success: true };
    },
    onSuccess: () => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      queryClient.invalidateQueries({ queryKey: ['machines'] });
      queryClient.invalidateQueries({ queryKey: ['shifts'] });
      queryClient.invalidateQueries({ queryKey: ['operation-progress'] });
      setProgressModalVisible(false);
      message.success('–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    },
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ CRUD
  const handleEditOperation = () => {
    if (machine.currentOperationDetails) {
      editForm.setFieldsValue({
        operationType: machine.currentOperationDetails.operationType,
        estimatedTime: machine.currentOperationDetails.estimatedTime,
        operationNumber: machine.currentOperationDetails.operationNumber,
      });
      setEditModalVisible(true);
    }
  };

  const handleDeleteOperation = () => {
    confirm({
      title: '–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
      icon: <ExclamationCircleOutlined />,
      content: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é?',
      okText: '–£–¥–∞–ª–∏—Ç—å',
      okType: 'danger',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      onOk() {
        if (machine.currentOperationId) {
          deleteOperationMutation.mutate(machine.currentOperationId);
        }
      },
    });
  };

  const handleUpdateProgress = () => {
    if (operationProgress) {
      progressForm.setFieldsValue({
        completedParts: operationProgress.completedParts,
        totalParts: operationProgress.totalParts,
        dayShiftQuantity: operationProgress.dayShiftQuantity,
        nightShiftQuantity: operationProgress.nightShiftQuantity,
        dayShiftOperator: operationProgress.dayShiftOperator,
        nightShiftOperator: operationProgress.nightShiftOperator,
      });
    }
    setProgressModalVisible(true);
  };

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è
  const handleAvailabilityChange = (checked: boolean) => {
    console.log('=== AVAILABILITY CHANGE ===');
    console.log('checked:', checked);
    console.log('machine.machineName:', machine.machineName);
    console.log('machine.currentOperationId:', machine.currentOperationId);
    
    if (checked && machine.isAvailable && onOpenPlanningModal) {
      // –ï—Å–ª–∏ —Å—Ç–∞–Ω–æ–∫ —É–∂–µ —Å–≤–æ–±–æ–¥–µ–Ω –∏ –º—ã —Å—Ç–∞–≤–∏–º –≥–∞–ª–æ—á–∫—É, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      onOpenPlanningModal(machine);
      console.log('üéØ Opening planning modal');
    } else if (checked && !machine.isAvailable && machine.currentOperationId) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–æ–≥–æ —Å—Ç–∞–Ω–∫–∞ —Å –æ–ø–µ—Ä–∞—Ü–∏–µ–π
      confirm({
        title: '–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞',
        icon: <ExclamationCircleOutlined />,
        content: (
          <div>
            <p>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –æ–ø–µ—Ä–∞—Ü–∏–µ–π –Ω–∞ —Å—Ç–∞–Ω–∫–µ "{machine.machineName}"?</p>
            <div style={{ marginTop: 16 }}>
              <Button 
                type="primary" 
                danger
                block
                style={{ marginBottom: 8 }}
                onClick={() => {
                  Modal.destroyAll();
                  freeAndClearOperationMutation.mutate();
                }}
                loading={freeAndClearOperationMutation.isPending}
              >
                üóëÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å—Ç–∞–Ω–æ–∫
              </Button>
              <Button 
                block
                onClick={() => {
                  Modal.destroyAll();
                  updateAvailabilityMutation.mutate(true);
                }}
                loading={updateAvailabilityMutation.isPending}
              >
                üíπ –ü—Ä–æ—Å—Ç–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å (–æ—Å—Ç–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é)
              </Button>
            </div>
          </div>
        ),
        footer: null,
        width: 400,
      });
    } else {
      // –û–±—ã—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      const action = checked ? '–æ—Å–≤–æ–±–æ–¥–∏—Ç—å' : '–æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π';
      const title = checked ? '–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞' : '–û—Ç–º–µ—Ç–∫–∞ —Å—Ç–∞–Ω–∫–∞ –∫–∞–∫ –∑–∞–Ω—è—Ç–æ–≥–æ';
      
      confirm({
        title,
        icon: <ExclamationCircleOutlined />,
        content: `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${action} —Å—Ç–∞–Ω–æ–∫ "${machine.machineName}"?`,
        okText: '–î–∞',
        cancelText: '–û—Ç–º–µ–Ω–∞',
        onOk() {
          console.log(checked ? '‚úÖ Making machine available' : '‚ùå Making machine unavailable');
          updateAvailabilityMutation.mutate(checked);
        },
        onCancel() {
          console.log('‚ùå –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        }
      });
    }
    
    console.log('=== END AVAILABILITY CHANGE ===');
  };

  const handleUnassignOperation = (e: React.MouseEvent) => {
    e.stopPropagation();
    
    confirm({
      title: '–û—Ç–º–µ–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
      icon: <ExclamationCircleOutlined />,
      content: `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞–Ω–∫–µ "${machine.machineName}"?`,
      okText: '–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      onOk() {
        unassignOperationMutation.mutate();
      },
    });
  };

  const getStatusBadge = () => {
    if (machine.isAvailable) {
      return <Badge status="success" text={t('machine.status.available')} />;
    }
    return <Badge status="processing" text={t('machine.status.busy')} />;
  };

  const getMachineTypeColor = (type: string) => {
    switch (type) {
      case 'milling-4axis':
      case 'MILLING':
        return '#1890ff';
      case 'milling-3axis':
        return '#13c2c2';
      case 'turning':
      case 'TURNING':
        return '#52c41a';
      default:
        return '#666';
    }
  };

  const getMachineIcon = (type: string) => {
    switch (type) {
      case 'TURNING':
      case 'turning':
        return <ToolOutlined rotate={90} />;
      default:
        return <ToolOutlined />;
    }
  };

  const machineTypeColor = getMachineTypeColor(machine.machineType);

  return (
    <>
      <Card
        hoverable
        onClick={onSelect}
        style={{
          cursor: 'pointer',
          borderColor: isSelected ? machineTypeColor : '#e8e8e8',
          borderWidth: isSelected ? 2 : 1,
          backgroundColor: isSelected ? `${machineTypeColor}08` : '#fff',
          borderRadius: '12px',
          minHeight: 280,
          transition: 'all 0.3s ease',
          boxShadow: isSelected 
            ? `0 4px 16px ${machineTypeColor}30` 
            : '0 2px 8px rgba(0, 0, 0, 0.06)',
        }}
        title={
          <Row align="middle" justify="space-between">
            <Col>
              <Space>
                <span style={{ color: machineTypeColor, fontSize: '18px' }}>
                  {getMachineIcon(machine.machineType)}
                </span>
                <span style={{ 
                  fontSize: '16px', 
                  fontWeight: 'bold',
                  color: machineTypeColor 
                }}>
                  {machine.machineName}
                </span>
              </Space>
            </Col>
            <Col>{getStatusBadge()}</Col>
          </Row>
        }
        styles={{
          body: { padding: '20px' }
        }}
      >
        <Row gutter={[0, 16]}>
          <Col span={24}>
            <Card 
              size="small" 
              style={{ 
                backgroundColor: `${machineTypeColor}10`,
                borderColor: machineTypeColor,
                borderRadius: '8px'
              }}
            >
              <div style={{ textAlign: 'center' }}>
                <div style={{ color: machineTypeColor, fontSize: '24px', marginBottom: '8px' }}>
                  {getMachineIcon(machine.machineType)}
                </div>
                <Text strong style={{ color: machineTypeColor }}>
                  {getMachineTypeLabel(machine.machineType)}
                </Text>
              </div>
            </Card>
          </Col>
          
          <Col span={24}>
            <Card size="small" style={{ borderRadius: '8px' }}>
              {machine.isAvailable ? (
                // –î–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤ - –∫–Ω–æ–ø–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–∏–ø–æ–º —Å—Ç–∞–Ω–∫–∞
                <>
                  <div style={{ marginBottom: '12px', textAlign: 'center' }}>
                    <Badge status="success" text={t('machine.status.available')} />
                  </div>
                  
                  {onOpenPlanningModal && (
                    <Button
                      type="primary"
                      block
                      size="large"
                      onClick={(e) => {
                        e.stopPropagation();
                        onOpenPlanningModal(machine);
                      }}
                      style={{ 
                        backgroundColor: machineTypeColor,
                        borderColor: machineTypeColor,
                        borderRadius: '8px',
                        height: '50px',
                        fontWeight: 'bold',
                        fontSize: '16px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}
                    >
                      <Space>
                        {getMachineIcon(machine.machineType)}
                        <span>{machine.machineType === 'MILLING' ? 'MILLING' : machine.machineType === 'TURNING' ? 'TURNING' : machine.machineType}</span>
                      </Space>
                    </Button>
                  )}
                  
                  <Button
                    danger
                    size="small"
                    type="text"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleAvailabilityChange(false);
                    }}
                    disabled={updateAvailabilityMutation.isPending}
                    style={{ 
                      marginTop: '8px',
                      fontSize: '12px',
                      height: 'auto',
                      padding: '4px 0'
                    }}
                  >
                    ‚ùå {t('machine.action.mark_busy')}
                  </Button>
                </>
              ) : (
                // –î–ª—è –∑–∞–Ω—è—Ç—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤ - –∫–Ω–æ–ø–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
                <>
                  <div style={{ marginBottom: '12px', textAlign: 'center' }}>
                    <Badge status="processing" text={t('machine.status.busy')} />
                  </div>
                  
                  <Button
                    type="default"
                    block
                    icon={<CheckCircleOutlined />}
                    onClick={(e) => {
                      e.stopPropagation();
                      handleAvailabilityChange(true);
                    }}
                    loading={freeAndClearOperationMutation.isPending || updateAvailabilityMutation.isPending}
                    style={{ 
                      borderRadius: '6px',
                      height: '40px',
                      fontWeight: '500'
                    }}
                  >
                    ‚úÖ {t('machine.action.free')}
                  </Button>
                </>
              )}
            </Card>
          </Col>

          {machine.currentOperationDetails && (
            <Col span={24}>
              <Card 
                size="small" 
                style={{ 
                  borderRadius: '8px', 
                  borderColor: operationProgress?.isCompleted ? '#52c41a' : '#faad14',
                  backgroundColor: operationProgress?.isCompleted ? '#f6ffed' : '#fff7e6'
                }}
              >
                <Space direction="vertical" style={{ width: '100%' }}>
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
                  <Row gutter={[8, 8]}>
                    <Col span={24}>
                      <Space wrap>
                        <Tag color={operationProgress?.isCompleted ? 'green' : 'orange'} style={{ borderRadius: '12px', marginBottom: '4px' }}>
                          üìã {t('machine.operation')} #{machine.currentOperationDetails.operationNumber}
                        </Tag>
                        <Tag color="blue" style={{ borderRadius: '12px', marginBottom: '4px' }}>
                          {machine.currentOperationDetails.operationType}
                        </Tag>
                        {operationProgress?.isCompleted && (
                          <Tag color="success" style={{ borderRadius: '12px', marginBottom: '4px' }}>
                            ‚úÖ –ó–ê–í–ï–†–®–ï–ù–û
                          </Tag>
                        )}
                      </Space>
                    </Col>
                  </Row>
                  <Row>
                    <Col span={24}>
                      <Text strong style={{ fontSize: '13px', color: operationProgress?.isCompleted ? '#389e0d' : '#d46b08' }}>
                        üìÑ {machine.currentOperationDetails.orderDrawingNumber}
                      </Text>
                    </Col>
                  </Row>
                  <Row>
                    <Col span={24}>
                      <Text type="secondary" style={{ fontSize: '12px' }}>
                        ‚è±Ô∏è {t('machine.time')}: {formatEstimatedTime(machine.currentOperationDetails.estimatedTime)}
                      </Text>
                    </Col>
                  </Row>
                  {operationProgress && (
                    <>
                      <Row>
                        <Col span={24}>
                          <Text type="secondary" style={{ fontSize: '12px' }}>
                            –î–µ—Ç–∞–ª–∏: {operationProgress.completedParts}/{operationProgress.totalParts}
                          </Text>
                          {operationProgress.isCompleted && (
                            <Tag color="green" style={{ marginLeft: '8px', fontSize: '10px' }}>
                              üéâ –ì–û–¢–û–í–û!
                            </Tag>
                          )}
                          {operationProgress.startedAt && (
                            <>
                              <br />
                              <Text type="secondary" style={{ fontSize: '12px' }}>
                                –ù–∞—á–∞—Ç–æ: {new Date(operationProgress.startedAt).toLocaleTimeString()}
                              </Text>
                            </>
                          )}
                        </Col>
                      </Row>
                      
                      {/* –ù–û–í–û–ï: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ø–æ —Å–º–µ–Ω–∞–º */}
                      <Row style={{ marginTop: '8px' }}>
                        <Col span={24}>
                          <div style={{ 
                            padding: '8px', 
                            backgroundColor: '#f0f9ff', 
                            borderRadius: '6px',
                            border: '1px solid #91d5ff'
                          }}>
                            <Text strong style={{ fontSize: '12px', color: '#1890ff' }}>
                              üìä –í–´–ü–û–õ–ù–ï–ù–ù–´–ô –û–ë–™–ï–ú:
                            </Text>
                            <br />
                            <div style={{ marginTop: '4px' }}>
                              <Text style={{ fontSize: '11px' }}>
                                –î–µ–Ω—å: <Text strong>{operationProgress.dayShiftQuantity}</Text> ({operationProgress.dayShiftOperator})
                              </Text>
                              <br />
                              <Text style={{ fontSize: '11px' }}>
                                –ù–æ—á—å: <Text strong>{operationProgress.nightShiftQuantity}</Text> ({operationProgress.nightShiftOperator})
                              </Text>
                              <br />
                              <Text style={{ fontSize: '12px', color: '#52c41a' }}>
                                <span style={{ fontWeight: 'bold', fontSize: '14px' }}>–í—Å–µ–≥–æ: {operationProgress.completedParts}</span> –¥–µ—Ç–∞–ª–µ–π
                              </Text>
                            </div>
                          </div>
                        </Col>
                      </Row>
                    </>
                  )}

                  <Divider style={{ margin: '12px 0' }} />
                  
                  {/* CRUD –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
                  {operationProgress?.isCompleted ? (
                    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                    <>
                      <Row gutter={8}>
                        <Col span={12}>
                          <Button
                            type="primary"
                            size="small"
                            block
                            icon={<CheckCircleOutlined />}
                            onClick={(e) => {
                              e.stopPropagation();
                              // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                              freeAndClearOperationMutation.mutate();
                            }}
                            style={{ fontSize: '11px', backgroundColor: '#52c41a', borderColor: '#52c41a' }}
                          >
                            ‚úÖ –ó–∞–∫—Ä—ã—Ç—å
                          </Button>
                        </Col>
                        <Col span={12}>
                          <Button
                            type="default"
                            size="small"
                            block
                            icon={<PlayCircleOutlined />}
                            onClick={(e) => {
                              e.stopPropagation();
                              if (onOpenPlanningModal) {
                                onOpenPlanningModal(machine);
                              }
                            }}
                            style={{ fontSize: '11px' }}
                          >
                            üöÄ –ù–æ–≤–∞—è
                          </Button>
                        </Col>
                      </Row>
                      <Row style={{ marginTop: '8px' }}>
                        <Col span={24}>
                          <div style={{ 
                            padding: '6px', 
                            backgroundColor: '#f6ffed', 
                            borderRadius: '4px',
                            border: '1px solid #b7eb8f',
                            textAlign: 'center'
                          }}>
                            <Text style={{ fontSize: '10px', color: '#52c41a' }}>
                              ‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –û–±—â–∏–π –æ–±—ä–µ–º: <Text strong>{operationProgress?.completedParts}</Text> –¥–µ—Ç–∞–ª–µ–π
                            </Text>
                          </div>
                        </Col>
                      </Row>
                    </>
                  ) : (
                    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                    <>
                      <Row gutter={8}>
                        <Col span={6}>
                          <Button
                            type="primary"
                            size="small"
                            block
                            icon={<EditOutlined />}
                            onClick={(e) => {
                              e.stopPropagation();
                              handleEditOperation();
                            }}
                            style={{ fontSize: '11px' }}
                          >
                            –ò–∑–º.
                          </Button>
                        </Col>
                        <Col span={6}>
                          <Button
                            size="small"
                            block
                            icon={<WarningOutlined />}
                            onClick={(e) => {
                              e.stopPropagation();
                              handleUpdateProgress();
                            }}
                            style={{ fontSize: '11px' }}
                          >
                            –ü—Ä–æ–≥.
                          </Button>
                        </Col>
                        <Col span={6}>
                          <Button
                            danger
                            size="small"
                            block
                            icon={<DeleteOutlined />}
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDeleteOperation();
                            }}
                            style={{ fontSize: '11px' }}
                          >
                            –£–¥–∞–ª.
                          </Button>
                        </Col>
                        <Col span={6}>
                          <Button
                            danger
                            size="small"
                            block
                            icon={<CloseCircleOutlined />}
                            onClick={handleUnassignOperation}
                            loading={unassignOperationMutation.isPending}
                            style={{ fontSize: '11px' }}
                          >
                            –û—Ç–º.
                          </Button>
                        </Col>
                      </Row>
                      <Row style={{ marginTop: '8px' }}>
                        <Col span={24}>
                          <div style={{ 
                            padding: '6px', 
                            backgroundColor: '#fff7e6', 
                            borderRadius: '4px',
                            border: '1px solid #ffd591'
                          }}>
                            <Text style={{ fontSize: '10px', color: '#d46b08' }}>
                              üìà –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: –î–µ–Ω—å {operationProgress?.dayShiftQuantity || 0} + –ù–æ—á—å {operationProgress?.nightShiftQuantity || 0} = <Text strong>{operationProgress?.completedParts || 0}</Text>
                            </Text>
                          </div>
                        </Col>
                      </Row>
                    </>
                  )}

                  {/* –ù–û–í–û–ï: –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
                  <Row gutter={8} style={{ marginTop: '8px' }}>
                    <Col span={24}>
                      <Button
                        type="dashed"
                        size="small"
                        block
                        icon={<CheckCircleOutlined />}
                        onClick={(e) => {
                          e.stopPropagation();
                          if (machine.currentOperationId) {
                            checkSpecificOperation(machine.currentOperationId);
                          }
                        }}
                        style={{ fontSize: '11px', borderColor: '#52c41a', color: '#52c41a' }}
                      >
                        üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                      </Button>
                    </Col>
                  </Row>
                </Space>
              </Card>
            </Col>
          )}

          {machine.currentOperationId && !machine.currentOperationDetails && (
            <Col span={24}>
              <Card size="small" style={{ borderRadius: '8px', borderColor: '#faad14', backgroundColor: '#fff7e6' }}>
                <div style={{ marginBottom: '8px' }}>
                  <Space>
                    <Tag color="orange" style={{ borderRadius: '12px' }}>
                      {t('machine.operation')}
                    </Tag>
                    <Text code style={{ fontSize: '12px' }}>
                      {machine.currentOperationId.slice(0, 12)}...
                    </Text>
                  </Space>
                </div>
                
                {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π */}
                <Button
                  danger
                  size="small"
                  block
                  icon={<CloseCircleOutlined />}
                  onClick={handleUnassignOperation}
                  loading={unassignOperationMutation.isPending}
                  style={{
                    borderRadius: '6px',
                    height: '32px',
                    fontSize: '12px'
                  }}
                >
                  {unassignOperationMutation.isPending ? t('machine.action.cancelling') : t('machine.action.cancel_planning')}
                </Button>
              </Card>
            </Col>
          )}

          {machine.lastFreedAt && (
            <Col span={24}>
              <Card size="small" style={{ borderRadius: '8px', backgroundColor: '#fafafa' }}>
                <Space>
                  <ClockCircleOutlined style={{ color: '#666' }} />
                  <div>
                    <Text type="secondary" style={{ fontSize: '12px', display: 'block' }}>
                      {t('machine.last_freed')}:
                    </Text>
                    <Text style={{ fontSize: '13px', fontWeight: '500' }}>
                      {new Date(machine.lastFreedAt).toLocaleString('ru-RU')}
                    </Text>
                  </div>
                </Space>
              </Card>
            </Col>
          )}
          
          <Col span={24} style={{ marginTop: 12 }}>
            <Button
              type={isSelected ? 'primary' : 'default'}
              block
              size="large"
              icon={isSelected ? <CheckCircleOutlined /> : <PlayCircleOutlined />}
              disabled={!machine.isAvailable}
              style={{
                height: '48px',
                borderRadius: '8px',
                fontSize: '14px',
                fontWeight: '500',
                backgroundColor: isSelected ? machineTypeColor : undefined,
                borderColor: isSelected ? machineTypeColor : undefined,
              }}
            >
              {isSelected ? t('machine.action.selected') : t('machine.action.select')}
            </Button>
          </Col>
        </Row>
      </Card>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π */}
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
      <Modal
        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
        open={editModalVisible}
        onCancel={() => setEditModalVisible(false)}
        onOk={() => {
          editForm.validateFields().then(values => {
            updateOperationMutation.mutate(values);
          });
        }}
        confirmLoading={updateOperationMutation.isPending}
      >
        <Form form={editForm} layout="vertical">
          <Form.Item name="operationType" label="–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏" rules={[{ required: true }]}>
            <Input />
          </Form.Item>
          <Form.Item name="estimatedTime" label="–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω)" rules={[{ required: true }]}>
            <InputNumber min={1} style={{ width: '100%' }} />
          </Form.Item>
          <Form.Item name="operationNumber" label="–ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏" rules={[{ required: true }]}>
            <Input />
          </Form.Item>
        </Form>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
      <Modal
        title="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"
        open={progressModalVisible}
        onCancel={() => setProgressModalVisible(false)}
        onOk={() => {
          progressForm.validateFields().then(values => {
            updateProgressMutation.mutate(values);
          });
        }}
        confirmLoading={updateProgressMutation.isPending}
        width={600}
      >
        <Form form={progressForm} layout="vertical">
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item name="completedParts" label="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–µ—Ç–∞–ª–µ–π)" rules={[{ required: true }]}>
                <InputNumber min={0} style={{ width: '100%' }} disabled />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item name="totalParts" label="–ü–ª–∞–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" rules={[{ required: true }]}>
                <InputNumber min={1} style={{ width: '100%' }} />
              </Form.Item>
            </Col>
          </Row>
          
          <Divider>–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–º–µ–Ω–∞–º</Divider>
          
          <Row gutter={16}>
            <Col span={12}>
              <Text strong>–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞:</Text>
              <Form.Item name="dayShiftQuantity" label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" style={{ marginTop: 8 }}>
                <InputNumber min={0} style={{ width: '100%' }} disabled />
              </Form.Item>
              <Form.Item name="dayShiftOperator" label="–û–ø–µ—Ä–∞—Ç–æ—Ä">
                <Input disabled />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Text strong>–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞:</Text>
              <Form.Item name="nightShiftQuantity" label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" style={{ marginTop: 8 }}>
                <InputNumber min={0} style={{ width: '100%' }} disabled />
              </Form.Item>
              <Form.Item name="nightShiftOperator" label="–û–ø–µ—Ä–∞—Ç–æ—Ä">
                <Input disabled />
              </Form.Item>
            </Col>
          </Row>
          
          <div style={{ padding: '12px', backgroundColor: '#f0f9ff', borderRadius: '6px', marginTop: '16px' }}>
            <Text strong style={{ color: '#1890ff' }}>
              üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ —Å–º–µ–Ω –∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
            </Text>
          </div>
        </Form>
      </Modal>

      {/* –ù–û–í–û–ï: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
      <OperationCompletionModal
        visible={completionModalVisible}
        completedOperation={currentCompletedOperation}
        onClose={handleCloseModal}
        onCloseOperation={handleCloseOperation}
        onContinueOperation={handleContinueOperation}
        onPlanNewOperation={handlePlanNewOperation}
        loading={isClosing || isContinuing || isArchiving}
      />
    </>
  );
};
