/**
 * @file: ActiveMachinesMonitor.tsx
 * @description: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏)
 * @dependencies: antd, react-query, machinesApi, operationsApi
 * @created: 2025-06-07
 * @fixed: 2025-06-07 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω–∫–∞
 */
import React, { useState } from 'react';
import {
  Card,
  Row,
  Col,
  Button,
  Progress,
  Tag,
  Spin,
  Empty,
  Tooltip,
  Typography,
  Space,
  Badge,
  Divider,
  message,
} from 'antd';
import {
  PlayCircleOutlined,
  PauseCircleOutlined,
  ToolOutlined,
  ClockCircleOutlined,
  UserOutlined,
  FileTextOutlined,
  SettingOutlined,
} from '@ant-design/icons';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { machinesApi } from '../../../services/machinesApi';
import { operationsApi } from '../../../services/operationsApi';
import { shiftsApi } from '../../../services/shiftsApi';
import { OperationStatus } from '../../../types/operation.types';
import { MachineAvailability } from '../../../types/machine.types';
import { ShiftForm } from './ShiftForm';
import dayjs from 'dayjs';

const { Title, Text } = Typography;

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –¥–µ—Ç–∞–ª–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
interface ExtendedOperationDetails {
  id: number;
  operationNumber: number;
  operationType: string;
  estimatedTime: number;
  orderId: number;
  orderDrawingNumber: string;
  progress?: number; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
}

// –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞–Ω–∫–∞ –±–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
interface ActiveMachine {
  id: string;
  machineName: string;
  machineType: string;
  isAvailable: boolean;
  currentOperationId?: string;
  currentOperationDetails?: ExtendedOperationDetails; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø
  lastFreedAt?: Date | string; // –ì–∏–±–∫–∏–π —Ç–∏–ø
  createdAt: string;
  updatedAt: string;
  status: 'working' | 'setup' | 'idle' | 'maintenance';
  todayProduction?: {
    dayShift: { quantity: number; operator: string };
    nightShift: { quantity: number; operator: string };
    totalTime: number;
    currentOperationOnly: boolean; // –§–ª–∞–≥ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  };
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —Å—Ç–∞–Ω–∫–∞
const getMachineTypeLabel = (type: string): string => {
  if (!type) return '–°—Ç–∞–Ω–æ–∫';
  
  const upperType = type.toUpperCase();
  if (upperType.includes('MILLING')) {
    return '–§—Ä–µ–∑–µ—Ä–Ω—ã–π';
  } else if (upperType.includes('TURNING')) {
    return '–¢–æ–∫–∞—Ä–Ω—ã–π';
  } else if (upperType.includes('DRILLING')) {
    return '–°–≤–µ—Ä–ª–∏–ª—å–Ω—ã–π';
  } else if (upperType.includes('GRINDING')) {
    return '–®–ª–∏—Ñ–æ–≤–∞–ª—å–Ω—ã–π';
  }
  
  return '–°—Ç–∞–Ω–æ–∫';
};

export const ActiveMachinesMonitor: React.FC = () => {
  const [selectedMachineId, setSelectedMachineId] = useState<number | undefined>();
  const [showShiftForm, setShowShiftForm] = useState(false);
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω useQueryClient –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞
  const queryClient = useQueryClient();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–∫–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API)
  const { data: machines, isLoading: machinesLoading, error: machinesError, refetch: refetchMachines } = useQuery({
    queryKey: ['machines-availability'],
    queryFn: machinesApi.getAll,
    refetchInterval: 30000, // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const { data: activeOperations, isLoading: operationsLoading, refetch: refetchOperations } = useQuery({
    queryKey: ['operations', 'in-progress'],
    queryFn: () => operationsApi.getAll(OperationStatus.IN_PROGRESS),
    refetchInterval: 30000,
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å–º–µ–Ω—ã
  const { data: todayShifts, isLoading: shiftsLoading, refetch: refetchShifts } = useQuery({
    queryKey: ['shifts', 'today'],
    queryFn: () => shiftsApi.getAll({
      startDate: dayjs().format('YYYY-MM-DD'),
      endDate: dayjs().format('YYYY-MM-DD'),
    }),
    refetchInterval: 60000, // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  });

  const isLoading = machinesLoading || operationsLoading || shiftsLoading;

  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω
  const calculateProgress = React.useCallback((operation: any, shifts: any[]): number => {
    if (!operation || !shifts.length) return 0;
    
    const totalProduced = shifts.reduce((sum, shift) => 
      sum + (shift.dayShiftQuantity || 0) + (shift.nightShiftQuantity || 0), 0
    );
    
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π –≤ –∑–∞–∫–∞–∑–µ - —ç—Ç–æ —Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
    // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–∏–µ, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
    const targetQuantity = operation.order?.quantity || 100; // fallback –∑–Ω–∞—á–µ–Ω–∏–µ
    
    return Math.min((totalProduced / targetQuantity) * 100, 100);
  }, []);

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  const activeMachines: ActiveMachine[] = React.useMemo(() => {
    if (!machines) return [];

    console.log('üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–∫–æ–≤...');
    console.log('–í—Å–µ–≥–æ —Å—Ç–∞–Ω–∫–æ–≤:', machines.length);
    console.log('–í—Å–µ–≥–æ —Å–º–µ–Ω —Å–µ–≥–æ–¥–Ω—è:', todayShifts?.length || 0);

    return machines.map(machine => {
      console.log(`\n--- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–æ–∫ ${machine.machineName} (ID: ${machine.id}) ---`);
      
      // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞–Ω–∫–∞
      const assignedOperation = activeOperations?.find(
        op => op.machineId === parseInt(machine.id)
      );

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–º–µ–Ω –ø–æ —Å—Ç–∞–Ω–∫—É –ò –ø–æ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      let machineShifts = todayShifts?.filter(
        shift => shift.machineId === parseInt(machine.id)
      ) || [];

      console.log(`–í—Å–µ–≥–æ —Å–º–µ–Ω –¥–ª—è —Å—Ç–∞–Ω–∫–∞: ${machineShifts.length}`);

      // –ï—Å–ª–∏ —É —Å—Ç–∞–Ω–∫–∞ –µ—Å—Ç—å —Ç–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–º–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ –Ω–µ–π
      let currentOperationShifts = machineShifts;
      let showingCurrentOperationOnly = false;
      
      if (machine.currentOperationDetails?.id) {
        console.log(`–§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ ID: ${machine.currentOperationDetails.id}`);
        currentOperationShifts = machineShifts.filter(
          shift => shift.operationId === machine.currentOperationDetails?.id
        );
        showingCurrentOperationOnly = currentOperationShifts.length > 0;
        console.log(`–°–º–µ–Ω –ø–æ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: ${currentOperationShifts.length}`);
      }

      // –ï—Å–ª–∏ –ø–æ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–º–µ–Ω—ã —Å—Ç–∞–Ω–∫–∞
      const shiftsToUse = currentOperationShifts.length > 0 ? currentOperationShifts : machineShifts;
      
      console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–º–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞: ${shiftsToUse.length}`);

      // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω
      const todayProduction = shiftsToUse.reduce((acc, shift) => {
        console.log(`  –°–º–µ–Ω–∞ ID ${shift.id}: –î–µ–Ω—å=${shift.dayShiftQuantity || 0}, –ù–æ—á—å=${shift.nightShiftQuantity || 0}, –û–ø–µ—Ä–∞—Ü–∏—è=${shift.operationId}`);
        return {
          dayShift: {
            quantity: acc.dayShift.quantity + (shift.dayShiftQuantity || 0),
            operator: shift.dayShiftOperator || acc.dayShift.operator,
          },
          nightShift: {
            quantity: acc.nightShift.quantity + (shift.nightShiftQuantity || 0),
            operator: shift.nightShiftOperator || acc.nightShift.operator,
          },
          totalTime: acc.totalTime + 
            (shift.dayShiftQuantity || 0) * (shift.dayShiftTimePerUnit || 0) +
            (shift.nightShiftQuantity || 0) * (shift.nightShiftTimePerUnit || 0),
        };
      }, {
        dayShift: { quantity: 0, operator: '-' },
        nightShift: { quantity: 0, operator: '–ê—Ä–∫–∞–¥–∏–π' },
        totalTime: 0,
      });

      console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å—Ç–∞–Ω–∫–∞ ${machine.machineName}:`, {
        –¥–µ–Ω—å: todayProduction.dayShift.quantity,
        –Ω–æ—á—å: todayProduction.nightShift.quantity,
        —Ç–æ–ª—å–∫–æ_—Ç–µ–∫—É—â–∞—è_–æ–ø–µ—Ä–∞—Ü–∏—è: showingCurrentOperationOnly
      });

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞–Ω–∫–∞
      const machineData: ActiveMachine = {
        id: machine.id,
        machineName: machine.machineName,
        machineType: machine.machineType,
        isAvailable: machine.isAvailable,
        currentOperationId: machine.currentOperationId,
        lastFreedAt: machine.lastFreedAt ? 
          (typeof machine.lastFreedAt === 'string' ? 
            new Date(machine.lastFreedAt) : 
            machine.lastFreedAt) : 
          undefined,
        createdAt: machine.createdAt,
        updatedAt: machine.updatedAt,
        status: assignedOperation ? 
          (!machine.isAvailable ? 'working' : 'setup') : 
          'idle',
        todayProduction: {
          ...todayProduction,
          currentOperationOnly: showingCurrentOperationOnly
        },
      };

      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ API, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
      if (machine.currentOperationDetails) {
        machineData.currentOperationDetails = {
          ...machine.currentOperationDetails,
          progress: calculateProgress(assignedOperation, currentOperationShifts),
        };
      }

      return machineData;
    });
  }, [machines, activeOperations, todayShifts, calculateProgress]);

  const handleCreateShiftRecord = (machineId: string) => {
    setSelectedMachineId(parseInt(machineId));
    setShowShiftForm(true);
  };

  const handleShiftFormClose = () => {
    setShowShiftForm(false);
    setSelectedMachineId(undefined);
  };

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  const handleShiftFormSuccess = async () => {
    message.success('–ó–∞–ø–∏—Å—å —Å–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã...');
    
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    await queryClient.invalidateQueries({ queryKey: ['shifts'] });
    await queryClient.invalidateQueries({ queryKey: ['machines-availability'] });
    await queryClient.invalidateQueries({ queryKey: ['operations'] });
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    setTimeout(async () => {
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 500–º—Å...');
      await refetchShifts();
      await refetchMachines();
      await refetchOperations();
    }, 500);
    
    handleShiftFormClose();
  };

  const getMachineStatusColor = (status: string) => {
    switch (status) {
      case 'working': return 'green';
      case 'setup': return 'orange';
      case 'maintenance': return 'red';
      default: return 'default';
    }
  };

  const getMachineStatusText = (status: string) => {
    switch (status) {
      case 'working': return '–í —Ä–∞–±–æ—Ç–µ';
      case 'setup': return '–ù–∞–ª–∞–¥–∫–∞';
      case 'maintenance': return '–†–µ–º–æ–Ω—Ç';
      default: return '–ü—Ä–æ—Å—Ç–æ–π';
    }
  };

  const formatTime = (minutes: number) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours}—á ${mins}–º`;
  };

  if (isLoading) {
    return (
      <div style={{ textAlign: 'center', padding: '50px' }}>
        <Spin size="large" />
        <div style={{ marginTop: 16 }}>
          <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–Ω–∫–∞—Ö...</Text>
        </div>
      </div>
    );
  }

  if (machinesError) {
    return (
      <div style={{ textAlign: 'center', padding: '50px' }}>
        <Text type="danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–Ω–∫–∞—Ö</Text>
      </div>
    );
  }

  if (activeMachines.length === 0) {
    return (
      <Empty
        image={Empty.PRESENTED_IMAGE_SIMPLE}
        description={
          <span>
            –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤.<br />
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–Ω–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
          </span>
        }
      />
    );
  }

  return (
    <div>
      <div style={{ marginBottom: 24 }}>
        <Title level={3}>
          <ToolOutlined /> –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        </Title>
        <Text type="secondary">
          –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–Ω–∫–∏ –∏ —Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        </Text>
      </div>

      <Row gutter={[16, 16]}>
        {activeMachines.map(machine => (
          <Col xs={24} sm={12} lg={8} xl={6} key={machine.id}>
            <Card
              title={
                <Space>
                  <Badge 
                    status={getMachineStatusColor(machine.status) as any} 
                    text={machine.machineName}
                  />
                  <Tag color="blue">{getMachineTypeLabel(machine.machineType)}</Tag>
                </Space>
              }
              extra={
                <Tag color={getMachineStatusColor(machine.status)}>
                  {getMachineStatusText(machine.status)}
                </Tag>
              }
              actions={[
                <Tooltip title="–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —Å–º–µ–Ω—ã">
                  <Button
                    type="primary"
                    icon={<FileTextOutlined />}
                    onClick={() => handleCreateShiftRecord(machine.id)}
                  >
                    –ó–∞–ø–∏—Å—å —Å–º–µ–Ω—ã
                  </Button>
                </Tooltip>
              ]}
              size="small"
            >
              {machine.currentOperationDetails ? (
                <div>
                  <div style={{ marginBottom: 12 }}>
                    <Text strong>–¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</Text>
                    <br />
                    <Text>–û–ø–µ—Ä–∞—Ü–∏—è {machine.currentOperationDetails.operationNumber}</Text>
                    <br />
                    <Text type="secondary">
                      {machine.currentOperationDetails.orderDrawingNumber}
                    </Text>
                  </div>

                  <div style={{ marginBottom: 12 }}>
                    <Text>–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</Text>
                    <Progress 
                      percent={Math.round(machine.currentOperationDetails.progress || 0)} 
                      size="small"
                      status={(machine.currentOperationDetails.progress || 0) > 80 ? 'success' : 'active'}
                    />
                  </div>

                  <div style={{ marginBottom: 12 }}>
                    <Text>
                      <ClockCircleOutlined /> –í—Ä–µ–º—è: {machine.currentOperationDetails.estimatedTime}–º–∏–Ω
                    </Text>
                  </div>

                  <Divider style={{ margin: '12px 0' }} />

                  <div>
                    <Text strong>
                      –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å–µ–≥–æ–¥–Ω—è
                      {machine.todayProduction?.currentOperationOnly && (
                        <Tag color="blue" style={{ marginLeft: 8, fontSize: '11px', padding: '2px 6px', lineHeight: '16px' }}>
                          –ø–æ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                        </Tag>
                      )}:
                    </Text>
                    <div style={{ marginTop: 8 }}>
                      <Row gutter={8}>
                        <Col span={12}>
                          <div style={{ textAlign: 'center', padding: '8px', backgroundColor: '#f0f9ff', borderRadius: '4px' }}>
                            <Text type="secondary">–î–µ–Ω—å</Text>
                            <br />
                            <Text strong style={{ fontSize: '18px' }}>
                              {machine.todayProduction?.dayShift.quantity || 0}
                            </Text>
                            <br />
                            <Text type="secondary" style={{ fontSize: '12px' }}>
                              {machine.todayProduction?.dayShift.operator}
                            </Text>
                          </div>
                        </Col>
                        <Col span={12}>
                          <div style={{ textAlign: 'center', padding: '8px', backgroundColor: '#f6f6f6', borderRadius: '4px' }}>
                            <Text type="secondary">–ù–æ—á—å</Text>
                            <br />
                            <Text strong style={{ fontSize: '18px' }}>
                              {machine.todayProduction?.nightShift.quantity || 0}
                            </Text>
                            <br />
                            <Text type="secondary" style={{ fontSize: '12px' }}>
                              {machine.todayProduction?.nightShift.operator}
                            </Text>
                          </div>
                        </Col>
                      </Row>
                    </div>
                  </div>
                </div>
              ) : (
                <div style={{ textAlign: 'center', padding: '20px' }}>
                  <PauseCircleOutlined style={{ fontSize: '48px', color: '#d9d9d9' }} />
                  <div style={{ marginTop: 12 }}>
                    <Text type="secondary">–°—Ç–∞–Ω–æ–∫ –ø—Ä–æ—Å—Ç–∞–∏–≤–∞–µ—Ç</Text>
                    <br />
                    <Text type="secondary" style={{ fontSize: '12px' }}>
                      –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                    </Text>
                  </div>
                </div>
              )}
            </Card>
          </Col>
        ))}
      </Row>

      <ShiftForm
        visible={showShiftForm}
        onClose={handleShiftFormClose}
        onSuccess={handleShiftFormSuccess}
        selectedMachineId={selectedMachineId}
      />
    </div>
  );
};
