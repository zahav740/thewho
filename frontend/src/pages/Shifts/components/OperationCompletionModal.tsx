/**
 * @file: FixedOperationCompletionModal.tsx
 * @description: –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * @created: 2025-06-16
 */
import React, { useState, useEffect } from 'react';
import {
  Modal,
  Button,
  Result,
  Card,
  Row,
  Col,
  Statistic,
  Space,
  Typography,
  Tag,
  Alert,
  Progress
} from 'antd';
import {
  CheckCircleOutlined,
  PlayCircleOutlined,
  StopOutlined,
  ToolOutlined,
  ClockCircleOutlined,
  WarningOutlined
} from '@ant-design/icons';
import PlanningModal from '../../../components/PlanningModal/PlanningModal';

const { Title, Text } = Typography;

interface OperationCompletionData {
  machineName: string;
  machineId: string;
  machineType: string;
  operationDetails: {
    orderDrawingNumber: string;
    operationNumber: number;
    targetQuantity: number;
    completedQuantity: number;
    estimatedTime: number;
  };
  dayShift: {
    quantity: number;
    operator: string;
  };
  nightShift: {
    quantity: number;
    operator: string;
  };
}

interface OperationCompletionModalProps {
  visible: boolean;
  data: OperationCompletionData | null;
  onClose: () => void;
  onCloseOperation: () => void;
  onContinueOperation: () => void;
  onPlanNewOperation: () => void;
}

export const OperationCompletionModal: React.FC<OperationCompletionModalProps> = ({
  visible,
  data,
  onClose,
  onCloseOperation,
  onContinueOperation,
  onPlanNewOperation
}) => {
  const [showPlanningModal, setShowPlanningModal] = useState(false);
  const [isDataValid, setIsDataValid] = useState(true);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (data && visible) {
      console.log('üîç –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê:', {
        original: data,
        targetQuantity: data.operationDetails.targetQuantity,
        completedQuantity: data.operationDetails.completedQuantity,
        dayShift: data.dayShift.quantity,
        nightShift: data.nightShift.quantity,
        totalCalculated: data.dayShift.quantity + data.nightShift.quantity
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      const totalCalculated = data.dayShift.quantity + data.nightShift.quantity;
      const isValid = totalCalculated === data.operationDetails.completedQuantity;
      
      if (!isValid) {
        console.warn('‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –û–®–ò–ë–ö–ê –í –î–ê–ù–ù–´–•:', {
          '–£–∫–∞–∑–∞–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ': data.operationDetails.completedQuantity,
          '–†–∞—Å—á–µ—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ': totalCalculated,
          '–î–µ–Ω—å': data.dayShift.quantity,
          '–ù–æ—á—å': data.nightShift.quantity
        });
      }
      
      setIsDataValid(isValid);
    }
  }, [data, visible]);

  if (!data) return null;

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –†–ê–°–ß–ï–¢–´
  const totalCompleted = data.dayShift.quantity + data.nightShift.quantity;
  const correctedCompletedQuantity = totalCompleted; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω
  const progressPercent = Math.round((correctedCompletedQuantity / data.operationDetails.targetQuantity) * 100);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
  const isTargetReached = correctedCompletedQuantity >= data.operationDetails.targetQuantity;
  const isOverproduced = correctedCompletedQuantity > data.operationDetails.targetQuantity;

  const handlePlanNewOperation = () => {
    onClose();
    setShowPlanningModal(true);
  };

  const selectedMachine = {
    id: data.machineId,
    machineName: data.machineName,
    machineType: data.machineType,
    isAvailable: true,
    lastFreedAt: new Date().toISOString(),
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  } as any;

  return (
    <>
      <Modal
        title={
          <Space>
            <CheckCircleOutlined style={{ color: isTargetReached ? '#52c41a' : '#faad14', fontSize: '24px' }} />
            <span style={{ fontSize: '20px', fontWeight: 'bold' }}>
              {isTargetReached ? 'üéâ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!' : '‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'}
            </span>
          </Space>
        }
        open={visible}
        onCancel={onClose}
        width={800}
        footer={null}
        centered
      >
        {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö */}
        {!isDataValid && (
          <Alert
            message="‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö!"
            description={
              <div>
                <Text>–î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–∫–∏. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã:</Text>
                <ul style={{ marginTop: 8, marginBottom: 0 }}>
                  <li>–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data.operationDetails.completedQuantity} –¥–µ—Ç–∞–ª–µ–π</li>
                  <li>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {correctedCompletedQuantity} –¥–µ—Ç–∞–ª–µ–π</li>
                  <li>–†–∞—Å—á–µ—Ç: –î–µ–Ω—å ({data.dayShift.quantity}) + –ù–æ—á—å ({data.nightShift.quantity}) = {correctedCompletedQuantity}</li>
                </ul>
              </div>
            }
            type="warning"
            showIcon
            style={{ marginBottom: 16 }}
          />
        )}

        <Result
          status={isTargetReached ? "success" : "info"}
          title={
            isTargetReached 
              ? `–û–ø–µ—Ä–∞—Ü–∏—è ${data.operationDetails.operationNumber} –∑–∞–≤–µ—Ä—à–µ–Ω–∞` 
              : `–û–ø–µ—Ä–∞—Ü–∏—è ${data.operationDetails.operationNumber} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ`
          }
          subTitle={
            <div>
              <Text>–ù–∞ —Å—Ç–∞–Ω–∫–µ {data.machineName} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ </Text>
              <Text strong style={{ color: isTargetReached ? '#52c41a' : '#faad14' }}>
                {correctedCompletedQuantity} –∏–∑ {data.operationDetails.targetQuantity}
              </Text>
              <Text> –¥–µ—Ç–∞–ª–µ–π</Text>
              {isOverproduced && (
                <div style={{ marginTop: 4 }}>
                  <Tag color="blue">–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {correctedCompletedQuantity - data.operationDetails.targetQuantity} –¥–µ—Ç–∞–ª–µ–π</Tag>
                </div>
              )}
            </div>
          }
          style={{ padding: '20px 0' }}
        />

        {isTargetReached && (
          <Alert
            message="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏!"
            description={`–ß–µ—Ä—Ç–µ–∂ ${data.operationDetails.orderDrawingNumber} - –æ–ø–µ—Ä–∞—Ü–∏—è ${data.operationDetails.operationNumber} –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–∞–ª–µ–π.`}
            type="success"
            showIcon
            style={{ marginBottom: 24, borderRadius: '8px' }}
          />
        )}

        <Row gutter={[16, 16]} style={{ marginBottom: 32 }}>
          <Col span={8}>
            <Card size="small" style={{ 
              textAlign: 'center', 
              borderRadius: '8px', 
              backgroundColor: isTargetReached ? '#f6ffed' : '#fff7e6' 
            }}>
              <Statistic
                title="–í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π"
                value={correctedCompletedQuantity}
                suffix={`/ ${data.operationDetails.targetQuantity}`}
                valueStyle={{ 
                  color: isTargetReached ? '#52c41a' : '#faad14', 
                  fontSize: '24px' 
                }}
                prefix={isTargetReached ? <CheckCircleOutlined /> : <ClockCircleOutlined />}
              />
              <Tag color={isTargetReached ? 'green' : 'orange'} style={{ marginTop: 8 }}>
                {progressPercent}% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
              </Tag>
              <div style={{ marginTop: 8 }}>
                <Progress
                  percent={Math.min(progressPercent, 100)}
                  size="small"
                  strokeColor={isTargetReached ? '#52c41a' : '#faad14'}
                  showInfo={false}
                />
              </div>
            </Card>
          </Col>
          <Col span={8}>
            <Card size="small" style={{ textAlign: 'center', borderRadius: '8px', backgroundColor: '#f0f9ff' }}>
              <Statistic
                title="–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞"
                value={data.dayShift.quantity}
                valueStyle={{ color: '#1890ff', fontSize: '20px' }}
                prefix={<ToolOutlined />}
              />
              <Text type="secondary">{data.dayShift.operator}</Text>
            </Card>
          </Col>
          <Col span={8}>
            <Card size="small" style={{ textAlign: 'center', borderRadius: '8px', backgroundColor: '#f6f6f6' }}>
              <Statistic
                title="–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞"
                value={data.nightShift.quantity}
                valueStyle={{ color: '#722ed1', fontSize: '20px' }}
                prefix={<ClockCircleOutlined />}
              />
              <Text type="secondary">{data.nightShift.operator}</Text>
            </Card>
          </Col>
        </Row>

        <Card 
          title={
            <Space>
              <ToolOutlined />
              {isTargetReached ? "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?" : "–û–ø–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"}
            </Space>
          }
          style={{ borderRadius: '12px', backgroundColor: '#fafafa' }}
        >
          <Text style={{ fontSize: '16px', marginBottom: 24, display: 'block' }}>
            {isTargetReached 
              ? "–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:"
              : `–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å: ${data.operationDetails.targetQuantity - correctedCompletedQuantity} –¥–µ—Ç–∞–ª–µ–π`
            }
          </Text>

          <Space direction="vertical" size="large" style={{ width: '100%' }}>
            {isTargetReached && (
              <Button
                type="primary"
                size="large"
                icon={<StopOutlined />}
                onClick={() => {
                  console.log('‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', {
                    targetQuantity: data.operationDetails.targetQuantity,
                    completedQuantity: correctedCompletedQuantity
                  });
                  onCloseOperation();
                  onClose();
                }}
                block
                style={{ 
                  height: '60px', 
                  fontSize: '16px', 
                  borderRadius: '8px',
                  backgroundColor: '#52c41a',
                  borderColor: '#52c41a'
                }}
              >
                <div style={{ textAlign: 'left' }}>
                  <div style={{ fontWeight: 'bold' }}>–ó–∞–∫—Ä—ã—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é</div>
                  <div style={{ fontSize: '12px', opacity: 0.9 }}>
                    –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ç–∞–Ω–æ–∫ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω
                  </div>
                </div>
              </Button>
            )}

            <Button
              size="large"
              icon={<PlayCircleOutlined />}
              onClick={() => {
                console.log('üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:', { correctedCompletedQuantity });
                onContinueOperation();
                onClose();
              }}
              block
              style={{ 
                height: '60px', 
                fontSize: '16px', 
                borderRadius: '8px'
              }}
            >
              <div style={{ textAlign: 'left' }}>
                <div style={{ fontWeight: 'bold' }}>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é</div>
                <div style={{ fontSize: '12px', opacity: 0.7 }}>
                  {isTargetReached 
                    ? "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞)"
                    : "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"
                  }
                </div>
              </div>
            </Button>

            {isTargetReached && (
              <Button
                size="large"
                icon={<ToolOutlined />}
                onClick={handlePlanNewOperation}
                block
                style={{ 
                  height: '60px', 
                  fontSize: '16px', 
                  borderRadius: '8px'
                }}
              >
                <div style={{ textAlign: 'left' }}>
                  <div style={{ fontWeight: 'bold' }}>–°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é</div>
                  <div style={{ fontSize: '12px', opacity: 0.7 }}>
                    –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                  </div>
                </div>
              </Button>
            )}
          </Space>

          {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ */}
          <div style={{ marginTop: 16, padding: 8, backgroundColor: '#f5f5f5', borderRadius: 4 }}>
            <Text type="secondary" style={{ fontSize: '12px' }}>
              <strong>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong><br/>
              ‚Ä¢ –¶–µ–ª—å: {data.operationDetails.targetQuantity} –¥–µ—Ç–∞–ª–µ–π<br/>
              ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ): {correctedCompletedQuantity} –¥–µ—Ç–∞–ª–µ–π<br/>
              ‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–î: {data.operationDetails.completedQuantity} –¥–µ—Ç–∞–ª–µ–π<br/>
              ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progressPercent}%<br/>
              ‚Ä¢ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å: {isTargetReached ? '–î–∞' : '–ù–µ—Ç'}
            </Text>
          </div>
        </Card>
      </Modal>

      <PlanningModal
        visible={showPlanningModal}
        onCancel={() => setShowPlanningModal(false)}
        selectedMachine={selectedMachine}
      />
    </>
  );
};

export default OperationCompletionModal;
