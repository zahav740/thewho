/**
 * @file: ProductionVolumeCard.tsx
 * @description: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–º–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ —Å–º–µ–Ω–∞–º (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
 * @dependencies: antd, react-query, dayjs
 * @created: 2025-06-15
 */
import React from 'react';
import { Card, Row, Col, Typography, Tag, Space, Button, Tooltip, Spin } from 'antd';
import { ReloadOutlined, BarChartOutlined, ClockCircleOutlined } from '@ant-design/icons';
import { useQuery } from '@tanstack/react-query';
import { shiftsApi } from '../../../services/shiftsApi';
import dayjs from 'dayjs';

const { Text } = Typography;

interface ProductionVolumeCardProps {
  machine: {
    id: string;
    machineName: string;
    currentOperationDetails?: {
      orderDrawingNumber?: string;
      operationNumber?: number;
      operationType?: string;
    };
  };
  showDetailed?: boolean;
}

export const ProductionVolumeCard: React.FC<ProductionVolumeCardProps> = ({ 
  machine, 
  showDetailed = false 
}) => {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–º–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∞–Ω–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  const { data: allMachineShifts, isLoading, refetch } = useQuery({
    queryKey: ['shifts', 'machine', machine.id, dayjs().format('YYYY-MM-DD')],
    queryFn: async () => {
      console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–º–µ–Ω—ã –¥–ª—è —Å—Ç–∞–Ω–∫–∞ ${machine.machineName} (ID: ${machine.id})`);
      
      const shifts = await shiftsApi.getAll({
        startDate: dayjs().format('YYYY-MM-DD'),
        endDate: dayjs().format('YYYY-MM-DD'),
      });
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞–Ω–∫—É
      const machineShifts = shifts.filter(shift => shift.machineId === parseInt(machine.id));
      
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${machineShifts.length} —Å–º–µ–Ω –¥–ª—è —Å—Ç–∞–Ω–∫–∞ ${machine.machineName}`);
      console.log('üìä –°–º–µ–Ω—ã:', machineShifts);
      
      return machineShifts;
    },
    refetchInterval: 5000, // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    staleTime: 2000, // –î–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–º–∏ 2 —Å–µ–∫—É–Ω–¥—ã
  });

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–º–µ–Ω—ã –ø–æ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  const currentOperationShifts = React.useMemo(() => {
    if (!allMachineShifts || !machine.currentOperationDetails?.orderDrawingNumber) {
      return [];
    }

    const filtered = allMachineShifts.filter(shift => {
      const shiftDrawingNumber = shift.drawingNumber || shift.orderDrawingNumber;
      return shiftDrawingNumber === machine.currentOperationDetails?.orderDrawingNumber;
    });

    console.log(`üéØ –û–ø–µ—Ä–∞—Ü–∏—è ${machine.currentOperationDetails.orderDrawingNumber}: –Ω–∞–π–¥–µ–Ω–æ ${filtered.length} —Å–º–µ–Ω`);
    
    return filtered;
  }, [allMachineShifts, machine.currentOperationDetails?.orderDrawingNumber]);

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—ä–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
  const productionData = React.useMemo(() => {
    const data = {
      dayShift: { quantity: 0, operator: '-' },
      nightShift: { quantity: 0, operator: '–ê—Ä–∫–∞–¥–∏–π' },
      totalQuantity: 0,
      hasProduction: false,
    };

    currentOperationShifts.forEach(shift => {
      const dayQty = shift.dayShiftQuantity || 0;
      const nightQty = shift.nightShiftQuantity || 0;

      data.dayShift.quantity += dayQty;
      data.nightShift.quantity += nightQty;
      
      if (shift.dayShiftOperator && dayQty > 0) {
        data.dayShift.operator = shift.dayShiftOperator;
      }
      if (shift.nightShiftOperator && nightQty > 0) {
        data.nightShift.operator = shift.nightShiftOperator;
      }
    });

    data.totalQuantity = data.dayShift.quantity + data.nightShift.quantity;
    data.hasProduction = data.totalQuantity > 0;

    console.log(`üìä –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è ${machine.machineName}:`, data);

    return data;
  }, [currentOperationShifts, machine.machineName]);

  if (isLoading) {
    return (
      <div style={{ textAlign: 'center', padding: '12px' }}>
        <Spin size="small" />
        <Text type="secondary" style={{ fontSize: '12px', marginLeft: '8px' }}>
          –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞...
        </Text>
      </div>
    );
  }

  if (!machine.currentOperationDetails) {
    return (
      <div style={{ textAlign: 'center', padding: '12px' }}>
        <Text type="secondary" style={{ fontSize: '12px' }}>
          –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        </Text>
      </div>
    );
  }

  return (
    <div>
      <Space direction="vertical" style={{ width: '100%' }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
        <div style={{ marginBottom: '8px' }}>
          <Text strong style={{ fontSize: '13px' }}>–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏:</Text>
          <br />
          <Tag color="purple" style={{ fontSize: '10px', marginTop: '4px' }}>
            üìã {machine.currentOperationDetails.orderDrawingNumber}
          </Tag>
          <Tooltip title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ">
            <Button
              type="link"
              size="small"
              icon={<ReloadOutlined />}
              onClick={() => refetch()}
              style={{ padding: '0 4px', fontSize: '10px' }}
            />
          </Tooltip>
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
        {!productionData.hasProduction && (
          <div style={{ textAlign: 'center', margin: '8px 0' }}>
            <Tag color="green" style={{ fontSize: '11px' }}>
              üÜï –ù–û–í–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø
            </Tag>
            <br />
            <Text type="secondary" style={{ fontSize: '10px' }}>
              –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å
            </Text>
          </div>
        )}

        {/* –°–º–µ–Ω—ã –¥–µ–Ω—å/–Ω–æ—á—å */}
        <Row gutter={8}>
          <Col span={12}>
            <div style={{ 
              textAlign: 'center', 
              padding: '8px', 
              backgroundColor: '#f0f9ff', 
              borderRadius: '4px' 
            }}>
              <Text type="secondary" style={{ fontSize: '11px' }}>–î–µ–Ω—å</Text>
              <br />
              <Text strong style={{ fontSize: '18px' }}>
                {productionData.dayShift.quantity}
              </Text>
              <br />
              <Text type="secondary" style={{ fontSize: '10px' }}>
                {productionData.dayShift.operator}
              </Text>
            </div>
          </Col>
          <Col span={12}>
            <div style={{ 
              textAlign: 'center', 
              padding: '8px', 
              backgroundColor: '#f6f6f6', 
              borderRadius: '4px' 
            }}>
              <Text type="secondary" style={{ fontSize: '11px' }}>–ù–æ—á—å</Text>
              <br />
              <Text strong style={{ fontSize: '18px' }}>
                {productionData.nightShift.quantity}
              </Text>
              <br />
              <Text type="secondary" style={{ fontSize: '10px' }}>
                {productionData.nightShift.operator}
              </Text>
            </div>
          </Col>
        </Row>

        {/* –û–ë–©–ò–ô –û–ë–™–ï–ú - –≥–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
        <div style={{ 
          marginTop: '12px', 
          padding: '10px', 
          backgroundColor: '#f0f9ff', 
          borderRadius: '8px',
          border: '2px solid #1890ff'
        }}>
          <div style={{ textAlign: 'center' }}>
            <Text strong style={{ fontSize: '14px', color: '#1890ff' }}>
              üìä –û–ë–©–ò–ô –û–ë–™–ï–ú
            </Text>
            <br />
            <Text strong style={{ fontSize: '24px', color: '#1890ff' }}>
              {productionData.totalQuantity}
            </Text>
            <Text type="secondary" style={{ fontSize: '12px', marginLeft: '4px' }}>
              –¥–µ—Ç–∞–ª–µ–π
            </Text>
            <br />
            
            {/* –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è */}
            <div style={{ marginTop: '4px' }}>
              <Text type="secondary" style={{ fontSize: '11px' }}>
                –î–µ–Ω—å: {productionData.dayShift.quantity} + –ù–æ—á—å: {productionData.nightShift.quantity}
              </Text>
            </div>
            
            {/* –û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ */}
            <div style={{ marginTop: '4px' }}>
              <Text type="secondary" style={{ fontSize: '10px', color: '#52c41a' }}>
                <ClockCircleOutlined /> –û–±–Ω–æ–≤–ª–µ–Ω–æ: {dayjs().format('HH:mm:ss')}
              </Text>
            </div>

            {/* –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            {showDetailed && (
              <div style={{ 
                marginTop: '8px', 
                padding: '6px', 
                backgroundColor: '#fff7e6', 
                borderRadius: '4px',
                fontSize: '10px',
                color: '#8c5700'
              }}>
                <div>üîç –í—Å–µ–≥–æ —Å–º–µ–Ω —Å—Ç–∞–Ω–∫–∞: {allMachineShifts?.length || 0}</div>
                <div>üìã –°–º–µ–Ω –æ–ø–µ—Ä–∞—Ü–∏–∏: {currentOperationShifts.length}</div>
                <div>üìÖ –î–∞—Ç–∞: {dayjs().format('DD.MM.YYYY')}</div>
              </div>
            )}
          </div>
        </div>
      </Space>
    </div>
  );
};

export default ProductionVolumeCard;