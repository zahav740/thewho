/**
 * @file: ShiftForm.tsx
 * @description: –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å–º–µ–Ω—ã (–û–ë–ù–û–í–õ–ï–ù–ê - –¥–æ–±–∞–≤–ª–µ–Ω setupOperator)
 * @dependencies: antd, react-hook-form, shiftsApi
 * @created: 2025-01-28
 * @fixed: 2025-06-07 - –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ setupOperator
 */
import React, { useEffect, useState } from 'react';
import {
  Modal,
  Form,
  DatePicker,
  Select,
  InputNumber,
  Input,
  Radio,
  Space,
  Divider,
  message,
  Spin,
} from 'antd';
import { Controller, useForm } from 'react-hook-form';
import { useQuery, useMutation } from '@tanstack/react-query';
import dayjs from 'dayjs';
import { shiftsApi } from '../../../services/shiftsApi';
import { machinesApi } from '../../../services/machinesApi';
import { operationsApi } from '../../../services/operationsApi';
import { CreateShiftRecordDto, ShiftType } from '../../../types/shift.types';
import { OperationStatus } from '../../../types/operation.types';

const { Option } = Select;

interface ShiftFormProps {
  visible: boolean;
  shiftId?: number;
  selectedMachineId?: number; // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ø—Ä–µ–¥–≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω–∫–∞
  onClose: () => void;
  onSuccess: () => void;
}

export const ShiftForm: React.FC<ShiftFormProps> = ({
  visible,
  shiftId,
  selectedMachineId,
  onClose,
  onSuccess,
}) => {
  const [loading, setLoading] = useState(false);
  const isEdit = !!shiftId;

  const { control, handleSubmit, reset, watch, setValue } = useForm<CreateShiftRecordDto>({
    defaultValues: {
      date: dayjs().format('YYYY-MM-DD'),
      shiftType: ShiftType.DAY,
      nightShiftOperator: '–ê—Ä–∫–∞–¥–∏–π',
    },
  });

  const currentMachineId = watch('machineId');
  const [assignedOperation, setAssignedOperation] = useState<any>(null);
  const [operationLoading, setOperationLoading] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const { data: machines } = useQuery({
    queryKey: ['machines'],
    queryFn: machinesApi.getAll,
  });

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const machinesList = machines?.map((machine: any) => ({
    ...machine,
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    code: machine.machineName || machine.code,
    type: machine.machineType || machine.type
  }));

  // –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–∞–∫–∞–∑–∞—Ö (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const { data: operations } = useQuery({
    queryKey: ['operations', 'in-progress'],
    queryFn: () => operationsApi.getAll(OperationStatus.IN_PROGRESS),
    enabled: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
  });

  // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã
  React.useEffect(() => {
    if (visible && selectedMachineId && !isEdit) {
      setValue('machineId', selectedMachineId);
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∞–Ω–∫–∞
      setOperationLoading(true);
      operationsApi.getAssignedToMachine(selectedMachineId)
        .then(response => {
          if (response.success && response.operation) {
            setAssignedOperation(response.operation);
            setValue('operationId', response.operation.id);
            setValue('drawingNumber', response.operation.orderDrawingNumber || '');
          } else {
            setAssignedOperation(null);
            setValue('operationId', undefined);
            setValue('drawingNumber', '');
          }
        })
        .catch(error => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞–Ω–∫–∞:', error);
          setAssignedOperation(null);
        })
        .finally(() => {
          setOperationLoading(false);
        });
    }
  }, [visible, selectedMachineId, isEdit, setValue]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∞–Ω–∫–∞
  React.useEffect(() => {
    if (currentMachineId) {
      setOperationLoading(true);
      operationsApi.getAssignedToMachine(currentMachineId)
        .then(response => {
          if (response.success && response.operation) {
            setAssignedOperation(response.operation);
            setValue('operationId', response.operation.id);
            setValue('drawingNumber', response.operation.orderDrawingNumber || '');
          } else {
            setAssignedOperation(null);
            setValue('operationId', undefined);
            setValue('drawingNumber', '');
            message.warning(response.message || '–ù–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π');
          }
        })
        .catch(error => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
          setAssignedOperation(null);
          message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏');
        })
        .finally(() => {
          setOperationLoading(false);
        });
    } else {
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —Å—Ç–∞–Ω–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω
      setAssignedOperation(null);
      setValue('operationId', undefined);
      setValue('drawingNumber', '');
    }
  }, [currentMachineId, setValue]);

  // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  React.useEffect(() => {
    if (!visible) {
      reset({
        date: dayjs().format('YYYY-MM-DD'),
        shiftType: ShiftType.DAY,
        nightShiftOperator: '–ê—Ä–∫–∞–¥–∏–π',
      });
      setAssignedOperation(null);
    }
  }, [visible, reset]);

  const { data: shiftData } = useQuery({
    queryKey: ['shift', shiftId],
    queryFn: () => shiftsApi.getById(shiftId!),
    enabled: isEdit,
  });

  useEffect(() => {
    if (shiftData) {
      reset({
        date: shiftData.date,
        shiftType: shiftData.shiftType,
        setupTime: shiftData.setupTime,
        setupOperator: shiftData.setupOperator,
        dayShiftQuantity: shiftData.dayShiftQuantity,
        dayShiftOperator: shiftData.dayShiftOperator,
        dayShiftTimePerUnit: shiftData.dayShiftTimePerUnit,
        nightShiftQuantity: shiftData.nightShiftQuantity,
        nightShiftOperator: shiftData.nightShiftOperator || '–ê—Ä–∫–∞–¥–∏–π',
        nightShiftTimePerUnit: shiftData.nightShiftTimePerUnit,
        operationId: shiftData.operationId,
        machineId: shiftData.machineId,
        drawingNumber: shiftData.drawingNumber,
      });
      
      // –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (shiftData.machineId) {
        setOperationLoading(true);
        operationsApi.getAssignedToMachine(shiftData.machineId)
          .then(response => {
            if (response.success && response.operation) {
              setAssignedOperation(response.operation);
            }
          })
          .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
          })
          .finally(() => {
            setOperationLoading(false);
          });
      }
    }
  }, [shiftData, reset]);

  // –ú—É—Ç–∞—Ü–∏–∏
  const createMutation = useMutation({
    mutationFn: shiftsApi.create,
    onSuccess: () => {
      message.success('–ó–∞–ø–∏—Å—å —Å–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∞');
      onSuccess();
    },
    onError: () => {
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
    },
  });

  const updateMutation = useMutation({
    mutationFn: ({ id, data }: { id: number; data: any }) =>
      shiftsApi.update(id, data),
    onSuccess: () => {
      message.success('–ó–∞–ø–∏—Å—å —Å–º–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      onSuccess();
    },
    onError: () => {
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
    },
  });

  const onSubmit = async (data: CreateShiftRecordDto) => {
    // –î–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞–Ω–∫–∞
    if (!data.machineId && !isEdit) {
      message.error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω–æ–∫');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω—ã (–¥–Ω–µ–≤–Ω–æ–π –∏–ª–∏ –Ω–æ—á–Ω–æ–π)
    if (!data.dayShiftQuantity && !data.nightShiftQuantity) {
      message.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ö–æ—Ç—è –±—ã –¥–ª—è –æ–¥–Ω–æ–π —Å–º–µ–Ω—ã');
      return;
    }

    console.log('üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', data);
    
    setLoading(true);
    try {
      if (isEdit) {
        await updateMutation.mutateAsync({ id: shiftId, data: data });
      } else {
        await createMutation.mutateAsync(data);
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal
      title={isEdit ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å —Å–º–µ–Ω—ã' : '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–º–µ–Ω—ã'}
      open={visible}
      onCancel={onClose}
      onOk={handleSubmit(onSubmit)}
      width={700}
      confirmLoading={loading}
      okText={isEdit ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
      cancelText="–û—Ç–º–µ–Ω–∞"
    >
      <Spin spinning={loading}>
        <Form layout="vertical">
          <Space size="large" style={{ width: '100%' }}>
            <Form.Item label="–î–∞—Ç–∞" required>
              <Controller
                name="date"
                control={control}
                rules={{ required: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' }}
                render={({ field }) => (
                  <DatePicker
                    {...field}
                    format="DD.MM.YYYY"
                    value={field.value ? dayjs(field.value) : null}
                    onChange={(date) => field.onChange(date?.format('YYYY-MM-DD'))}
                  />
                )}
              />
            </Form.Item>

            <Form.Item label="–¢–∏–ø —Å–º–µ–Ω—ã" required>
              <Controller
                name="shiftType"
                control={control}
                render={({ field }) => (
                  <Radio.Group {...field}>
                    <Radio value={ShiftType.DAY}>–î–Ω–µ–≤–Ω–∞—è</Radio>
                    <Radio value={ShiftType.NIGHT}>–ù–æ—á–Ω–∞—è</Radio>
                  </Radio.Group>
                )}
              />
            </Form.Item>
          </Space>

          <Space size="large" style={{ width: '100%' }}>
            <Form.Item label="–°—Ç–∞–Ω–æ–∫" required style={{ width: 250 }}>
              <Controller
                name="machineId"
                control={control}
                rules={{ required: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' }}
                render={({ field }) => (
                  <Select {...field} placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω–æ–∫" showSearch optionFilterProp="children">
                    {machinesList?.map((machine) => {
                      const machineTypeLabel = machine.machineType === 'MILLING' || machine.machineType?.includes('milling') 
                        ? '–§—Ä–µ–∑–µ—Ä–Ω—ã–π' 
                        : machine.machineType === 'TURNING' || machine.machineType?.includes('turning')
                        ? '–¢–æ–∫–∞—Ä–Ω—ã–π'
                        : '–°—Ç–∞–Ω–æ–∫';
                      return (
                        <Option key={machine.id} value={machine.id}>
                          {machine.machineName} - {machineTypeLabel}
                        </Option>
                      );
                    })}
                  </Select>
                )}
              />
            </Form.Item>
          </Space>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
          {currentMachineId && (
            <div style={{ 
              padding: '16px', 
              backgroundColor: assignedOperation ? '#f6f9f6' : '#fff2f0', 
              borderRadius: '6px', 
              marginBottom: '16px',
              border: `1px solid ${assignedOperation ? '#b7eb8f' : '#ffccc7'}`
            }}>
      <h4 style={{ 
        margin: '0 0 12px 0', 
        color: '#262626',
        display: 'flex',
        alignItems: 'center',
        gap: '8px'
      }}>
        {assignedOperation ? '‚úÖ' : '‚ö†Ô∏è'} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏:
      </h4>
              {operationLoading ? (
                <div style={{ textAlign: 'center', padding: '12px' }}>
                  <Spin size="small" /> –ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏...
                </div>
              ) : assignedOperation ? (
                <div style={{ 
                  display: 'flex', 
                  flexDirection: 'column',
                  gap: '12px'
                }}>
                  <div style={{ 
                    display: 'flex', 
                    gap: '24px', 
                    alignItems: 'center',
                    flexWrap: 'wrap'
                  }}>
                    <div style={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: '8px',
                      fontSize: '16px',
                      fontWeight: '500'
                    }}>
                      <span style={{ color: '#1890ff' }}>–û–ø–µ—Ä–∞—Ü–∏—è ‚Ññ:</span> 
                      <span style={{ color: '#262626', fontWeight: 'bold' }}>{assignedOperation.operationNumber}</span>
                    </div>
                    <div style={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: '8px',
                      fontSize: '16px',
                      fontWeight: '500'
                    }}>
                      <span style={{ color: '#1890ff' }}>–ß–µ—Ä—Ç—ë–∂:</span> 
                      <span style={{ color: '#262626', fontWeight: 'bold' }}>{assignedOperation.orderDrawingNumber || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                    </div>
                  </div>
                  
                  {/* üÜï –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ */}
                  {(assignedOperation.orderQuantity || assignedOperation.orderPriority || assignedOperation.orderDeadline) && (
                    <div style={{
                      padding: '12px',
                      backgroundColor: '#e6f7ff',
                      borderRadius: '4px',
                      border: '1px solid #91d5ff'
                    }}>
                      <div style={{ 
                        fontSize: '14px', 
                        fontWeight: '600', 
                        color: '#0050b3',
                        marginBottom: '8px'
                      }}>
                        üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:
                      </div>
                      <div style={{ 
                        display: 'grid',
                        gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',
                        gap: '12px',
                        fontSize: '13px'
                      }}>
                        {assignedOperation.orderQuantity && (
                          <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
                            <span style={{ color: '#1890ff', fontWeight: '500' }}>üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</span>
                            <span style={{ color: '#262626', fontWeight: 'bold', fontSize: '14px' }}>
                              {assignedOperation.orderQuantity} —à—Ç.
                            </span>
                          </div>
                        )}
                        {assignedOperation.orderPriority && (
                          <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
                            <span style={{ color: '#1890ff', fontWeight: '500' }}>üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</span>
                            <span style={{ 
                              color: assignedOperation.orderPriority === 1 ? '#ff4d4f' : 
                                     assignedOperation.orderPriority === 2 ? '#fa8c16' : '#52c41a',
                              fontWeight: 'bold'
                            }}>
                              {assignedOperation.orderPriority}
                            </span>
                          </div>
                        )}
                        {assignedOperation.orderDeadline && (
                          <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
                            <span style={{ color: '#1890ff', fontWeight: '500' }}>üìÖ –î–µ–¥–ª–∞–π–Ω:</span>
                            <span style={{ color: '#262626' }}>
                              {new Date(assignedOperation.orderDeadline).toLocaleDateString('ru-RU')}
                            </span>
                          </div>
                        )}
                        {assignedOperation.orderWorkType && assignedOperation.orderWorkType !== '' && (
                          <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
                            <span style={{ color: '#1890ff', fontWeight: '500' }}>üîß –¢–∏–ø —Ä–∞–±–æ—Ç—ã:</span>
                            <span style={{ color: '#262626' }}>
                              {assignedOperation.orderWorkType}
                            </span>
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                  
                  <div style={{ 
                    display: 'flex', 
                    gap: '16px',
                    fontSize: '14px',
                    color: '#8c8c8c',
                    marginTop: '4px'
                  }}>
                    <span>–¢–∏–ø: {assignedOperation.operationType || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                    <span>–í—Ä–µ–º—è: {assignedOperation.estimatedTime || 0} –º–∏–Ω</span>
                    <span>–°—Ç–∞—Ç—É—Å: {assignedOperation.status}</span>
                  </div>
                </div>
              ) : (
                <div style={{ 
                  textAlign: 'center', 
                  padding: '12px',
                  color: '#ff4d4f'
                }}>
                  <div style={{ fontSize: '16px', marginBottom: '4px' }}>‚ö†Ô∏è –ù–∞ –¥–∞–Ω–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π</div>
                  <div style={{ fontSize: '12px', color: '#8c8c8c' }}>–ó–∞–ø–∏—Å—å —Å–º–µ–Ω—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å</div>
                </div>
              )}
            </div>
          )}

          {/* –°–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
          {assignedOperation && (
            <>
              <Controller
                name="operationId"
                control={control}
                render={({ field }) => <input type="hidden" {...field} />}
              />
              <Controller
                name="drawingNumber"
                control={control}
                render={({ field }) => <input type="hidden" {...field} />}
              />
            </>
          )}

          <Divider orientation="left">–ù–∞–ª–∞–¥–∫–∞</Divider>

          <Space size="large" style={{ width: '100%' }}>
            <Form.Item label="–í—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏ (–º–∏–Ω)">
              <Controller
                name="setupTime"
                control={control}
                render={({ field }) => (
                  <InputNumber {...field} min={0} placeholder="0" />
                )}
              />
            </Form.Item>

            <Form.Item label="–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞–ª–∞–¥–∫–∏">
              <Controller
                name="setupOperator"
                control={control}
                render={({ field }) => <Input {...field} placeholder="–ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" />}
              />
            </Form.Item>
          </Space>

          <Divider orientation="left">–î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞</Divider>

          <Space size="large" style={{ width: '100%' }}>
            <Form.Item label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π">
              <Controller
                name="dayShiftQuantity"
                control={control}
                render={({ field }) => (
                  <InputNumber {...field} min={0} placeholder="0" />
                )}
              />
            </Form.Item>

            <Form.Item label="–û–ø–µ—Ä–∞—Ç–æ—Ä">
              <Controller
                name="dayShiftOperator"
                control={control}
                render={({ field }) => <Input {...field} placeholder="–ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" />}
              />
            </Form.Item>

            <Form.Item label="–í—Ä–µ–º—è –Ω–∞ –¥–µ—Ç–∞–ª—å (–º–∏–Ω)">
              <Controller
                name="dayShiftTimePerUnit"
                control={control}
                render={({ field }) => (
                  <InputNumber {...field} min={0} step={0.1} placeholder="0.0" />
                )}
              />
            </Form.Item>
          </Space>

          <Divider orientation="left">–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞</Divider>

          <Space size="large" style={{ width: '100%' }}>
            <Form.Item label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π">
              <Controller
                name="nightShiftQuantity"
                control={control}
                render={({ field }) => (
                  <InputNumber {...field} min={0} placeholder="0" />
                )}
              />
            </Form.Item>

            <Form.Item label="–û–ø–µ—Ä–∞—Ç–æ—Ä">
              <Controller
                name="nightShiftOperator"
                control={control}
                render={({ field }) => (
                  <Input {...field} placeholder="–ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" />
                )}
              />
            </Form.Item>

            <Form.Item label="–í—Ä–µ–º—è –Ω–∞ –¥–µ—Ç–∞–ª—å (–º–∏–Ω)">
              <Controller
                name="nightShiftTimePerUnit"
                control={control}
                render={({ field }) => (
                  <InputNumber {...field} min={0} step={0.1} placeholder="0.0" />
                )}
              />
            </Form.Item>
          </Space>
        </Form>
      </Spin>
    </Modal>
  );
};
