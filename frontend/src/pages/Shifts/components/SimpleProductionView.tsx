/**
 * @file: SimpleProductionView.tsx
 * @description: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
 */
import React from 'react';
import { Card, Typography, Divider, Row, Col } from 'antd';
import { useQuery } from '@tanstack/react-query';
import { machinesApi } from '../../../services/machinesApi';
import { shiftsApi } from '../../../services/shiftsApi';
import dayjs from 'dayjs';

const { Title, Text } = Typography;

export const SimpleProductionView: React.FC = () => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–∫–æ–≤
  const { data: machines, isLoading: machinesLoading } = useQuery({
    queryKey: ['machines'],
    queryFn: machinesApi.getAll,
  });

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  const { data: todayShifts, isLoading: shiftsLoading } = useQuery({
    queryKey: ['shifts', 'today'],
    queryFn: () => shiftsApi.getAll({
      startDate: dayjs().format('YYYY-MM-DD'),
      endDate: dayjs().format('YYYY-MM-DD'),
    }),
  });

  // –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  React.useEffect(() => {
    console.log('=== –î–ê–ù–ù–´–ï –°–¢–ê–ù–ö–û–í ===');
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è:', machinesLoading);
    console.log('–î–∞–Ω–Ω—ã–µ:', machines);
    
    console.log('=== –î–ê–ù–ù–´–ï –°–ú–ï–ù ===');
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è:', shiftsLoading);
    console.log('–î–∞–Ω–Ω—ã–µ:', todayShifts);
    console.log('–î–∞—Ç–∞ –ø–æ–∏—Å–∫–∞:', dayjs().format('YYYY-MM-DD'));
    
    if (machines && todayShifts) {
      console.log('=== –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• ===');
      machines.forEach(machine => {
        const machineShifts = todayShifts.filter(shift => shift.machineId === parseInt(machine.id));
        console.log(`–°—Ç–∞–Ω–æ–∫ ${machine.machineName} (ID: ${machine.id}):`);
        console.log('  - –í—Å–µ–≥–æ —Å–º–µ–Ω:', machineShifts.length);
        console.log('  - –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:', machine.currentOperationDetails?.orderDrawingNumber);
        
        if (machine.currentOperationDetails) {
          const operationShifts = machineShifts.filter(shift => {
            const drawingNumber = shift.drawingNumber || shift.orderDrawingNumber;
            return drawingNumber === machine.currentOperationDetails?.orderDrawingNumber;
          });
          
          console.log('  - –°–º–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:', operationShifts.length);
          
          if (operationShifts.length > 0) {
            const dayTotal = operationShifts.reduce((sum, shift) => sum + (shift.dayShiftQuantity || 0), 0);
            const nightTotal = operationShifts.reduce((sum, shift) => sum + (shift.nightShiftQuantity || 0), 0);
            const grandTotal = dayTotal + nightTotal;
            
            console.log('  - –î–µ–Ω—å:', dayTotal);
            console.log('  - –ù–æ—á—å:', nightTotal);
            console.log('  - –û–ë–©–ò–ô –û–ë–™–ï–ú:', grandTotal);
          }
        }
        console.log('---');
      });
    }
  }, [machines, machinesLoading, todayShifts, shiftsLoading]);

  if (machinesLoading || shiftsLoading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>;
  }

  return (
    <Card title="üîç –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∏–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞" style={{ margin: '16px 0' }}>
      <Row gutter={[16, 16]}>
        {machines?.map(machine => {
          const machineShifts = todayShifts?.filter(shift => shift.machineId === parseInt(machine.id)) || [];
          
          let operationShifts = [];
          let dayTotal = 0;
          let nightTotal = 0;
          let grandTotal = 0;
          
          if (machine.currentOperationDetails) {
            operationShifts = machineShifts.filter(shift => {
              const drawingNumber = shift.drawingNumber || shift.orderDrawingNumber;
              return drawingNumber === machine.currentOperationDetails?.orderDrawingNumber;
            });
            
            dayTotal = operationShifts.reduce((sum, shift) => sum + (shift.dayShiftQuantity || 0), 0);
            nightTotal = operationShifts.reduce((sum, shift) => sum + (shift.nightShiftQuantity || 0), 0);
            grandTotal = dayTotal + nightTotal;
          }
          
          return (
            <Col xs={24} sm={12} lg={8} key={machine.id}>
              <Card 
                size="small" 
                title={machine.machineName}
                style={{ 
                  borderColor: machine.currentOperationDetails ? '#1890ff' : '#d9d9d9',
                  backgroundColor: machine.currentOperationDetails ? '#f0f9ff' : '#fafafa'
                }}
              >
                <div style={{ fontSize: '12px' }}>
                  <Text strong>ID —Å—Ç–∞–Ω–∫–∞:</Text> {machine.id}
                  <br />
                  <Text strong>–í—Å–µ–≥–æ —Å–º–µ–Ω:</Text> {machineShifts.length}
                  <br />
                  
                  {machine.currentOperationDetails ? (
                    <>
                      <Divider style={{ margin: '8px 0' }} />
                      <Text strong style={{ color: '#1890ff' }}>–¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:</Text>
                      <br />
                      <Text>{machine.currentOperationDetails.orderDrawingNumber}</Text>
                      <br />
                      <Text strong>–°–º–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏:</Text> {operationShifts.length}
                      <br />
                      
                      {operationShifts.length > 0 ? (
                        <>
                          <Divider style={{ margin: '8px 0' }} />
                          <div style={{ 
                            padding: '8px', 
                            backgroundColor: '#e6f7ff', 
                            borderRadius: '4px',
                            border: '1px solid #91d5ff'
                          }}>
                            <Text strong style={{ color: '#1890ff' }}>–ü–†–û–ò–ó–í–û–î–°–¢–í–û:</Text>
                            <br />
                            <Text>–î–µ–Ω—å: {dayTotal}</Text>
                            <br />
                            <Text>–ù–æ—á—å: {nightTotal}</Text>
                            <br />
                            <Text strong style={{ fontSize: '14px', color: '#1890ff' }}>
                              –û–ë–©–ò–ô –û–ë–™–ï–ú: {grandTotal}
                            </Text>
                          </div>
                        </>
                      ) : (
                        <Text type="secondary">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞</Text>
                      )}
                    </>
                  ) : (
                    <>
                      <Divider style={{ margin: '8px 0' }} />
                      <Text type="secondary">–ù–µ—Ç —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏</Text>
                    </>
                  )}
                </div>
              </Card>
            </Col>
          );
        })}
      </Row>
      
      <Divider />
      
      <div style={{ fontSize: '12px', color: '#666' }}>
        <Text strong>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</Text>
        <br />
        –°—Ç–∞–Ω–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {machines?.length || 0}
        <br />
        –°–º–µ–Ω –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {todayShifts?.length || 0}
        <br />
        –î–∞—Ç–∞ –ø–æ–∏—Å–∫–∞: {dayjs().format('YYYY-MM-DD')}
        <br />
        <Text type="secondary">–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (F12)</Text>
      </div>
    </Card>
  );
};

export default SimpleProductionView;
