/**
 * @file: api.ts
 * @description: –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * @dependencies: axios
 * @created: 2025-01-28
 * @updated: 2025-06-21 - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
 */
import axios from 'axios';
import { formatOrderData } from '../utils/operation-formatter';
import { getApiUrl, getApiUrlSync, checkCurrentConnection, refreshApiUrl } from '../config/api.config';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const createApiInstance = (baseURL: string) => {
  const instance = axios.create({
    baseURL,
    headers: {
      'Content-Type': 'application/json',
    },
    withCredentials: false,
    timeout: 15000, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
  });

  // Interceptor –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
  instance.interceptors.request.use(
    (config) => {
      console.log('üîç API REQUEST:', {
        url: config.url,
        method: config.method?.toUpperCase(),
        baseURL: config.baseURL,
        fullURL: `${config.baseURL}${config.url}`,
      });
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è PUT/POST –∑–∞–ø—Ä–æ—Å–æ–≤
      if ((config.method === 'put' || config.method === 'post') && config.data) {
        if (typeof config.data === 'object' && !(config.data instanceof FormData)) {
          const formattedData = formatOrderData(config.data);
          config.data = formattedData;
          console.log('üîÑ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', config.data);
        }
      }
      
      return config;
    },
    (error) => {
      console.error('‚ùå API REQUEST ERROR:', error);
      return Promise.reject(error);
    }
  );

  // Interceptor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
  instance.interceptors.response.use(
    (response) => {
      console.log('‚úÖ API RESPONSE:', {
        status: response.status,
        url: response.config.url,
        method: response.config.method?.toUpperCase(),
      });
      return response;
    },
    async (error) => {
      console.error('‚ùå API ERROR:', {
        status: error.response?.status,
        url: error.config?.url,
        method: error.config?.method?.toUpperCase(),
        message: error.message,
        code: error.code,
      });

      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏ —ç—Ç–æ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      if (
        (error.code === 'NETWORK_ERROR' || error.code === 'ECONNREFUSED' || !error.response) &&
        /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
      ) {
        console.log('üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        
        try {
          const newApiUrl = await refreshApiUrl();
          console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å –Ω–æ–≤—ã–º URL: ${newApiUrl}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º baseURL —Ç–µ–∫—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
          instance.defaults.baseURL = newApiUrl;
          
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º URL
          if (error.config && !error.config.__isRetryRequest) {
            error.config.__isRetryRequest = true;
            error.config.baseURL = newApiUrl;
            return instance(error.config);
          }
        } catch (reconnectError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', reconnectError);
        }
      }

      return Promise.reject(error);
    }
  );

  return instance;
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API —Å –Ω–∞—á–∞–ª—å–Ω—ã–º URL
let api = createApiInstance(getApiUrlSync());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API instance —Å –Ω–æ–≤—ã–º URL
export const updateApiInstance = async (): Promise<void> => {
  try {
    const newUrl = await getApiUrl();
    api = createApiInstance(newUrl);
    console.log(`üîÑ API instance –æ–±–Ω–æ–≤–ª–µ–Ω —Å URL: ${newUrl}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API instance:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export const ensureApiConnection = async (): Promise<boolean> => {
  try {
    const isConnected = await checkCurrentConnection();
    
    if (!isConnected) {
      console.log('üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
      await updateApiInstance();
      return await checkCurrentConnection();
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    return false;
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
(async () => {
  try {
    await updateApiInstance();
    console.log('‚úÖ API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API:', error);
  }
})();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—ã–π API instance
export { api };
export default api;

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
export const getCurrentApiUrl = (): string => api.defaults.baseURL || '';
export const isApiHealthy = checkCurrentConnection;
