/**
 * @file: enhancedOrdersApi.ts
 * @description: API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–º–ø–æ—Ä—Ç–æ–º Excel –∑–∞–∫–∞–∑–æ–≤
 * @dependencies: api
 * @created: 2025-06-09
 */
import api from './api';

export interface ExcelOrderPreview {
  rowNumber: number;
  drawingNumber: string;
  quantity: number;
  deadline: string;
  priority: string;
  workType: string;
  color: string;
  colorLabel: string;
  operations: Array<{
    number: number;
    type: string;
    time: number;
    axes: number;
  }>;
  selected: boolean;
  exists: boolean;
}

export interface ExcelPreviewResult {
  fileName: string;
  totalRows: number;
  orders: ExcelOrderPreview[];
  colorStatistics: {
    green: { count: number; label: string; description: string };
    yellow: { count: number; label: string; description: string };
    red: { count: number; label: string; description: string };
    blue: { count: number; label: string; description: string };
    other: { count: number; label: string; description: string };
  };
  recommendedFilters: Array<{
    color: string;
    label: string;
    count: number;
    description: string;
    priority: number;
    recommended: boolean;
  }>;
  columnMapping: Array<{
    column: string;
    field: string;
    sample: string;
    detected: boolean;
  }>;
}

export interface ImportResult {
  totalRows: number;
  processedRows: number;
  skippedRows: number;
  created: number;
  updated: number;
  duplicatesSkipped: number;
  errors: Array<{ row: number; order: string; error: string; color?: string }>;
  colorStatistics: Record<string, number>;
  summary: {
    greenOrders: number;
    yellowOrders: number;
    redOrders: number;
    blueOrders: number;
  };
  filters: {
    applied: any[];
    total: number;
    selected: number;
  };
}

export interface ImportSelection {
  selectedOrders: string[];
  clearExisting: boolean;
  skipDuplicates: boolean;
  colorFilters: string[];
}

export const enhancedOrdersApi = {
  /**
   * –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Excel —Ñ–∞–π–ª–∞
   */
  analyzeExcel: async (file: File): Promise<{ success: boolean; data: ExcelPreviewResult; message: string }> => {
    console.log('üîç –ê–ù–ê–õ–ò–ó EXCEL: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑:', file.name);

    const formData = new FormData();
    formData.append('excel', file);

    const response = await api.post('/enhanced-orders/analyze-excel', formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
    });

    console.log('‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù:', response.data);
    return response.data;
  },

  /**
   * –ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç Excel —Ñ–∞–π–ª–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
   */
  importFullExcel: async (
    file: File,
    settings?: {
      clearExisting?: boolean;
      skipDuplicates?: boolean;
      colorFilters?: string[];
    }
  ): Promise<{ success: boolean; message: string; data: ImportResult }> => {
    console.log('üöÄ –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢: –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞:', file.name);

    const formData = new FormData();
    formData.append('excel', file);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
    const importSettings = {
      colorFilters: (settings?.colorFilters || ['green', 'yellow', 'red', 'blue']).map(color => ({
        color,
        label: getColorLabel(color),
        description: `–ó–∞–∫–∞–∑—ã —Ü–≤–µ—Ç–∞ ${color}`,
        priority: 1,
        selected: true
      })),
      columnMapping: [
        { fieldName: '–ù–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞', excelColumn: 'C', description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —á–µ—Ä—Ç–µ–∂–∞', required: true },
        { fieldName: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', excelColumn: 'E', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π', required: true },
        { fieldName: '–°—Ä–æ–∫', excelColumn: 'H', description: '–î–µ–¥–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' },
        { fieldName: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', excelColumn: 'K', description: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' },
        { fieldName: '–¢–∏–ø —Ä–∞–±–æ—Ç—ã', excelColumn: 'F', description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç' },
      ],
      importOnlySelected: false,
      clearExistingData: settings?.clearExisting || false,
      skipDuplicates: settings?.skipDuplicates !== false // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true
    };

    formData.append('importSettings', JSON.stringify(importSettings));

    const response = await api.post('/enhanced-orders/upload-excel-full', formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
    });

    console.log('‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù:', response.data);
    return response.data;
  },

  /**
   * –í—ã–±–æ—Ä–æ—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤
   */
  importSelectedOrders: async (
    file: File,
    selection: ImportSelection
  ): Promise<{ success: boolean; message: string; data: ImportResult }> => {
    console.log('üéØ –í–´–ë–û–†–û–ß–ù–´–ô –ò–ú–ü–û–†–¢: –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤');

    const formData = new FormData();
    formData.append('excel', file);
    formData.append('selectedOrders', JSON.stringify(selection.selectedOrders));
    formData.append('clearExisting', String(selection.clearExisting));
    formData.append('skipDuplicates', String(selection.skipDuplicates));
    formData.append('colorFilters', JSON.stringify(selection.colorFilters));

    const response = await api.post('/enhanced-orders/import-selected-orders', formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
    });

    console.log('‚úÖ –í–´–ë–û–†–û–ß–ù–´–ô –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù:', response.data);
    return response.data;
  },
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ü–≤–µ—Ç–æ–≤
function getColorLabel(color: string): string {
  const labels: Record<string, string> = {
    green: '–ó–µ–ª–µ–Ω—ã–π (–ì–æ—Ç–æ–≤—ã–µ)',
    yellow: '–ñ–µ–ª—Ç—ã–π (–û–±—ã—á–Ω—ã–µ)',
    red: '–ö—Ä–∞—Å–Ω—ã–π (–ö—Ä–∏—Ç–∏—á–Ω—ã–µ)',
    blue: '–°–∏–Ω–∏–π (–ü–ª–∞–Ω–æ–≤—ã–µ)',
    other: '–î—Ä—É–≥–∏–µ —Ü–≤–µ—Ç–∞'
  };
  return labels[color] || `–¶–≤–µ—Ç: ${color}`;
}

export default enhancedOrdersApi;
