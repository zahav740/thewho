/**
 * @file: operatorsApi.ts (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
 * @description: API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
 * @dependencies: api
 * @created: 2025-06-09
 * @updated: 2025-06-16 - –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–º–µ–Ω
 */
import api from './api';

export interface Operator {
  id: number;
  name: string;
  isActive: boolean;
  operatorType: 'SETUP' | 'PRODUCTION' | 'BOTH';
  createdAt: string;
  updatedAt: string;
}

export interface CreateOperatorDto {
  name: string;
  operatorType?: 'SETUP' | 'PRODUCTION' | 'BOTH';
}

export interface UpdateOperatorDto {
  name?: string;
  isActive?: boolean;
  operatorType?: 'SETUP' | 'PRODUCTION' | 'BOTH';
}

export const operatorsApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
  getAll: async (type?: string, active?: boolean): Promise<Operator[]> => {
    try {
      const params = new URLSearchParams();
      if (type) params.append('type', type);
      if (active !== undefined) params.append('active', active.toString());
      
      const url = `/operators?${params.toString()}`;
      console.log('üîç operatorsApi.getAll: –ó–∞–ø—Ä–æ—Å –∫ API:', url);
      
      const response = await api.get(url);
      
      console.log('‚úÖ operatorsApi.getAll: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
        url,
        dataLength: response.data?.length || 0,
        data: response.data,
        params: { type, active }
      });
      
      return response.data;
    } catch (error: any) {
      console.error('‚ùå operatorsApi.getAll: –û—à–∏–±–∫–∞:', error);
      
      // –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤');
      return [
        { id: 1, name: 'Denis', isActive: true, operatorType: 'BOTH', createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() },
        { id: 2, name: 'Andrey', isActive: true, operatorType: 'BOTH', createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() },
        { id: 3, name: 'Daniel', isActive: true, operatorType: 'BOTH', createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() },
        { id: 4, name: 'Slava', isActive: true, operatorType: 'BOTH', createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() },
        { id: 5, name: 'Kirill', isActive: true, operatorType: 'BOTH', createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() },
        { id: 6, name: '–ê—Ä–∫–∞–¥–∏–π', isActive: true, operatorType: 'PRODUCTION', createdAt: new Date().toISOString(), updatedAt: new Date().toISOString() }
      ];
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞–ª–∞–¥–∫–∏
  getSetupOperators: async (): Promise<Operator[]> => {
    try {
      console.log('üîß operatorsApi.getSetupOperators: –ó–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞–ª–∞–¥–∫–∏');
      const response = await api.get('/operators/setup');
      
      console.log('‚úÖ operatorsApi.getSetupOperators: –ü–æ–ª—É—á–µ–Ω–æ:', {
        count: response.data?.length || 0,
        operators: response.data?.map((op: Operator) => op.name) || []
      });
      
      return response.data;
    } catch (error: any) {
      console.error('‚ùå operatorsApi.getSetupOperators: –û—à–∏–±–∫–∞:', error);
      // Fallback –∫ –æ–±—â–µ–º—É API
      return operatorsApi.getAll('SETUP', true);
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
  getProductionOperators: async (): Promise<Operator[]> => {
    try {
      console.log('üè≠ operatorsApi.getProductionOperators: –ó–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞');
      const response = await api.get('/operators/production');
      
      console.log('‚úÖ operatorsApi.getProductionOperators: –ü–æ–ª—É—á–µ–Ω–æ:', {
        count: response.data?.length || 0,
        operators: response.data?.map((op: Operator) => op.name) || []
      });
      
      return response.data;
    } catch (error: any) {
      console.error('‚ùå operatorsApi.getProductionOperators: –û—à–∏–±–∫–∞:', error);
      // Fallback –∫ –æ–±—â–µ–º—É API
      return operatorsApi.getAll('PRODUCTION', true);
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ ID
  getById: async (id: number): Promise<Operator> => {
    try {
      console.log('üÜî operatorsApi.getById: –ó–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ ID:', id);
      const response = await api.get(`/operators/${id}`);
      
      console.log('‚úÖ operatorsApi.getById: –ü–æ–ª—É—á–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå operatorsApi.getById: –û—à–∏–±–∫–∞:', error);
      throw error;
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  create: async (data: CreateOperatorDto): Promise<Operator> => {
    try {
      console.log('‚ûï operatorsApi.create: –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', data);
      const response = await api.post('/operators', data);
      
      console.log('‚úÖ operatorsApi.create: –°–æ–∑–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå operatorsApi.create: –û—à–∏–±–∫–∞:', error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  update: async (id: number, data: UpdateOperatorDto): Promise<Operator> => {
    try {
      console.log('‚úèÔ∏è operatorsApi.update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', { id, data });
      const response = await api.put(`/operators/${id}`, data);
      
      console.log('‚úÖ operatorsApi.update: –û–±–Ω–æ–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå operatorsApi.update: –û—à–∏–±–∫–∞:', error);
      throw error;
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
  delete: async (id: number): Promise<{ message: string }> => {
    try {
      console.log('üóëÔ∏è operatorsApi.delete: –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', id);
      const response = await api.delete(`/operators/${id}`);
      
      console.log('‚úÖ operatorsApi.delete: –û–ø–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå operatorsApi.delete: –û—à–∏–±–∫–∞:', error);
      throw error;
    }
  },

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
  test: async (): Promise<any> => {
    try {
      console.log('üß™ operatorsApi.test: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤');
      const response = await api.get('/operators/test');
      
      console.log('‚úÖ operatorsApi.test: –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå operatorsApi.test: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      return {
        status: 'error',
        message: 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        error: error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }
};