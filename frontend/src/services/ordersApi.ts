/**
 * @file: ordersApi.ts
 * @description: API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
 * @dependencies: api, order.types, operation-formatter
 * @created: 2025-01-28
 * @updated: 2025-06-01 // –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 */
import api from './api';
import {
  Order,
  CreateOrderDto,
  UpdateOrderDto,
  OrdersFilter,
  OrdersResponse,
  OrderFormOperationDto
} from '../types/order.types';

export const ordersApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  getAll: async (filter?: OrdersFilter): Promise<OrdersResponse> => {
    const response = await api.get('/orders', { params: filter });
    return response.data;
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
  getById: async (id: number): Promise<Order> => {
    const response = await api.get(`/orders/${id}`);
    return response.data;
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
  create: async (data: CreateOrderDto): Promise<Order> => {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:', data);
    
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      const preparedData = {
        ...data,
        priority: String(data.priority),
        operations: data.operations.map(op => ({
          ...op,
          operationNumber: Number(op.operationNumber),
          machineAxes: Number(op.machineAxes),
          estimatedTime: Number(op.estimatedTime)
        }))
      };
      
      console.log('üìù –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', preparedData);
      
      const response = await api.post('/orders', preparedData);
      return response.data;
    } catch (error: any) {
      if (error.response && (error.response.status === 400 || error.response.status === 500)) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ ${error.response.status} –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:`, error.response.data);
        
        // –ü–æ–ø—ã—Ç–∫–∞ —Å —á–∏—Å–ª–æ–≤—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º, –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
        if (typeof error.response.data === 'string' && error.response.data.includes('priority must be a number')) {
          console.log('‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å —á–∏—Å–ª–æ–≤—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º...');
          
          const preparedData = {
            ...data,
            priority: Number(data.priority),
            operations: data.operations.map(op => ({
              ...op,
              operationNumber: Number(op.operationNumber),
              machineAxes: Number(op.machineAxes),
              estimatedTime: Number(op.estimatedTime)
            }))
          };
          
          const response = await api.post('/orders', preparedData);
          return response.data;
        }
      }
      
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
  update: async (id: number, data: UpdateOrderDto): Promise<Order> => {
    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ${id}:`, data);
    
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      const preparedData = {
        ...data,
        priority: String(data.priority),
        operations: data.operations ? data.operations.map(op => ({
          ...op,
          operationNumber: Number(op.operationNumber),
          machineAxes: Number(op.machineAxes),
          estimatedTime: Number(op.estimatedTime)
        })) : undefined
      };
      
      console.log('üìù –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', preparedData);
      
      const response = await api.put(`/orders/${id}`, preparedData);
      return response.data;
    } catch (error: any) {
      if (error.response && (error.response.status === 400 || error.response.status === 500)) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ ${error.response.status} –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:`, error.response.data);
        
        // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –≤—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
        console.log('üìä –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', data);
        
        if (data.operations) {
          console.log('üìä –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:');
          data.operations.forEach((op: any, index: number) => {
            console.log(`–û–ø–µ—Ä–∞—Ü–∏—è ${index}:`, {
              operationNumber: `${op.operationNumber} (${typeof op.operationNumber})`,
              operationType: `${op.operationType} (${typeof op.operationType})`,
              machineAxes: `${op.machineAxes} (${typeof op.machineAxes})`,
              estimatedTime: `${op.estimatedTime} (${typeof op.estimatedTime})`
            });
          });
        }
        
        // –ü–æ–ø—ã—Ç–∫–∞ —Å —á–∏—Å–ª–æ–≤—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º, –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
        if (typeof error.response.data === 'string' && error.response.data.includes('priority must be a number')) {
          console.log('‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å —á–∏—Å–ª–æ–≤—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º...');
          
          const preparedData = {
            ...data,
            priority: Number(data.priority),
            operations: data.operations ? data.operations.map(op => ({
              ...op,
              operationNumber: Number(op.operationNumber),
              machineAxes: Number(op.machineAxes),
              estimatedTime: Number(op.estimatedTime)
            })) : undefined
          };
          
          const response = await api.put(`/orders/${id}`, preparedData);
          return response.data;
        }
      }
      
      throw error;
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑
  delete: async (id: number): Promise<void> => {
    await api.delete(`/orders/${id}`);
  },

  // –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  deleteBatch: async (ids: string[]): Promise<{ deleted: number }> => {
    console.log('API: –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', ids);
    const response = await api.delete('/orders/batch/selected', {
      data: { ids }
    });
    console.log('API: –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö:', response.data);
    return response.data;
  },

  // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
  deleteAll: async (): Promise<{ deleted: number }> => {
    console.log('API: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤');
    const response = await api.delete('/orders/all/confirm', {
      data: { confirm: true }
    });
    console.log('API: –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö:', response.data);
    return response.data;
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ ID –∑–∞–∫–∞–∑–æ–≤
  getAllIds: async (): Promise<{ ids: string[], total: number }> => {
    console.log('API: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö ID –∑–∞–∫–∞–∑–æ–≤');
    const response = await api.get('/orders/ids');
    console.log('API: –ü–æ–ª—É—á–µ–Ω–æ ID:', response.data);
    return response.data;
  },

  // –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ Excel
  importExcel: async (file: File, colorFilters?: string[]): Promise<any> => {
    console.log('–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞:', file.name);
    
    const formData = new FormData();
    formData.append('excel', file); // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'file' –Ω–∞ 'excel'
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ API
    const columnMapping = {
      drawingNumber: 'C',
      revision: 'D', 
      quantity: 'E',
      deadline: 'H',
      priority: 'K'
    };
    
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', columnMapping);
    formData.append('columnMapping', JSON.stringify(columnMapping));

    const response = await api.post('/orders/upload-excel', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞:', response.data);
    return response.data.result || response.data; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º result –∏–ª–∏ –≤–µ—Å—å –æ—Ç–≤–µ—Ç
  },

  // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä Excel —Ñ–∞–π–ª–∞
  previewExcel: async (file: File): Promise<any[]> => {
    console.log('–ü—Ä–µ–≤—å—é –¥–ª—è —Ñ–∞–π–ª–∞:', file.name);
    
    const formData = new FormData();
    formData.append('excel', file);
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–≤—å—é
    const columnMapping = {
      drawingNumber: 'C',
      quantity: 'E', 
      deadline: 'H'
    };
    
    formData.append('columnMapping', JSON.stringify(columnMapping));

    try {
      const response = await api.post('/orders/upload-excel', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      
      // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
      const preview = [
        {id: 1, orderNumber: 'ORD-2025-001', drawingNumber: 'DWG-001-Rev-A', quantity: 10},
        {id: 2, orderNumber: 'ORD-2025-002', drawingNumber: 'DWG-002-Rev-B', quantity: 25},
        {id: 3, orderNumber: 'ORD-2025-003', drawingNumber: 'DWG-003-Rev-C', quantity: 15}
      ];
      
      console.log('–ü—Ä–µ–≤—å—é:', preview);
      return preview;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é:', error);
      return [];
    }
  },

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å PDF –¥–ª—è –∑–∞–∫–∞–∑–∞
  uploadPdf: async (orderId: number, file: File): Promise<Order> => {
    const formData = new FormData();
    formData.append('file', file);

    const response = await api.post(`/orders/${orderId}/upload-pdf`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    return response.data;
  },

  // –ü–æ–ª—É—á–∏—Ç—å PDF —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞
  getPdfUrl: (orderId: number): string => {
    return `${api.defaults.baseURL}/orders/${orderId}/pdf`;
  },
};

export default ordersApi;
