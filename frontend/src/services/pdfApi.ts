/**
 * @file: pdfApi.ts
 * @description: API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF —Ñ–∞–π–ª–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
 * @dependencies: axios
 * @created: 2025-06-21
 */
import { api } from './api';

export interface PdfUploadResponse {
  success: boolean;
  pdfPath?: string;
  pdfUrl?: string;
  message?: string;
}

export class PdfApi {
  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å PDF —Ñ–∞–π–ª –¥–ª—è –∑–∞–∫–∞–∑–∞
   */
  async uploadPdf(orderId: number, file: File): Promise<PdfUploadResponse> {
    const formData = new FormData();
    formData.append('file', file);

    console.log(`üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ PDF –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}:`, {
      fileName: file.name,
      fileSize: file.size,
      fileType: file.type,
    });

    try {
      const response = await api.post<any>(`/orders/${orderId}/upload-pdf`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      console.log('‚úÖ PDF —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', response.data);

      return {
        success: true,
        pdfPath: response.data.pdfPath,
        pdfUrl: response.data.pdfUrl,
        message: 'PDF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
      };
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF:', error);
      
      const errorMessage = error.response?.data?.message || 
                          error.message || 
                          '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF —Ñ–∞–π–ª–∞';

      return {
        success: false,
        message: errorMessage,
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF —Ñ–∞–π–ª–∞
   */
  getPdfUrl(orderId: number): string {
    const baseUrl = process.env.REACT_APP_API_URL || '/api';
    return `${baseUrl}/orders/${orderId}/pdf`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏
   */
  getPdfUrlByPath(pdfPath: string): string {
    const baseUrl = process.env.REACT_APP_API_URL || '/api';
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏
    const filename = pdfPath.split('/').pop() || pdfPath;
    console.log('üìÑ PDF URL generation:', { pdfPath, filename, baseUrl });
    return `${baseUrl}/orders/pdf/${filename}`;
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å PDF —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞
   */
  async deletePdf(orderId: number): Promise<PdfUploadResponse> {
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ PDF –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);

    try {
      const response = await api.delete<any>(`/orders/${orderId}/pdf`);

      console.log('‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:', response.data);

      return {
        success: true,
        message: 'PDF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
      };
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è PDF:', error);
      
      const errorMessage = error.response?.data?.message || 
                          error.message || 
                          '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ PDF —Ñ–∞–π–ª–∞';

      return {
        success: false,
        message: errorMessage,
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PDF —Ñ–∞–π–ª–∞
   */
  async checkPdfAvailability(orderId: number): Promise<boolean> {
    try {
      const response = await api.head(`/orders/${orderId}/pdf`);
      return response.status === 200;
    } catch (error) {
      return false;
    }
  }

  /**
   * –°–∫–∞—á–∞—Ç—å PDF —Ñ–∞–π–ª
   */
  async downloadPdf(orderId: number, fileName?: string): Promise<void> {
    try {
      const response = await api.get(`/orders/${orderId}/pdf`, {
        responseType: 'blob',
      });

      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', fileName || `order-${orderId}.pdf`);
      document.body.appendChild(link);
      link.click();
      
      // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
      link.remove();
      window.URL.revokeObjectURL(url);

      console.log(`‚úÖ PDF —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞ ${orderId} —Å–∫–∞—á–∞–Ω`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}:`, error);
      throw error;
    }
  }
}

export const pdfApi = new PdfApi();
