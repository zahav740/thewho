/**
 * @file: planningApi.ts
 * @description: API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
 * @dependencies: api
 * @created: 2025-05-28
 * @updated: 2025-06-08 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç–∏–ø—ã
 */
import api from './api';
import axios from 'axios';

// –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const planningApiInstance = axios.create({
  baseURL: api.defaults.baseURL || 'http://localhost:3001/api',
  headers: api.defaults.headers,
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
planningApiInstance.interceptors.response.use(
  response => response,
  error => {
    // –ï—Å–ª–∏ —ç—Ç–æ 404 –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (error.response?.status === 404) {
      console.warn('Planning endpoint not found, ignoring...');
      return Promise.resolve({ data: null });
    }
    return Promise.reject(error);
  }
);

export interface PlanningRequest {
  selectedMachines: number[];
  excelData?: any;
}

export interface PlanningResult {
  selectedOrders: any[];
  operationsQueue: {
    orderId: number;
    operationId: number;
    machineId: number;
    priority: number;
    estimatedTime: number;
    startTime?: string;
    endTime?: string;
  }[];
  totalTime: number;
  calculationDate: string;
}

export interface DemoResult {
  success: boolean;
  message: string;
  result: PlanningResult;
}

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export const planningApi = {
  // üÜï –£–õ–£–ß–®–ï–ù–ù–û–ï –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
  planProductionImproved: async (request: PlanningRequest): Promise<any> => {
    const response = await planningApiInstance.post('/planning-improved/plan', request);
    return response.data;
  },

  // üÜï –î–ï–ú–û —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  demoImprovedPlanning: async (): Promise<any> => {
    const response = await planningApiInstance.post('/planning-improved/demo');
    return response.data;
  },

  // üìä –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
  getSystemAnalysis: async () => {
    const response = await planningApiInstance.get('/planning-improved/analysis');
    return response.data;
  },

  // üéØ –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ —Å—Ç–∞–Ω–æ–∫ (–ò–°–ü–†–ê–í–õ–ï–ù–û - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã)
  assignOperation: async (operationId: string, machineId: string) => {
    const response = await planningApiInstance.post('/planning/assign-operation', {
      operationId: parseInt(operationId), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ number –¥–ª—è backend
      machineId: parseInt(machineId) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ number –¥–ª—è backend
    });
    return response.data;
  },

  // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)
  planProduction: async (request: PlanningRequest): Promise<PlanningResult> => {
    const response = await planningApiInstance.post('/planning/plan', request);
    return response.data;
  },

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ç–∞–Ω–∫–∞–º–∏ (–±—ã–≤—à–µ–µ –¥–µ–º–æ)
  demoPlanning: async (): Promise<DemoResult> => {
    const response = await planningApiInstance.post('/planning/demo');
    return response.data;
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  getLatestResults: async () => {
    const response = await planningApiInstance.get('/planning/results/latest');
    return response.data;
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–π
  getOperationProgress: async (orderIds?: number[]) => {
    const params = orderIds ? { orderIds: orderIds.join(',') } : {};
    const response = await planningApiInstance.get('/planning/progress', { params });
    return response.data;
  },
};
