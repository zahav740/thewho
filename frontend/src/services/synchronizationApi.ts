/**
 * @file: synchronizationApi.ts
 * @description: API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –º–µ–∂–¥—É Production –∏ Shifts
 * @dependencies: axios
 * @created: 2025-06-15
 */
import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5100/api';

export interface SynchronizationStatus {
  operationId: number;
  machineId: number;
  operationStatus: string;
  hasShiftRecords: boolean;
  totalProduced: number;
  targetQuantity: number;
  progress: number;
  lastSyncAt: Date;
}

export interface AssignOperationRequest {
  operationId: number;
  machineId: number;
}

export interface AssignOperationResponse {
  success: boolean;
  message: string;
  data: {
    operationId: number;
    machineId: number;
    assignedAt: Date;
    syncedWithShifts: boolean;
    synchronizationStatus: SynchronizationStatus;
  };
  error?: string;
}

export interface SyncStatusResponse {
  success: boolean;
  operationId: number;
  status: SynchronizationStatus;
  timestamp: Date;
  error?: string;
}

export const synchronizationApi = {
  /**
   * üÜï –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
   */
  async assignOperationWithSync(request: AssignOperationRequest): Promise<AssignOperationResponse> {
    try {
      console.log('üîó API: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π:', request);
      
      const response = await axios.post(`${API_BASE_URL}/sync/assign-operation`, request);
      
      console.log('‚úÖ API: –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:', response.data);
      return response.data;
      
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π:', error);
      throw error;
    }
  },

  /**
   * üÜï –ù–∞–∑–Ω–∞—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ planning (–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥)
   */
  async assignOperationThroughPlanning(request: AssignOperationRequest): Promise<AssignOperationResponse> {
    try {
      console.log('üîó API: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ planning —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π:', request);
      
      const response = await axios.post(`${API_BASE_URL}/planning/assign-operation`, request);
      
      console.log('‚úÖ API: –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —á–µ—Ä–µ–∑ planning:', response.data);
      return response.data;
      
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ planning:', error);
      throw error;
    }
  },

  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async getSynchronizationStatus(operationId: number): Promise<SyncStatusResponse> {
    try {
      console.log(`üìä API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}`);
      
      const response = await axios.get(`${API_BASE_URL}/sync/status/${operationId}`);
      
      console.log(`‚úÖ API: –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω:`, response.data);
      return response.data;
      
    } catch (error) {
      console.error(`‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}:`, error);
      throw error;
    }
  },

  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ planning
   */
  async getSyncStatusThroughPlanning(operationId: number): Promise<SyncStatusResponse> {
    try {
      console.log(`üìä API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ planning –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}`);
      
      const response = await axios.get(`${API_BASE_URL}/planning/sync-status/${operationId}`);
      
      console.log(`‚úÖ API: –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ planning –ø–æ–ª—É—á–µ–Ω:`, response.data);
      return response.data;
      
    } catch (error) {
      console.error(`‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ planning –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}:`, error);
      throw error;
    }
  },

  /**
   * üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async updateOperationProgress(operationId: number): Promise<any> {
    try {
      console.log(`üîÑ API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}`);
      
      const response = await axios.post(`${API_BASE_URL}/sync/update-progress/${operationId}`);
      
      console.log(`‚úÖ API: –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω:`, response.data);
      return response.data;
      
    } catch (error) {
      console.error(`‚ùå API: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationId}:`, error);
      throw error;
    }
  },

  /**
   * üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  async syncAllActiveOperations(): Promise<any> {
    try {
      console.log('üîÑ API: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
      
      const response = await axios.post(`${API_BASE_URL}/sync/sync-all`);
      
      console.log('‚úÖ API: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', response.data);
      return response.data;
      
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  },

  /**
   * üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async healthCheck(): Promise<any> {
    try {
      console.log('üè• API: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      
      const response = await axios.get(`${API_BASE_URL}/sync/health`);
      
      console.log('‚úÖ API: –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç:', response.data);
      return response.data;
      
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:', error);
      throw error;
    }
  },

  /**
   * üîÑ LEGACY: –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  async assignOperationLegacy(request: AssignOperationRequest): Promise<AssignOperationResponse> {
    try {
      console.log('‚ö†Ô∏è API: –£–°–¢–ê–†–ï–í–®–ò–ô –º–µ—Ç–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', request);
      
      const response = await axios.post(`${API_BASE_URL}/planning/assign-operation-legacy`, request);
      
      console.log('‚ö†Ô∏è API: –û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–º –º–µ—Ç–æ–¥–æ–º (–ë–ï–ó —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏):', response.data);
      return response.data;
      
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  },
};

export default synchronizationApi;
