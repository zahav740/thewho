/**
 * @file: machine.types.ts
 * @description: –¢–∏–ø—ã –¥–ª—è —Å—Ç–∞–Ω–∫–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–¥ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É)
 * @dependencies: -
 * @created: 2025-01-28
 * @updated: 2025-05-28
 */

export enum MachineType {
  MILLING_3AXIS = 'milling-3axis',
  MILLING_4AXIS = 'milling-4axis',
  TURNING = 'turning',
}

// –ù–æ–≤—ã–π —Ç–∏–ø –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é —Å—Ç–∞–Ω–∫–æ–≤
export interface MachineAvailability {
  id: string;
  machineName: string;
  machineType: string;
  isAvailable: boolean;
  currentOperationId?: string;
  currentOperationDetails?: {
    id: number;
    operationNumber: number;
    operationType: string;
    estimatedTime: number;
    orderId: number;
    orderDrawingNumber: string;
  };
  lastFreedAt?: string;
  createdAt: string;
  updatedAt: string;
}

// Legacy –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export interface Machine {
  id: string;
  code: string;
  type: MachineType;
  axes: number;
  isActive: boolean;
  isOccupied: boolean;
  createdAt: string;
  updatedAt: string;
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–æ–≤—ã–º API
  machineName?: string;
  isAvailable?: boolean;
}

export interface CreateMachineDto {
  code: string;
  type: MachineType;
  axes: number;
}

export interface UpdateMachineDto extends Partial<CreateMachineDto> {
  isActive?: boolean;
  isOccupied?: boolean;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
export interface RecommendedOrder {
  orderId: string;
  operationId: string;
  drawingNumber: string;
  revision: string;
  quantity: number;
  operationNumber: number;
  operationType: string;
  estimatedTime: number;
  priority: number;
  deadline: string;
  pdfUrl?: string;
  previewUrl?: string;
  previewHtml?: string;
}

// –¢–∏–ø –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
export interface StartOperationRequest {
  machineId: string;
}

export interface StartOperationResponse {
  success: boolean;
  startDate: string;
  message: string;
  operation: {
    id: string;
    status: string;
    machine: string;
  };
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–∞–º–∏ —Å—Ç–∞–Ω–∫–æ–≤
export const getMachineTypeLabel = (type: string): string => {
  switch (type) {
    case 'milling-4axis':
      return '–§—Ä–µ–∑–µ—Ä–Ω—ã–π 3-4 –æ—Å–∏';
    case 'milling-3axis':
      return '–§—Ä–µ–∑–µ—Ä–Ω—ã–π 3 –æ—Å–∏';
    case 'turning':
      return '–¢–æ–∫–∞—Ä–Ω—ã–π';
    default:
      return type;
  }
};

export const getOperationTypeIcon = (type: string): string => {
  if (type.includes('—Ñ—Ä–µ–∑–µ—Ä') || type.includes('milling') || type === '3-axis' || type === '4-axis') {
    return 'üîß';
  } else if (type.includes('—Ç–æ–∫–∞—Ä') || type.includes('turning')) {
    return '‚öôÔ∏è';
  }
  return 'üî®';
};

export const getPriorityColor = (priority: number): string => {
  switch (priority) {
    case 1:
      return '#ef4444'; // red
    case 2:
      return '#f59e0b'; // amber  
    case 3:
      return '#10b981'; // emerald
    default:
      return '#6b7280'; // gray
  }
};

export const formatEstimatedTime = (minutes: number): string => {
  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;
  return hours > 0 ? `${hours}—á ${mins}–º` : `${mins}–º`;
};