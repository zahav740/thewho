/**
 * @file: network.utils.ts
 * @description: –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–æ–≤
 * @created: 2025-06-21
 */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ (–≤ –±—Ä–∞—É–∑–µ—Ä–µ)
export const getLocalIPAddress = (): Promise<string> => {
  return new Promise((resolve, reject) => {
    // –°–æ–∑–¥–∞–µ–º RTCPeerConnection –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
    const rtc = new RTCPeerConnection({ iceServers: [] });
    
    rtc.createDataChannel('');
    rtc.createOffer()
      .then(offer => rtc.setLocalDescription(offer))
      .catch(reject);
    
    rtc.onicecandidate = (event) => {
      if (event.candidate) {
        const candidate = event.candidate.candidate;
        const ipMatch = candidate.match(/(?:[0-9]{1,3}\.){3}[0-9]{1,3}/);
        
        if (ipMatch && ipMatch[0] && ipMatch[0] !== '127.0.0.1') {
          rtc.close();
          resolve(ipMatch[0]);
        }
      }
    };
    
    // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ IP –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å
    setTimeout(() => {
      rtc.close();
      reject(new Error('Could not determine local IP address'));
    }, 2000);
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω—ã–º
export const isMobileDevice = (): boolean => {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
export const isLocalDevelopment = (): boolean => {
  const hostname = window.location.hostname;
  return hostname === 'localhost' || hostname === '127.0.0.1' || hostname.startsWith('192.168.');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ API URL
export const getOptimalApiUrl = async (): Promise<string> => {
  const isDev = process.env.NODE_ENV === 'development';
  const isLocal = isLocalDevelopment();
  
  // –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –∏–ª–∏ –Ω–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π URL
  if (!isDev || !isLocal) {
    return process.env.REACT_APP_API_URL || 'https://kasuf.xyz/api';
  }
  
  // –ï—Å–ª–∏ –º—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ IP
  if (isMobileDevice()) {
    try {
      // –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      const commonIPs = ['192.168.1.100', '192.168.0.100', '192.168.1.101'];
      
      for (const ip of commonIPs) {
        try {
          const response = await fetch(`http://${ip}:5100/api/health`, { 
            method: 'GET',
            signal: AbortSignal.timeout(2000)
          });
          if (response.ok) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω backend –Ω–∞ ${ip}:5100`);
            return `http://${ip}:5100/api`;
          }
        } catch {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π localhost
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ backend, –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost');
      return 'http://localhost:5100/api';
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ IP:', error);
      return 'http://localhost:5100/api';
    }
  }
  
  // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost
  return 'http://localhost:5100/api';
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
export const testApiConnection = async (apiUrl: string): Promise<boolean> => {
  try {
    const response = await fetch(`${apiUrl}/health`, {
      method: 'GET',
      signal: AbortSignal.timeout(5000)
    });
    return response.ok;
  } catch {
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ backend
export const findAvailableBackend = async (): Promise<string> => {
  const candidates = [
    'http://localhost:5100/api',
    'http://localhost:3001/api',
    'http://localhost:5101/api',
  ];
  
  // –ï—Å–ª–∏ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –¥–æ–±–∞–≤–ª—è–µ–º IP-–∞–¥—Ä–µ—Å–∞
  if (isMobileDevice()) {
    const ips = ['192.168.1.100', '192.168.0.100', '192.168.1.101', '192.168.1.102'];
    const ports = [5100, 3001, 5101];
    
    for (const ip of ips) {
      for (const port of ports) {
        candidates.push(`http://${ip}:${port}/api`);
      }
    }
  }
  
  console.log('üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ backend —Å—Ä–µ–¥–∏:', candidates);
  
  for (const url of candidates) {
    if (await testApiConnection(url)) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π backend: ${url}`);
      return url;
    }
  }
  
  console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π backend, –∏—Å–ø–æ–ª—å–∑—É–µ–º default');
  return candidates[0];
};
