import React, { useState, useEffect } from 'react';
import { Sync, AlertTriangle, CheckCircle, Clock, RefreshCw } from 'lucide-react';
import { shiftPlanningSync } from '../services/shiftPlanningSync';
import { useTranslation } from 'react-i18next';
import SyncStatisticsCard from './SyncStatisticsCard';

interface SyncStatus {
  isRunning: boolean;
  lastSync?: string;
  error?: string;
  stats?: {
    operationsUpdated: number;
    machineChanges: number;
    planningUpdates: number;
  };
}

const ShiftPlanningSync: React.FC = () => {
  const { t } = useTranslation();
  const [syncStatus, setSyncStatus] = useState<SyncStatus>({ isRunning: false });
  const [autoSyncEnabled, setAutoSyncEnabled] = useState(() => {
    return localStorage.getItem('autoSyncEnabled') === 'true';
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const lastSync = localStorage.getItem('lastSyncTime');
    const lastSyncError = localStorage.getItem('lastSyncError');
    
    if (lastSync) {
      setSyncStatus(prev => ({ 
        ...prev, 
        lastSync,
        error: lastSyncError || undefined
      }));
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    localStorage.setItem('autoSyncEnabled', autoSyncEnabled.toString());
  }, [autoSyncEnabled]);

  const handleManualSync = async () => {
    setSyncStatus(prev => ({ ...prev, isRunning: true, error: undefined }));
    
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
      await shiftPlanningSync.syncShiftsWithPlanning();
      
      const now = new Date().toISOString();
      localStorage.setItem('lastSyncTime', now);
      localStorage.removeItem('lastSyncError');
      
      setSyncStatus({
        isRunning: false,
        lastSync: now,
        stats: {
          operationsUpdated: 0, // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
          machineChanges: 0,
          planningUpdates: 0
        }
      });
      
      // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      if (window.confirm) {
        alert('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      window.location.reload();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      localStorage.setItem('lastSyncError', errorMessage);
      
      setSyncStatus(prev => ({
        ...prev,
        isRunning: false,
        error: errorMessage
      }));
      
      alert(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${errorMessage}`);
    }
  };

  const formatDate = (dateString: string) => {
    try {
      return new Date(dateString).toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return dateString;
    }
  };

  const getStatusIcon = () => {
    if (syncStatus.isRunning) {
      return <RefreshCw className="h-5 w-5 text-blue-600 animate-spin" />;
    }
    if (syncStatus.error) {
      return <AlertTriangle className="h-5 w-5 text-red-600" />;
    }
    if (syncStatus.lastSync) {
      return <CheckCircle className="h-5 w-5 text-green-600" />;
    }
    return <Clock className="h-5 w-5 text-gray-600" />;
  };

  const getStatusText = () => {
    if (syncStatus.isRunning) {
      return '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';
    }
    if (syncStatus.error) {
      return `–û—à–∏–±–∫–∞: ${syncStatus.error}`;
    }
    if (syncStatus.lastSync) {
      return `–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${formatDate(syncStatus.lastSync)}`;
    }
    return '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å';
  };

  const getStatusColor = () => {
    if (syncStatus.isRunning) return 'border-blue-300 bg-blue-50';
    if (syncStatus.error) return 'border-red-300 bg-red-50';
    if (syncStatus.lastSync) return 'border-green-300 bg-green-50';
    return 'border-gray-300 bg-gray-50';
  };

  return (
    <div className="space-y-6">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
      <SyncStatisticsCard />
      
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center">
            <Sync className="h-6 w-6 text-blue-600 mr-2" />
            <h3 className="text-lg font-semibold text-gray-900">
              –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ —Å–º–µ–Ω–∞–º–∏
            </h3>
          </div>
          
          <button
            onClick={handleManualSync}
            disabled={syncStatus.isRunning}
            className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {syncStatus.isRunning ? (
              <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
            ) : (
              <Sync className="h-4 w-4 mr-2" />
            )}
            {syncStatus.isRunning ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...' : '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å'}
          </button>
        </div>
        
        {/* –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
        <div className={`p-4 rounded-lg border-2 ${getStatusColor()}`}>
          <div className="flex items-center">
            {getStatusIcon()}
            <span className="ml-2 text-sm font-medium text-gray-700">
              {getStatusText()}
            </span>
          </div>
          
          {syncStatus.stats && (
            <div className="mt-2 text-xs text-gray-600">
              –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {syncStatus.stats.operationsUpdated} | 
              –°–º–µ–Ω —Å—Ç–∞–Ω–∫–æ–≤: {syncStatus.stats.machineChanges} | 
              –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {syncStatus.stats.planningUpdates}
            </div>
          )}
        </div>
        
        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
        <div className="mt-4 p-4 bg-gray-50 rounded-lg">
          <div className="flex items-center justify-between">
            <div>
              <h4 className="text-sm font-medium text-gray-900">
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
              </h4>
              <p className="text-xs text-gray-600">
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–º–µ–Ω
              </p>
            </div>
            
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                checked={autoSyncEnabled}
                onChange={(e) => setAutoSyncEnabled(e.target.checked)}
                className="sr-only peer"
              />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
            </label>
          </div>
        </div>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
        <div className="mt-4 p-4 bg-blue-50 rounded-lg">
          <h4 className="text-sm font-medium text-blue-900 mb-2">
            –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:
          </h4>
          <ul className="text-xs text-blue-800 space-y-1">
            <li>‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω</li>
            <li>‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–º–µ–Ω—ã —Å—Ç–∞–Ω–∫–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</li>
            <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö</li>
            <li>‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</li>
            <li>‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ª–∞–¥–∫–∞—Ö</li>
          </ul>
        </div>
        
        {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
        {!autoSyncEnabled && (
          <div className="mt-4 p-4 bg-yellow-50 border border-yellow-300 rounded-lg">
            <div className="flex items-center">
              <AlertTriangle className="h-4 w-4 text-yellow-600 mr-2" />
              <span className="text-sm text-yellow-800">
                –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º —Å–º–µ–Ω–∞–º.
              </span>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ShiftPlanningSync;
