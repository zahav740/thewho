import { useState, useCallback, useEffect } from 'react';
import { useApp } from '../context/AppContext';
import { ProductionPlanner, PlanningResult, ForceMajeure, Alert, PlanningUtils } from '../utils/productionPlanning';
import { Operation, Order, Shift } from '../types';
import { markSetupCompleted as markSetupCompletedHelper } from '../utils/setupCompletion';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
import { planOrdersFixed, markSetupCompletedFixed, getCompatibleMachinesFix } from '../utils/planningFix';

// –ö–ª—é—á–∏ –¥–ª—è localStorage
const PLANNING_RESULTS_KEY = 'planningResults';
const PLANNING_ALERTS_KEY = 'planningAlerts';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
const enrichOrdersWithCompletionStatus = (orders: Order[], shifts: Shift[]): Order[] => {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...');
  console.log('üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:', orders.length);
  console.log('üîÑ –í—Å–µ–≥–æ —Å–º–µ–Ω:', shifts.length);
  
  return orders.map(order => {
    console.log(`\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ ${order.drawingNumber} (ID: ${order.id})`);
    
    return {
      ...order,
      operations: order.operations.map(operation => {
        console.log(`\n  üîß –û–ø–µ—Ä–∞—Ü–∏—è ${operation.sequenceNumber} (ID: ${operation.id})`);
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–º–µ–Ω—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π
        const relatedShiftOperations = shifts
          .flatMap(shift => shift.operations)
          .filter(shiftOp => shiftOp.operationId === operation.id);
        
        console.log(`    üîç –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–º–µ–Ω–∞—Ö: ${relatedShiftOperations.length}`);
        
        if (relatedShiftOperations.length > 0) {
          relatedShiftOperations.forEach((shiftOp, index) => {
            console.log(`      ${index + 1}. –í—ã–ø–æ–ª–Ω–µ–Ω–æ –µ–¥–∏–Ω–∏—Ü: ${shiftOp.completedUnits}, –í—Ä–µ–º—è: ${shiftOp.timeSpent}`);
          });
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
        const completedUnits = relatedShiftOperations.reduce(
          (sum, shiftOp) => sum + shiftOp.completedUnits, 0
        );
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è
        const actualTimeTotal = relatedShiftOperations.reduce(
          (sum, shiftOp) => sum + Number(shiftOp.timeSpent || 0), 0
        );
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
        const totalUnits = order.quantity;
        let status = "pending";
        let actualTime: number | undefined = undefined;
        
        if (completedUnits >= totalUnits) {
          status = "completed";
          // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É
          if (completedUnits > 0) {
            actualTime = actualTimeTotal / completedUnits;
          }
        } else if (completedUnits > 0) {
          status = "in-progress";
        }
        
        console.log(`    üìä –°—Ç–∞—Ç—É—Å: ${status}, –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedUnits}/${totalUnits}, –§–∞–∫—Ç.–≤—Ä–µ–º—è: ${actualTime || 'N/A'}`);
        
        return {
          ...operation,
          actualTime,
          completionStatus: status,
          completedUnits
        };
      })
    };
  });
};

export const useProductionPlanning = () => {
  const { orders, shifts } = useApp();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const [planningResults, setPlanningResults] = useState<PlanningResult[]>(() => {
    const saved = localStorage.getItem(PLANNING_RESULTS_KEY);
    return saved ? JSON.parse(saved) : [];
  });
  
  const [alerts, setAlerts] = useState<Alert[]>(() => {
    const saved = localStorage.getItem(PLANNING_ALERTS_KEY);
    return saved ? JSON.parse(saved) : [];
  });
  
  const [isPlanning, setIsPlanning] = useState(false);
  const [planner] = useState(() => new ProductionPlanner());

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const clearPlanning = useCallback(() => {
    setPlanningResults([]);
    setAlerts([]);
    localStorage.removeItem(PLANNING_RESULTS_KEY);
    localStorage.removeItem(PLANNING_ALERTS_KEY);
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    localStorage.setItem(PLANNING_RESULTS_KEY, JSON.stringify(planningResults));
  }, [planningResults]);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç—ã –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    localStorage.setItem(PLANNING_ALERTS_KEY, JSON.stringify(alerts));
  }, [alerts]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑–∞—Ö –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –ø–ª–∞–Ω–∞
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—É—â–∏–º –∑–∞–∫–∞–∑–∞–º
    if (planningResults.length > 0 && orders.length > 0) {
      const validResults = planningResults.filter(result => {
        const order = orders.find(o => o.id === result.orderId);
        if (!order) return false;
        
        const operation = order.operations.find(op => op.id === result.operationId);
        return !!operation;
      });
      
      // –ï—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
      if (validResults.length !== planningResults.length) {
        if (validResults.length === 0) {
          // –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏ - –æ—á–∏—â–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
          clearPlanning();
        } else {
          // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
          setPlanningResults(validResults);
        }
      }
    }
  }, [orders, planningResults, clearPlanning]);

  // –û—Å–Ω–æ–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  const planProduction = useCallback(async () => {
    setIsPlanning(true);
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      console.log('‚àû –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      
      // –ü–µ—Ä–µ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ–±–æ–≥–∞—â–∞–µ–º –∑–∞–∫–∞–∑—ã —Å—Ç–∞—Ç—É—Å–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
      const ordersWithCompletionStatus = enrichOrdersWithCompletionStatus(orders, shifts);
      
      // –í—ã–∑—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const results = await planOrdersFixed(ordersWithCompletionStatus);
      setPlanningResults(results);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞–º
      const deadlineAlerts = PlanningUtils.checkDeadlineCompliance(ordersWithCompletionStatus, results);
      setAlerts(prev => [...prev, ...deadlineAlerts]);
      
      return results;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    } finally {
      setIsPlanning(false);
    }
  }, [orders, shifts, planner]);

  // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  const adaptivePlanning = useCallback(async () => {
    setIsPlanning(true);
    try {
      // –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–∫–∞–∑—ã —Å—Ç–∞—Ç—É—Å–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
      const ordersWithCompletionStatus = enrichOrdersWithCompletionStatus(orders, shifts);
      
      const results = await planner.adaptivePlanning(ordersWithCompletionStatus, shifts);
      setPlanningResults(results);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞–º
      const deadlineAlerts = PlanningUtils.checkDeadlineCompliance(ordersWithCompletionStatus, results);
      setAlerts(prev => [...prev, ...deadlineAlerts]);
      
      return results;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    } finally {
      setIsPlanning(false);
    }
  }, [orders, shifts, planner]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–∞
  const handleForceMajeure = useCallback(async (forceMajeure: ForceMajeure) => {
    setIsPlanning(true);
    try {
      const results = await planner.handleForceMajeure(forceMajeure, orders);
      setPlanningResults(results);
      
      // –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–µ
      const forceMajeureAlert = planner.createAlert({
        type: 'force_majeure',
        severity: 'high',
        title: `–§–æ—Ä—Å-–º–∞–∂–æ—Ä: ${forceMajeure.type}`,
        description: forceMajeure.description,
        affectedEntityType: forceMajeure.entityType as 'machine' | 'order' | 'operation' | 'system',
        affectedEntityId: forceMajeure.entityId,
        status: 'new'
      });
      
      setAlerts(prev => [...prev, forceMajeureAlert]);
      
      return results;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–∞:', error);
      throw error;
    } finally {
      setIsPlanning(false);
    }
  }, [orders, planner]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ webhook
  const sendPlanningToWebhook = useCallback(async (webhookUrl?: string) => {
    try {
      const url = webhookUrl || localStorage.getItem('webhookUrl');
      if (!url) {
        throw new Error('Webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
      }

      if (planningResults.length === 0) {
        throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.');
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n
      const webhookData = {
        orders: orders.map(order => ({
          ...order,
          planningResults: planningResults.filter(pr => pr.orderId === order.id)
        })),
        summary: {
          totalOrders: orders.length,
          totalOperations: orders.reduce((sum, order) => sum + order.operations.length, 0),
          planningResults: planningResults.length
        }
      };
      
      const payload = {
        eventType: 'production_planning',
        timestamp: new Date().toISOString(),
        source: 'TheWho App',
        environment: window.location.hostname,
        data: webhookData
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ n8n webhook:', url);
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${response.statusText}. ${errorText}`);
      }

      const responseData = await response.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ n8n:', responseData);
      
      return responseData;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ n8n webhook:', error);
      throw error;
    }
  }, [orders, planningResults]);

  // –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–Ω–∫–æ–≤
  const analyzeMachineLoad = useCallback(() => {
    return PlanningUtils.analyzeMachineLoad(planningResults);
  }, [planningResults]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∞–ª–µ—Ä—Ç–∞
  const resolveAlert = useCallback((alertId: string) => {
    setAlerts(prev => prev.map(alert => 
      alert.id === alertId 
        ? { 
            ...alert, 
            status: 'resolved', 
            resolvedAt: new Date().toISOString() 
          }
        : alert
    ));
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const getPlanningStats = useCallback(() => {
    const totalOrders = orders.length;
    const plannedOrders = new Set(planningResults.map(pr => pr.orderId)).size;
    const totalOperations = orders.reduce((sum, order) => sum + order.operations.length, 0);
    const plannedOperations = planningResults.length;
    
    const onTimeOrders = orders.filter(order => {
      const orderResults = planningResults.filter(pr => pr.orderId === order.id);
      if (orderResults.length === 0) return false;
      
      const lastResult = orderResults.reduce((latest, current) => 
        new Date(current.plannedEndDate) > new Date(latest.plannedEndDate) ? current : latest
      );
      
      return new Date(lastResult.plannedEndDate) <= new Date(order.deadline);
    }).length;

    return {
      totalOrders,
      plannedOrders,
      totalOperations,
      plannedOperations,
      onTimeOrders,
      lateOrders: plannedOrders - onTimeOrders,
      planningCompletion: totalOrders > 0 ? (plannedOrders / totalOrders) * 100 : 0,
      onTimePercentage: plannedOrders > 0 ? (onTimeOrders / plannedOrders) * 100 : 0
    };
  }, [orders, planningResults]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é
  const updatePlanningResult = useCallback(async (resultId: string, updates: Partial<PlanningResult>) => {
    try {
      const updatedResults = await planner.updatePlanningResult(resultId, updates, planningResults);
      setPlanningResults(updatedResults);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω—ã –ø–æ—Å–ª–µ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const deadlineAlerts = PlanningUtils.checkDeadlineCompliance(orders, updatedResults);
      setAlerts(prev => {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        const filtered = prev.filter(a => a.type !== 'deadline_risk');
        return [...filtered, ...deadlineAlerts];
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
  }, [planner, planningResults, orders]);
  
  // –û—Ç–º–µ—Ç–∫–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–∞–ª–∞–¥–∫–∏ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–º–µ–Ω—ã —Å—Ç–∞–Ω–∫–∞)
  const markSetupCompleted = useCallback(async (resultId: string, setupData: any) => {
    try {
      console.log('‚àû –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞–ª–∞–¥–∫–∏');
      console.log('–î–∞–Ω–Ω—ã–µ:', setupData);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ª–∞–¥–∫–∏
      const updatedResults = await markSetupCompletedFixed(resultId, setupData, planningResults, orders);
      setPlanningResults(updatedResults.updatedResults);
      
      return updatedResults;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞–ª–∞–¥–∫–∏:', error);
      throw error;
    }
  }, [planningResults, orders]);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
  const getCompatibleMachines = useCallback((operation: Operation) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    return getCompatibleMachinesFix(operation);
  }, []);
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ ID
  const getOperationById = useCallback((operationId: string): Operation | null => {
    for (const order of orders) {
      const operation = order.operations.find(op => op.id === operationId);
      if (operation) return operation;
    }
    return null;
  }, [orders]);

  return {
    planningResults,
    setPlanningResults,
    alerts,
    isPlanning,
    planProduction,
    adaptivePlanning,
    handleForceMajeure,
    sendPlanningToWebhook,
    analyzeMachineLoad,
    resolveAlert,
    getPlanningStats,
    updatePlanningResult,
    markSetupCompleted,
    getCompatibleMachines,
    getOperationById,
    clearPlanning  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
  };
};
