import { useEffect, useRef, useCallback } from 'react';
import { 
  syncWithSupabase, 
  loadFromSupabase, 
  orderService, 
  operationService, 
  planningService,
  SupabaseOrder,
  SupabaseOperation,
  SupabasePlanning
} from '../utils/supabaseClient';
import { Order } from '../types';

interface SupabaseSyncOptions {
  autoSync: boolean;
  syncInterval: number; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  onSyncStart?: () => void;
  onSyncSuccess?: (result: any) => void;
  onSyncError?: (error: any) => void;
  accessToken?: string;
}

export const useSupabaseSync = (
  orders: Order[],
  planningResults: any[],
  updateOrders: (orders: Order[]) => void,
  options: SupabaseSyncOptions = {
    autoSync: true,
    syncInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }
) => {
  const syncTimeoutRef = useRef<NodeJS.Timeout>();
  const lastSyncRef = useRef<number>(0);
  const isSyncingRef = useRef<boolean>(false);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç Supabase
  const convertToSupabaseFormat = useCallback((orders: Order[]) => {
    const supabaseOrders: SupabaseOrder[] = [];
    const supabaseOperations: SupabaseOperation[] = [];
    
    orders.forEach(order => {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
      supabaseOrders.push({
        id: order.id,
        name: order.name || order.drawingNumber,
        client_name: order.clientName || order.drawingNumber,
        drawing_number: order.drawingNumber,
        deadline: order.deadline,
        quantity: order.quantity,
        priority: order.priority,
        pdf_url: order.pdfUrl,
        updated_at: new Date().toISOString()
      });
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
      order.operations?.forEach((operation, index) => {
        supabaseOperations.push({
          id: operation.id,
          order_id: order.id,
          sequence_number: operation.sequenceNumber || index + 1,
          machine: operation.machine,
          operation_type: operation.operationType,
          estimated_time: operation.estimatedTime,
          completed_units: operation.completedUnits,
          actual_time: operation.actualTime,
          status: operation.status || 'pending',
          operators: operation.operators || [],
          updated_at: new Date().toISOString()
        });
      });
    });
    
    return { supabaseOrders, supabaseOperations };
  }, []);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  const syncSingleOrder = useCallback(async (order: Order) => {
    if (isSyncingRef.current) return;
    
    try {
      isSyncingRef.current = true;
      console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞: ${order.drawingNumber}`);
      
      const { supabaseOrders, supabaseOperations } = convertToSupabaseFormat([order]);
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
      if (supabaseOrders.length > 0) {
        await orderService.upsertOrder(supabaseOrders[0]);
      }
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (supabaseOperations.length > 0) {
        await operationService.upsertOperations(supabaseOperations);
      }
      
      console.log(`‚úÖ –ó–∞–∫–∞–∑ ${order.drawingNumber} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω`);
      options.onSyncSuccess?.({ ordersCount: 1, operationsCount: supabaseOperations.length });
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ ${order.drawingNumber}:`, error);
      options.onSyncError?.(error);
    } finally {
      isSyncingRef.current = false;
    }
  }, [convertToSupabaseFormat, options]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const syncAllData = useCallback(async () => {
    if (isSyncingRef.current) return;
    
    try {
      isSyncingRef.current = true;
      options.onSyncStart?.();
      
      console.log('üîÑ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Supabase...');
      
      const result = await syncWithSupabase(orders, planningResults, options.accessToken);
      
      if (result.success) {
        lastSyncRef.current = Date.now();
        options.onSyncSuccess?.(result);
        console.log('‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      } else {
        throw result.error;
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      options.onSyncError?.(error);
    } finally {
      isSyncingRef.current = false;
    }
  }, [orders, planningResults, options]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase
  const loadData = useCallback(async () => {
    if (isSyncingRef.current) return;
    
    try {
      isSyncingRef.current = true;
      options.onSyncStart?.();
      
      console.log('‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase...');
      
      const result = await loadFromSupabase(options.accessToken);
      
      if (result.success && result.orders) {
        updateOrders(result.orders);
        options.onSyncSuccess?.(result);
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Supabase');
      } else {
        throw result.error;
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      options.onSyncError?.(error);
    } finally {
      isSyncingRef.current = false;
    }
  }, [updateOrders, options]);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
  useEffect(() => {
    if (!options.autoSync) return;
    
    const scheduleSync = () => {
      syncTimeoutRef.current = setTimeout(() => {
        if (!isSyncingRef.current && Date.now() - lastSyncRef.current > options.syncInterval) {
          syncAllData().finally(scheduleSync);
        } else {
          scheduleSync();
        }
      }, options.syncInterval);
    };
    
    scheduleSync();
    
    return () => {
      if (syncTimeoutRef.current) {
        clearTimeout(syncTimeoutRef.current);
      }
    };
  }, [options.autoSync, options.syncInterval, syncAllData]);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (orders.length > 0 && !isSyncingRef.current) {
      const timeSinceLastSync = Date.now() - lastSyncRef.current;
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥
      if (timeSinceLastSync > 5000) {
        const timeoutId = setTimeout(() => {
          syncAllData();
        }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        
        return () => clearTimeout(timeoutId);
      }
    }
  }, [orders, syncAllData]);
  
  return {
    syncSingleOrder,
    syncAllData,
    loadData,
    isSyncing: isSyncingRef.current,
    lastSync: lastSyncRef.current
  };
};

// –•—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
export const useOrderSync = (
  order: Order | undefined,
  options: Pick<SupabaseSyncOptions, 'onSyncStart' | 'onSyncSuccess' | 'onSyncError' | 'accessToken'> = {}
) => {
  const isSyncingRef = useRef<boolean>(false);
  
  const syncOrder = useCallback(async () => {
    if (!order || isSyncingRef.current) return;
    
    try {
      isSyncingRef.current = true;
      options.onSyncStart?.();
      
      console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞: ${order.drawingNumber}`);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç Supabase
      const supabaseOrder: SupabaseOrder = {
        id: order.id,
        name: order.name || order.drawingNumber,
        client_name: order.clientName || order.drawingNumber,
        drawing_number: order.drawingNumber,
        deadline: order.deadline,
        quantity: order.quantity,
        priority: order.priority,
        pdf_url: order.pdfUrl,
        updated_at: new Date().toISOString()
      };
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
      const supabaseOperations: SupabaseOperation[] = (order.operations || []).map((operation, index) => ({
        id: operation.id,
        order_id: order.id,
        sequence_number: operation.sequenceNumber || index + 1,
        machine: operation.machine,
        operation_type: operation.operationType,
        estimated_time: operation.estimatedTime,
        completed_units: operation.completedUnits,
        actual_time: operation.actualTime,
        status: operation.status || 'pending',
        operators: operation.operators || [],
        updated_at: new Date().toISOString()
      }));
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Supabase
      await orderService.upsertOrder(supabaseOrder);
      if (supabaseOperations.length > 0) {
        await operationService.upsertOperations(supabaseOperations);
      }
      
      console.log(`‚úÖ –ó–∞–∫–∞–∑ ${order.drawingNumber} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω`);
      options.onSyncSuccess?.({ ordersCount: 1, operationsCount: supabaseOperations.length });
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ ${order?.drawingNumber}:`, error);
      options.onSyncError?.(error);
    } finally {
      isSyncingRef.current = false;
    }
  }, [order, options]);
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
  useEffect(() => {
    if (order) {
      const timeoutId = setTimeout(() => {
        syncOrder();
      }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      
      return () => clearTimeout(timeoutId);
    }
  }, [order, syncOrder]);
  
  return {
    syncOrder,
    isSyncing: isSyncingRef.current
  };
};
