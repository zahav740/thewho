import { supabase } from './supabase';
import { Shift, Order, Operation } from '../types';
import { planningService } from './planningService';

/**
 * –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–º–µ–Ω —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –ø–ª–∞–Ω–æ–º –∏ —Ñ–∞–∫—Ç–æ–º
 */
export const shiftPlanningSync = {
  
  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–º–µ–Ω —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Å—Ç–∞–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async syncShiftsWithPlanning(): Promise<void> {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–º–µ–Ω —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º...');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–º–µ–Ω—ã
      const { data: shifts, error: shiftsError } = await supabase
        .from('shifts')
        .select('*')
        .order('date', { ascending: true });
      
      if (shiftsError) throw shiftsError;
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
      const { data: orders, error: ordersError } = await supabase
        .from('orders')
        .select(`
          *,
          operations:operations(*)
        `);
      
      if (ordersError) throw ordersError;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const { data: planningResults, error: planningError } = await supabase
        .from('planning_results')
        .select('*');
      
      if (planningError) throw planningError;
      
      const updates = {
        operationsToUpdate: [] as any[],
        planningToUpdate: [] as any[],
        machineChanges: [] as any[]
      };
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–º–µ–Ω: ${shifts.length}, –∑–∞–∫–∞–∑–æ–≤: ${orders.length}, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${planningResults.length}`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–º–µ–Ω—É
      for (const shift of shifts) {
        console.log(`\nüìÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–º–µ–Ω—É: ${shift.machine}, –¥–∞—Ç–∞: ${new Date(shift.date).toLocaleDateString()}`);
        
        if (!shift.operations || !Array.isArray(shift.operations)) {
          console.log('  ‚ö†Ô∏è –í —Å–º–µ–Ω–µ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π');
          continue;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–º–µ–Ω–µ
        for (const shiftOperation of shift.operations) {
          const result = await this.processShiftOperation(
            shiftOperation, 
            shift, 
            orders, 
            planningResults
          );
          
          if (result.operationUpdate) {
            updates.operationsToUpdate.push(result.operationUpdate);
          }
          
          if (result.planningUpdate) {
            updates.planningToUpdate.push(result.planningUpdate);
          }
          
          if (result.machineChange) {
            updates.machineChanges.push(result.machineChange);
          }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–ª–∞–¥–∫–∏ –≤ —Å–º–µ–Ω–µ
        if (shift.setups && Array.isArray(shift.setups)) {
          for (const setup of shift.setups) {
            await this.processShiftSetup(setup, shift, orders, planningResults);
          }
        }
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await this.applyUpdates(updates);
      
      // –ï—Å–ª–∏ –±—ã–ª–∏ —Å–º–µ–Ω—ã —Å—Ç–∞–Ω–∫–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      if (updates.machineChanges.length > 0) {
        console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–º–µ–Ω—ã —Å—Ç–∞–Ω–∫–æ–≤ (${updates.machineChanges.length}), –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...`);
        await this.triggerReplanning(updates.machineChanges);
      }
      
      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  },
  
  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ —Å–º–µ–Ω—ã
   */
  async processShiftOperation(
    shiftOperation: any,
    shift: Shift,
    orders: any[],
    planningResults: any[]
  ): Promise<{
    operationUpdate?: any;
    planningUpdate?: any;
    machineChange?: any;
  }> {
    console.log(`  üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: ${shiftOperation.drawingNumber} (ID: ${shiftOperation.operationId})`);
    
    // –ù–∞—Ö–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –∑–∞–∫–∞–∑
    const { operation, order } = this.findOperationByIdOrDrawing(
      shiftOperation.operationId,
      shiftOperation.drawingNumber,
      orders
    );
    
    if (!operation || !order) {
      console.warn(`    ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è ${shiftOperation.drawingNumber}`);
      return {};
    }
    
    console.log(`    ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è ${operation.sequence_number} –≤ –∑–∞–∫–∞–∑–µ ${order.drawing_number}`);
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const planningResult = planningResults.find(pr => pr.operation_id === operation.id);
    if (!planningResult) {
      console.warn(`    ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.id}`);
      return {};
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const currentCompleted = operation.completed_units || 0;
    const newCompleted = currentCompleted + shiftOperation.completedUnits;
    const totalRequired = order.quantity;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    let newStatus = operation.status;
    if (newCompleted >= totalRequired) {
      newStatus = 'completed';
    } else if (newCompleted > 0) {
      newStatus = 'in-progress';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É —Å—Ç–∞–Ω–∫–∞
    const machineChanged = planningResult.machine !== shift.machine;
    
    console.log(`    üìä –°—Ç–∞—Ç—É—Å: ${operation.status} ‚Üí ${newStatus}, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${currentCompleted} + ${shiftOperation.completedUnits} = ${newCompleted}/${totalRequired}`);
    
    if (machineChanged) {
      console.log(`    üîÑ –°–ú–ï–ù–ê –°–¢–ê–ù–ö–ê: ${planningResult.machine} ‚Üí ${shift.machine}`);
    }
    
    const result: any = {};
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    result.operationUpdate = {
      id: operation.id,
      completed_units: newCompleted,
      status: newStatus,
      actual_time: shiftOperation.timeSpent || operation.actual_time
    };
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –±—ã–ª–∞ —Å–º–µ–Ω–∞ —Å—Ç–∞–Ω–∫–∞)
    if (machineChanged) {
      result.planningUpdate = {
        id: planningResult.id,
        machine: shift.machine,
        status: 'rescheduled',
        last_rescheduled_at: new Date().toISOString(),
        rescheduled_reason: `–û–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ —Å ${planningResult.machine} –Ω–∞ ${shift.machine} –ø–æ —Ñ–∞–∫—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`
      };
      
      result.machineChange = {
        operationId: operation.id,
        orderId: order.id,
        oldMachine: planningResult.machine,
        newMachine: shift.machine,
        reason: '–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–º —Å—Ç–∞–Ω–∫–µ'
      };
    }
    
    return result;
  },
  
  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–ª–∞–¥–∫—É –∏–∑ —Å–º–µ–Ω—ã
   */
  async processShiftSetup(
    setup: any,
    shift: Shift,
    orders: any[],
    planningResults: any[]
  ): Promise<void> {
    console.log(`  üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–ª–∞–¥–∫—É: ${setup.drawingNumber}, –æ–ø–µ—Ä–∞—Ü–∏—è: ${setup.operationNumber}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ —á–µ—Ä—Ç–µ–∂—É –∏ –Ω–æ–º–µ—Ä—É –æ–ø–µ—Ä–∞—Ü–∏–∏
    const { operation } = this.findOperationByDrawingAndSequence(
      setup.drawingNumber,
      setup.operationNumber,
      orders
    );
    
    if (!operation) {
      console.warn(`    ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞–ª–∞–¥–∫–∏ ${setup.drawingNumber}:${setup.operationNumber}`);
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const planningResult = planningResults.find(pr => pr.operation_id === operation.id);
    if (!planningResult) {
      console.warn(`    ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–∞–ª–∞–¥–∫–∏`);
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    const updates: any = {
      setup_time_minutes: setup.timeSpent
    };
    
    // –ï—Å–ª–∏ –Ω–∞–ª–∞–¥–∫–∞ –±—ã–ª–∞ –Ω–∞ –¥—Ä—É–≥–æ–º —Å—Ç–∞–Ω–∫–µ
    if (planningResult.machine !== shift.machine) {
      updates.machine = shift.machine;
      updates.status = 'rescheduled';
      updates.last_rescheduled_at = new Date().toISOString();
      updates.rescheduled_reason = `–ù–∞–ª–∞–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${shift.machine}`;
      
      console.log(`    üîÑ –ù–∞–ª–∞–¥–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–º —Å—Ç–∞–Ω–∫–µ: ${planningResult.machine} ‚Üí ${shift.machine}`);
    }
    
    await supabase
      .from('planning_results')
      .update(updates)
      .eq('id', planningResult.id);
    
    console.log(`    ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞–ª–∞–¥–∫–∞: ${setup.timeSpent} –º–∏–Ω`);
  },
  
  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async applyUpdates(updates: any): Promise<void> {
    console.log(`\nüíæ –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`);
    console.log(`  - –û–ø–µ—Ä–∞—Ü–∏–π: ${updates.operationsToUpdate.length}`);
    console.log(`  - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ${updates.planningToUpdate.length}`);
    console.log(`  - –°–º–µ–Ω —Å—Ç–∞–Ω–∫–æ–≤: ${updates.machineChanges.length}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    for (const opUpdate of updates.operationsToUpdate) {
      const { id, ...updateData } = opUpdate;
      await supabase
        .from('operations')
        .update(updateData)
        .eq('id', id);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    for (const planUpdate of updates.planningToUpdate) {
      const { id, ...updateData } = planUpdate;
      await supabase
        .from('planning_results')
        .update(updateData)
        .eq('id', id);
    }
    
    console.log('‚úÖ –í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
  },
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤
   */
  async triggerReplanning(machineChanges: any[]): Promise<void> {
    const affectedOrderIds = [...new Set(machineChanges.map(mc => mc.orderId))];
    
    console.log(`üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤: ${affectedOrderIds.join(', ')}`);
    
    for (const orderId of affectedOrderIds) {
      try {
        await planningService.runAdaptivePlanning(orderId);
        console.log(`‚úÖ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${orderId}:`, error);
      }
    }
  },
  
  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ ID –∏–ª–∏ –ø–æ —á–µ—Ä—Ç–µ–∂—É
   */
  findOperationByIdOrDrawing(
    operationId: string,
    drawingNumber: string,
    orders: any[]
  ): { operation?: any; order?: any } {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ ID –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (operationId) {
      for (const order of orders) {
        const operation = order.operations?.find((op: any) => op.id === operationId);
        if (operation) {
          return { operation, order };
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –∏—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —á–µ—Ä—Ç–µ–∂–∞
    if (drawingNumber) {
      const order = orders.find(o => o.drawing_number === drawingNumber);
      if (order && order.operations?.length > 0) {
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        const operation = order.operations.find((op: any) => op.status !== 'completed') || order.operations[0];
        return { operation, order };
      }
    }
    
    return {};
  },
  
  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ —á–µ—Ä—Ç–µ–∂—É –∏ –Ω–æ–º–µ—Ä—É –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  findOperationByDrawingAndSequence(
    drawingNumber: string,
    sequenceNumber: number,
    orders: any[]
  ): { operation?: any; order?: any } {
    const order = orders.find(o => o.drawing_number === drawingNumber);
    if (!order) return {};
    
    const operation = order.operations?.find((op: any) => op.sequence_number === sequenceNumber);
    return operation ? { operation, order } : {};
  },
  
  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ–Ω—ã
   */
  async autoSyncAfterShiftSave(shiftId: string): Promise<void> {
    console.log(`üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ–Ω—ã ${shiftId}`);
    
    try {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      await this.syncShiftsWithPlanning();
      
      console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
  }
};
