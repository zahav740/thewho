// –ú–æ–¥—É–ª—å –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã —Å Supabase
// –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

import { Order, Shift } from '../types';
import { ProductionPlannerFix } from './productionPlanningFix';
import { PlanningResult } from './productionPlanning';
import { supabase, syncWithSupabase } from './supabaseClient';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
const fixedPlanner = new ProductionPlannerFix();

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
 */
export async function planOrdersFixed(orders: Order[]): Promise<PlanningResult[]> {
  console.log('üìã –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è', orders.length, '–∑–∞–∫–∞–∑–æ–≤');
  
  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
    const results = await fixedPlanner.planOrders(orders);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å Supabase
    try {
      await syncWithSupabase(orders, results);
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Supabase');
    } catch (syncError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Supabase:', syncError);
    }
    
    return results;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * –û—Ç–º–µ—á–∞–µ—Ç –Ω–∞–ª–∞–¥–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–º–µ–Ω—ã —Å—Ç–∞–Ω–∫–∞
 */
export async function markSetupCompletedFixed(
  resultId: string,
  setupData: { actualSetupTime: number; actualStartTime?: string; newMachine?: string },
  existingResults: PlanningResult[],
  allOrders: Order[]
): Promise<{
  updatedResults: PlanningResult[];
  replanningResults: PlanningResult[];
  affectedMachine: string;
  machineChanged?: boolean;
}> {
  console.log('üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞–ª–∞–¥–∫–∏');
  console.log('üìÉ –î–∞–Ω–Ω—ã–µ:', setupData);

  try {
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º–µ–Ω—ã —Å—Ç–∞–Ω–∫–∞
    const targetResult = existingResults.find(r => r.id === resultId);
    if (!targetResult) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –Ω–∞–ª–∞–¥–∫–∏:', resultId);
      throw new Error('–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞–Ω–æ–∫
    const oldMachine = targetResult.machine;
    const machineChanged = setupData.newMachine && setupData.newMachine !== oldMachine;
    
    if (machineChanged) {
      console.log(`üîÑ –°–º–µ–Ω–∞ —Å—Ç–∞–Ω–∫–∞: ${oldMachine} -> ${setupData.newMachine}`);
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ª–∞–¥–∫–∏ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
    const result = await fixedPlanner.markSetupCompleted(
      resultId,
      setupData,
      existingResults,
      allOrders
    );
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å Supabase
    try {
      await syncWithSupabase(allOrders, result.updatedResults);
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Supabase');
    } catch (syncError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Supabase:', syncError);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–µ —Å—Ç–∞–Ω–∫–∞
    return {
      ...result,
      machineChanged: machineChanged || false
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞–ª–∞–¥–∫–∏:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å—Ç–∞–Ω–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export function getCompatibleMachinesFix(operation: any): any[] {
  return fixedPlanner.getCompatibleMachines(operation);
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
export { fixedPlanner };
