// –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è TheWho –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –æ–¥–∏–Ω —Å—Ç–∞–Ω–æ–∫
import { Order, Operation, Shift, Machine, MACHINES } from '../types';
import { v4 as uuidv4 } from 'uuid';
import IsraeliCalendar from './israeliCalendar';

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
export interface PlanningResult {
  id: string;
  orderId: string;
  operationId: string;
  machine: Machine;
  plannedStartDate: string;
  plannedEndDate: string;
  quantityAssigned: number;
  remainingQuantity: number;
  expectedTimeMinutes: number;
  setupTimeMinutes: number;
  bufferTimeMinutes: number;
  status: 'planned' | 'in-progress' | 'completed' | 'rescheduled';
  lastRescheduledAt?: string;
  rescheduledReason?: string;
}

export interface ForceMajeure {
  id: string;
  type: 'machine_breakdown' | 'tool_shortage' | 'operator_absence' | 
        'material_shortage' | 'quality_issue' | 'power_outage' | 'other';
  entityType: 'machine' | 'operator' | 'order';
  entityId: string;
  startTime: string;
  estimatedDurationMinutes: number;
  actualDurationMinutes?: number;
  status: 'active' | 'resolved' | 'partially_resolved';
  affectedOrders: string[];
  affectedOperations: string[];
  description: string;
  createdAt: string;
  resolvedAt?: string;
}

export interface Alert {
  id: string;
  type: 'deadline_risk' | 'performance_deviation' | 'force_majeure' | 
        'resource_shortage' | 'queue_overload' | 'system_warning';
  severity: 'low' | 'medium' | 'high' | 'critical';
  title: string;
  description: string;
  affectedEntityType: 'order' | 'operation' | 'machine' | 'system';
  affectedEntityId?: string;
  status: 'new' | 'acknowledged' | 'in_progress' | 'resolved' | 'ignored';
  createdAt: string;
  resolvedAt?: string;
}

export interface MachineConfiguration {
  name: Machine;
  type: "milling" | "turning";
  supports3Axis: boolean;
  supports4Axis: boolean;
  supportsTurning: boolean;
  supportsMilling: boolean;
  efficiencyFactor: number;
  historicalDowntimeProbability: number;
  workingHoursPerDay: number;
  isActive: boolean;
  currentSetupType?: string;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–∫–æ–≤ —Å —É—á–µ—Ç–æ–º —Ç–æ–∫–∞—Ä–Ω—ã—Ö –∏ —Ñ—Ä–µ–∑–µ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç
export const MACHINE_CONFIGURATIONS: MachineConfiguration[] = [
  {
    name: "Doosan Yashana",
    type: "milling",
    supports3Axis: true,
    supports4Axis: true,
    supportsTurning: false,
    supportsMilling: true,
    efficiencyFactor: 1.0,
    historicalDowntimeProbability: 0.08,
    workingHoursPerDay: 960,
    isActive: true
  },
  {
    name: "Doosan Hadasha",
    type: "milling",
    supports3Axis: true,
    supports4Axis: true,
    supportsTurning: false,
    supportsMilling: true,
    efficiencyFactor: 1.1,
    historicalDowntimeProbability: 0.05,
    workingHoursPerDay: 960,
    isActive: true
  },
  {
    name: "Doosan 3",
    type: "milling",
    supports3Axis: true,
    supports4Axis: false,
    supportsTurning: false,
    supportsMilling: true,
    efficiencyFactor: 0.9,
    historicalDowntimeProbability: 0.12,
    workingHoursPerDay: 960,
    isActive: true
  },
  {
    name: "Pinnacle Gdola",
    type: "milling",
    supports3Axis: true,
    supports4Axis: true,
    supportsTurning: false,
    supportsMilling: true,
    efficiencyFactor: 1.2,
    historicalDowntimeProbability: 0.06,
    workingHoursPerDay: 960,
    isActive: true
  },
  {
    name: "Mitsubishi",
    type: "milling",
    supports3Axis: true,
    supports4Axis: false,
    supportsTurning: false,
    supportsMilling: true,
    efficiencyFactor: 0.8,
    historicalDowntimeProbability: 0.15,
    workingHoursPerDay: 960,
    isActive: true
  },
  {
    name: "Okuma",
    type: "turning",
    supports3Axis: false,
    supports4Axis: false,
    supportsTurning: true,
    supportsMilling: false,
    efficiencyFactor: 1.0,
    historicalDowntimeProbability: 0.07,
    workingHoursPerDay: 960,
    isActive: true
  },
  {
    name: "JonFord",
    type: "turning",
    supports3Axis: false,
    supports4Axis: false,
    supportsTurning: true,
    supportsMilling: false,
    efficiencyFactor: 0.85,
    historicalDowntimeProbability: 0.10,
    workingHoursPerDay: 960,
    isActive: true
  }
];

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å —É—á–µ—Ç–æ–º –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
export class ProductionPlanner {
  private machineConfigs: MachineConfiguration[];
  
  constructor(machineConfigs: MachineConfiguration[] = MACHINE_CONFIGURATIONS) {
    this.machineConfigs = machineConfigs;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π, —á—Ç–æ –æ–¥–∏–Ω —Å—Ç–∞–Ω–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é
  public async planOrders(orders: Order[]): Promise<PlanningResult[]> {
    console.log('\nüöÄ === –ù–ê–ß–ò–ù–ê–ï–ú –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–°–¢–í–ê ===');
    console.log('üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log(`   üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${orders.length}`);
    
    if (orders.length === 0) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!');
      return [];
    }
    
    // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–∫–∞–∑–µ
    orders.forEach((order, index) => {
      console.log(`   ${index + 1}. ${order.drawingNumber} - –¥–µ–¥–ª–∞–π–Ω: ${new Date(order.deadline).toLocaleDateString('ru-RU')}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${order.priority}`);
    });
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤
    const processedOrders = this.preprocessOrdersForPlanning(orders);
    
    console.log(`\nüìä –ü–æ—Å–ª–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processedOrders.length} –∑–∞–∫–∞–∑–æ–≤`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –¥–µ–¥–ª–∞–π–Ω—É
    const sortedOrders = this.sortOrdersByPriorityAndDeadline(processedOrders);
    const planningResults: PlanningResult[] = [];
    
    // –ö–∞—Ä—Ç–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å—Ç–∞–Ω–∫–æ–≤: machine -> [{ start, end, operationId }]
    const machineSchedule: Map<Machine, Array<{ start: Date; end: Date; operationId: string }>> = new Map();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞–Ω–∫–∞
    for (const machine of this.machineConfigs) {
      machineSchedule.set(machine.name, []);
    }
    
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å—Ç–∞–Ω–∫–æ–≤...');
    
    for (const order of sortedOrders) {
      if (!order.operations || order.operations.length === 0) {
        continue;
      }

      // –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ–ø–µ—Ä–∞—Ü–∏–π
      const dependencyGraph = this.buildDependencyGraph(order.operations);
      
      // –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
      const sortedOperations = this.topologicalSort(order.operations, dependencyGraph);
      
      // –ö–∞—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –∏—Ö –¥–∞—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è
      const completedOperations: Map<string, Date> = new Map();
      
      for (const operation of sortedOperations) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        if (this.isOperationCompleted(operation, order)) {
          console.log(`‚è≠Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è ${operation.sequenceNumber} –∑–∞–∫–∞–∑–∞ ${order.drawingNumber} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
          const now = new Date();
          completedOperations.set(operation.id, now);
          continue;
        }
        
        console.log(`üîß –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é ${operation.sequenceNumber} (ID: ${operation.id}) –∑–∞–∫–∞–∑–∞ ${order.drawingNumber}, —Ç–∏–ø: ${operation.operationType}`);
        
        // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—á–µ–º—É –æ–ø–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∞
        console.log(`üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.sequenceNumber}:`);
        console.log(`   - ID –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operation.id}`);
        console.log(`   - –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operation.operationType}`);
        console.log(`   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${operation.estimatedTime} –º–∏–Ω`);
        console.log(`   - –ó–∞–∫–∞–∑ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω: ${(order as any).isOverdue || false}`);
        console.log(`   - –î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏: ${(order as any).daysOverdue || 0}`);
        console.log(`   - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–∫–∞–∑–∞: ${order.priority}`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      const earliestStartDate = this.determineEarliestStartDate(operation, completedOperations, order);
      console.log(`   - –°–∞–º–∞—è —Ä–∞–Ω–Ω—è—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${earliestStartDate.toLocaleString()}`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      const isCriticalOrder = this.isCriticalOrder(order);
      console.log(`   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–∫–∞–∑: ${isCriticalOrder}`);
      
      // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞–Ω–æ–∫ —Å —É—á–µ—Ç–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
      console.log(`   - –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞–Ω–æ–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏...`);
      let machineSelection = await this.selectMachineWithScheduling(operation, order, earliestStartDate, machineSchedule, isCriticalOrder);
      
      if (!machineSelection) {
        console.log(`   - üî¥ –ù–ï –ù–ê–ô–î–ï–ù –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞–Ω–æ–∫ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º`);
      } else {
        console.log(`   - ‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–æ–∫: ${machineSelection.machine.name}`);
      }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–ª–æ—Ç
        if (!machineSelection && isCriticalOrder) {
          console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–∫–∞–∑ ${order.drawingNumber}: –ø—ã—Ç–∞–µ–º—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–ª–æ—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.sequenceNumber}`);
          machineSelection = await this.findSlotForCriticalOrder(operation, order, earliestStartDate, machineSchedule, this.sortedOrders);
        }
        
        if (!machineSelection) {
          console.warn(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞–Ω–æ–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.sequenceNumber} –∑–∞–∫–∞–∑–∞ ${order.drawingNumber} (ID: ${operation.id}, —Ç–∏–ø: ${operation.operationType})`);
          continue;
        }

        const { machine: selectedMachine, availableStartTime } = machineSelection;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏
        const setupTime = this.determineSetupTime(operation, selectedMachine);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const baseTimeMinutes = (operation.estimatedTime || 0) * Number(order.quantity || 1);
        const adjustedTime = baseTimeMinutes / (selectedMachine.efficiencyFactor || 1);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
        const bufferTime = adjustedTime * (selectedMachine.historicalDowntimeProbability || 0.1);
        
        // –û–±—â–µ–µ –≤—Ä–µ–º—è
        const totalTime = adjustedTime + setupTime + bufferTime;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const endDate = await this.calculateEndDate(availableStartTime, totalTime);
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const planningResult: PlanningResult = {
          id: uuidv4(),
          orderId: order.id,
          operationId: operation.id,
          machine: selectedMachine.name,
          plannedStartDate: availableStartTime.toISOString(),
          plannedEndDate: endDate.toISOString(),
          quantityAssigned: order.quantity,
          remainingQuantity: order.quantity,
          expectedTimeMinutes: Math.round(adjustedTime),
          setupTimeMinutes: Math.round(setupTime),
          bufferTimeMinutes: Math.round(bufferTime),
          status: 'planned'
        };
        
        planningResults.push(planningResult);
        
        // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞
        const schedule = machineSchedule.get(selectedMachine.name) || [];
        schedule.push({
          start: availableStartTime,
          end: endDate,
          operationId: operation.id
        });
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤
        schedule.sort((a, b) => a.start.getTime() - b.start.getTime());
        machineSchedule.set(selectedMachine.name, schedule);
        
        console.log(`‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è ${operation.sequenceNumber} –∑–∞–∫–∞–∑–∞ ${order.drawingNumber} –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${selectedMachine.name} —Å ${availableStartTime.toLocaleString()} –¥–æ ${endDate.toLocaleString()}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        completedOperations.set(operation.id, endDate);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –Ω–∞–ª–∞–¥–∫–∏ —Å—Ç–∞–Ω–∫–∞
        selectedMachine.currentSetupType = this.getOperationSetupType(operation);
      }
    }
    
    console.log(`üéØ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ${planningResults.length} –æ–ø–µ—Ä–∞—Ü–∏–π.`);
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('üìä –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–æ–≤:');
    for (const [machineName, schedule] of machineSchedule) {
      if (schedule.length > 0) {
        console.log(`  ${machineName}: ${schedule.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
        schedule.forEach((slot, index) => {
          console.log(`    ${index + 1}. ${slot.start.toLocaleString()} - ${slot.end.toLocaleString()} (${slot.operationId})`);
        });
      }
    }
    
    return planningResults;
  }

  // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  public async adaptivePlanning(orders: Order[], shifts: Shift[]): Promise<PlanningResult[]> {
    console.log('\nüìà === –ù–ê–ß–ò–ù–ê–ï–ú –ê–î–ê–ü–¢–ò–í–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï ===');
    console.log(`üìä –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ ${shifts.length} —Å–º–µ–Ω...`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    this.updateOperationDeviationFactors(orders, shifts);
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω —Å —É—á–µ—Ç–æ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    return this.planOrders(orders);
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–Ω—É–∂–Ω—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
  private sortedOrders: Order[] = [];
  
  // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤
  private preprocessOrdersForPlanning(orders: Order[]): Order[] {
    const currentDate = new Date();
    const processedOrders: Order[] = [];
    
    console.log('\nüìã === –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–ê–ó–û–í ===');
    console.log(`üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${currentDate.toLocaleDateString('ru-RU')} (${currentDate.toISOString()})`);
    console.log(`üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${orders.length}`);
    
    if (orders.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!');
      return [];
    }
    
    for (const order of orders) {
      let processedOrder = { ...order };
      const deadline = new Date(order.deadline);
      
      console.log(`\nüîç –ó–∞–∫–∞–∑ ${order.drawingNumber}:`);
      console.log(`   üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleDateString('ru-RU')}`);
      console.log(`   üèóÔ∏è –û–ø–µ—Ä–∞—Ü–∏–π: ${order.operations.length}`);
      console.log(`   üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.quantity}`);
      console.log(`   ‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${order.priority}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –ª–∏ –¥–µ–¥–ª–∞–π–Ω
      if (deadline < currentDate) {
        const daysOverdue = Math.ceil((currentDate.getTime() - deadline.getTime()) / (1000 * 60 * 60 * 24));
        console.warn(`‚ö†Ô∏è –ü–†–û–°–†–û–ß–ï–ù–ù–´–ô –î–ï–î–õ–ê–ô–ù: –ó–∞–∫–∞–∑ ${order.drawingNumber} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ ${daysOverdue} –¥–Ω–µ–π!`);
        
        // –ù–ï –ø–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π!
        console.log(`üìå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º: ${processedOrder.priority} (–ø—Ä–æ—Å—Ä–æ—á–∫–∞ –Ω–µ –º–µ–Ω—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–ø–µ–Ω—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        (processedOrder as any).daysOverdue = daysOverdue;
        (processedOrder as any).isOverdue = true;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω
        const newDeadline = this.calculateRealisticDeadline(processedOrder, currentDate);
        console.log(`üìÖ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω —Å ${deadline.toLocaleDateString('ru-RU')} –Ω–∞ ${newDeadline.toLocaleDateString('ru-RU')}`);
        processedOrder.deadline = newDeadline.toISOString();
        
        // –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
        this.createOverdueOrderAlert(processedOrder, deadline, newDeadline);
      } else {
        const daysUntilDeadline = Math.ceil((deadline.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24));
        console.log(`‚úÖ –î–µ–¥–ª–∞–π–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (—á–µ—Ä–µ–∑ ${daysUntilDeadline} –¥–Ω–µ–π)`);
        
        // –î–ª—è –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        (processedOrder as any).daysOverdue = 0;
        (processedOrder as any).isOverdue = false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–π
      let completedOps = 0;
      let inProgressOps = 0;
      let pendingOps = 0;
      
      processedOrder.operations.forEach(op => {
        const extendedOp = op as any;
        const status = extendedOp.completionStatus || 'unknown';
        
        switch (status) {
          case 'completed': completedOps++; break;
          case 'in-progress': inProgressOps++; break;
          case 'pending': pendingOps++; break;
          default: pendingOps++; break;
        }
      });
      
      console.log(`   üìä –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–π: –∑–∞–≤–µ—Ä—à–µ–Ω–æ ${completedOps}, –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ${inProgressOps}, –æ–∂–∏–¥–∞–µ—Ç ${pendingOps}`);
      
      processedOrders.push(processedOrder);
    }
    
    console.log(`\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedOrders.length} –∑–∞–∫–∞–∑–æ–≤`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    this.sortedOrders = processedOrders;
    
    return processedOrders;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ —Å–º–µ–Ω)
  private isOperationCompleted(operation: Operation, order: Order): boolean {
    // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
    console.log(`      üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.sequenceNumber}:`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–∏
    const extendedOperation = operation as Operation & {
      completionStatus?: string;
      completedUnits?: number;
    };
    
    console.log(`        - completionStatus: ${extendedOperation.completionStatus || '–Ω–µ—Ç'}`);
    console.log(`        - completedUnits: ${extendedOperation.completedUnits || '–Ω–µ—Ç'}`);
    console.log(`        - actualTime: ${operation.actualTime || '–Ω–µ—Ç'}`);
    console.log(`        - estimatedTime: ${operation.estimatedTime || '–Ω–µ—Ç'}`);
    console.log(`        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∑–∞–∫–∞–∑–µ: ${order.quantity}`);
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç—É—Å
    if (extendedOperation.completionStatus === 'completed') {
      console.log(`        ‚Üí –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ completed`);
      return true;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
    if (typeof extendedOperation.completedUnits === 'number' && extendedOperation.completedUnits >= order.quantity) {
      console.log(`        ‚Üí –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É: ${extendedOperation.completedUnits}/${order.quantity}`);
      return true;
    }
    
    // –ï—Å–ª–∏ —É –æ–ø–µ—Ä–∞—Ü–∏–∏ –µ—Å—Ç—å actualTime –∏ –æ–Ω–∞ —Ä–∞–≤–Ω–∞ –∏–ª–∏ –±–æ–ª—å—à–µ estimatedTime,
    // —Å—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
    if (operation.actualTime && operation.estimatedTime && operation.actualTime >= operation.estimatedTime) {
      console.log(`        ‚Üí –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: ${operation.actualTime} >= ${operation.estimatedTime}`);
      return true;
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π
    console.log(`        ‚Üí –û–ø–µ—Ä–∞—Ü–∏—è –ù–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)`);
    return false;
  }
  
  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  private calculateRealisticDeadline(order: Order, fromDate: Date): Date {
    // –°—É–º–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    const totalTimeMinutes = order.operations.reduce((total, op) => {
      return total + (op.estimatedTime || 0) * order.quantity;
    }, 0);
    
    // –î–æ–±–∞–≤–ª—è–µ–º 30% –±—É—Ñ–µ—Ä –∏ –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 60 –º–∏–Ω –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é)
    const bufferedTimeMinutes = totalTimeMinutes * 1.3 + (order.operations.length * 60);
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 8 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å)
    const workingDaysNeeded = Math.ceil(bufferedTimeMinutes / 480); // 480 –º–∏–Ω = 8 —á–∞—Å–æ–≤
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É, –¥–æ–±–∞–≤–ª—è—è —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ + –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
    const calculatedDeadline = new Date(fromDate);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö (–º–Ω–æ–∂–∏–º –Ω–∞ 1.4 –¥–ª—è —É—á–µ—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö)
    const calendarDaysToAdd = Math.ceil(workingDaysNeeded * 1.4) + 2; // +2 –¥–Ω—è –∑–∞–ø–∞—Å
    calculatedDeadline.setDate(calculatedDeadline.getDate() + calendarDaysToAdd);
    
    return calculatedDeadline;
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
  private createOverdueOrderAlert(order: Order, originalDeadline: Date, newDeadline: Date): void {
    const daysOverdue = Math.ceil((new Date().getTime() - originalDeadline.getTime()) / (1000 * 60 * 60 * 24));
    
    console.log(`üö® –°–æ–∑–¥–∞–Ω –∞–ª–µ—Ä—Ç: –ó–∞–∫–∞–∑ ${order.drawingNumber} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ ${daysOverdue} –¥–Ω–µ–π`);
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –∞–ª–µ—Ä—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
  }
  private sortOrdersByPriorityAndDeadline(orders: Order[]): Order[] {
    console.log('\nüîÑ === –°–û–†–¢–ò–†–û–í–ö–ê –ó–ê–ö–ê–ó–û–í ===');
    console.log('üìã –õ–æ–≥–∏–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:');
    console.log('   1. –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–ú–ï–ù–¨–®–ò–ô –Ω–æ–º–µ—Ä = –í–´–®–ï –≤–∞–∂–Ω–æ—Å—Ç—å: 1 > 2 > 3)');
    console.log('   2. –í–Ω—É—Ç—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–∫–∏');
    console.log('   3. –ó–∞—Ç–µ–º: –æ–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ –¥–µ–¥–ª–∞–π–Ω—É (—Ä–∞–Ω—å—à–µ = –≤—ã—à–µ –≤–∞–∂–Ω–æ—Å—Ç—å)');
    
    const sorted = orders.sort((a, b) => {
      // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–ú–ï–ù–¨–®–ò–ô –Ω–æ–º–µ—Ä = –í–´–®–ï –≤–∞–∂–Ω–æ—Å—Ç—å: 1 > 2 > 3)
      if (a.priority !== b.priority) {
        return a.priority - b.priority; // –ú–µ–Ω—å—à–∏–π –Ω–æ–º–µ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º
      }
      
      // 2. –í–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞
      const aOverdue = (a as any).isOverdue || false;
      const bOverdue = (b as any).isOverdue || false;
      const aDaysOverdue = (a as any).daysOverdue || 0;
      const bDaysOverdue = (b as any).daysOverdue || 0;
      
      // –ï—Å–ª–∏ –æ–¥–∏–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, –∞ –¥—Ä—É–≥–æ–π –Ω–µ—Ç - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º
      if (aOverdue && !bOverdue) return -1;
      if (!aOverdue && bOverdue) return 1;
      
      // –ï—Å–ª–∏ –æ–±–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ (–±–æ–ª—å—à–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∞ = –≤—ã—à–µ)
      if (aOverdue && bOverdue) {
        return bDaysOverdue - aDaysOverdue; // –û—Ç –±–æ–ª—å—à–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –∫ –º–µ–Ω—å—à–µ–π
      }
      
      // 3. –ï—Å–ª–∏ –æ–±–∞ –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–µ–¥–ª–∞–π–Ω—É (—Ä–∞–Ω—å—à–µ = –≤—ã—à–µ –≤–∞–∂–Ω–æ—Å—Ç—å)
      return new Date(a.deadline).getTime() - new Date(b.deadline).getTime();
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:');
    sorted.forEach((order, index) => {
      const overdue = (order as any).isOverdue || false;
      const daysOverdue = (order as any).daysOverdue || 0;
      const overdueInfo = overdue ? ` (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ ${daysOverdue} –¥–Ω–µ–π)` : '';
      const deadline = new Date(order.deadline).toLocaleDateString('ru-RU');
      
      console.log(`   ${index + 1}. ${order.drawingNumber} - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ${order.priority}, –¥–µ–¥–ª–∞–π–Ω ${deadline}${overdueInfo}`);
    });
    
    return sorted;
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ–ø–µ—Ä–∞—Ü–∏–π
  private buildDependencyGraph(operations: Operation[]): Map<string, string[]> {
    const graph = new Map<string, string[]>();
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ sequenceNumber
    const sortedOps = operations.sort((a, b) => a.sequenceNumber - b.sequenceNumber);
    
    for (let i = 0; i < sortedOps.length; i++) {
      const operation = sortedOps[i];
      graph.set(operation.id, []);
      
      // –ö–∞–∂–¥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π)
      if (i > 0) {
        const dependencies = graph.get(operation.id) || [];
        dependencies.push(sortedOps[i - 1].id);
        graph.set(operation.id, dependencies);
      }
    }
    
    return graph;
  }

  // –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
  private topologicalSort(operations: Operation[], dependencyGraph: Map<string, string[]>): Operation[] {
    const visited = new Set<string>();
    const result: Operation[] = [];
    const operationMap = new Map(operations.map(op => [op.id, op]));
    
    const visit = (operationId: string) => {
      if (visited.has(operationId)) return;
      visited.add(operationId);
      
      const dependencies = dependencyGraph.get(operationId) || [];
      for (const depId of dependencies) {
        visit(depId);
      }
      
      const operation = operationMap.get(operationId);
      if (operation) {
        result.push(operation);
      }
    };
    
    for (const operation of operations) {
      visit(operation.id);
    }
    
    return result;
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∞–º–æ–π —Ä–∞–Ω–Ω–µ–π –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  private determineEarliestStartDate(operation: Operation, completedOperations: Map<string, Date>, order: Order): Date {
    const now = new Date();
    let earliestDate = now;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ç–æ–º –∂–µ –∑–∞–∫–∞–∑–µ
    const orderOperations = order.operations.sort((a, b) => a.sequenceNumber - b.sequenceNumber);
    const currentIndex = orderOperations.findIndex(op => op.id === operation.id);
    
    if (currentIndex > 0) {
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π
      const previousOperation = orderOperations[currentIndex - 1];
      const previousEndDate = completedOperations.get(previousOperation.id);
      
      if (previousEndDate && previousEndDate > earliestDate) {
        earliestDate = previousEndDate;
      }
    }
    
    return earliestDate;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω–∫–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏
  private async selectMachineWithScheduling(
    operation: Operation, 
    order: Order, 
    earliestStartDate: Date,
    machineSchedule: Map<Machine, Array<{ start: Date; end: Date; operationId: string }>>,
    emergencyMode: boolean = false
  ): Promise<{ machine: MachineConfiguration; availableStartTime: Date } | null> {
    console.log(`    üîé –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç–∞–Ω–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.operationType}:`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞–Ω–∫–∏ –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
    const compatibleMachines = this.machineConfigs.filter(machine => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
      switch (operation.operationType) {
        case '3-axis':
          return machine.supports3Axis && machine.supportsMilling && machine.isActive;
        case '4-axis':
          return machine.supports4Axis && machine.supportsMilling && machine.isActive;
        case 'milling':
          return machine.supportsMilling && machine.isActive;
        case 'turning':
          return machine.supportsTurning && machine.isActive;
        default:
          console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operation.operationType}. –†–∞–∑—Ä–µ—à–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω–∫–∞—Ö.`);
          return machine.isActive;
      }
    });
    
    console.log(`      - –°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å—Ç–∞–Ω–∫–∏: ${compatibleMachines.map(m => m.name).join(', ')}`);
    
    if (compatibleMachines.length === 0) {
      console.log(`      - ‚ùå –ù–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤!`);
      return null;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const setupTime = this.determineSetupTime(operation, compatibleMachines[0]); // –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏
    const baseTimeMinutes = (operation.estimatedTime || 0) * Number(order.quantity || 1);
    const estimatedDuration = baseTimeMinutes + setupTime;
    
    console.log(`      - –û–ø–µ—Ä–∞—Ü–∏—è: ${baseTimeMinutes} –º–∏–Ω, –Ω–∞–ª–∞–¥–∫–∞: ${setupTime} –º–∏–Ω, –æ–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${estimatedDuration} –º–∏–Ω`);
    console.log(`      - –°–∞–º–∞—è —Ä–∞–Ω–Ω—è—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${earliestStartDate.toLocaleString()}`);

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –ø–µ—Ä–≤—ã–º
    if (operation.machine) {
      const preferredMachine = compatibleMachines.find(m => m.name === operation.machine);
      if (preferredMachine) {
        console.log(`      - –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞–Ω–æ–∫: ${preferredMachine.name}`);
        const availableTime = await this.findAvailableTimeSlot(
          preferredMachine.name,
          earliestStartDate,
          estimatedDuration,
          machineSchedule
        );
        if (availableTime) {
          console.log(`üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ ${preferredMachine.name} –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.sequenceNumber}`);
          return { machine: preferredMachine, availableStartTime: availableTime };
        } else {
          console.log(`      - –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
        }
      }
    }
    
    // –ò—â–µ–º —Å—Ç–∞–Ω–æ–∫ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–∂–∏–¥–∞–Ω–∏—è
    let bestOption: { machine: MachineConfiguration; availableStartTime: Date } | null = null;
    let shortestWait = Infinity;

    console.log(`      - –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å—Ç–∞–Ω–∫–∏...`);
    for (const machine of compatibleMachines) {
      console.log(`        ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ–º ${machine.name}...`);
      const availableTime = await this.findAvailableTimeSlot(
        machine.name,
        earliestStartDate,
        estimatedDuration,
        machineSchedule
      );
      
      if (availableTime) {
        const waitTime = availableTime.getTime() - earliestStartDate.getTime();
        const waitDays = waitTime / (1000 * 60 * 60 * 24);
        console.log(`          - –î–æ—Å—Ç—É–ø–µ–Ω —Å ${availableTime.toLocaleString()}, –æ–∂–∏–¥–∞–Ω–∏–µ: ${waitDays.toFixed(1)} –¥–Ω–µ–π`);
        
        if (waitTime < shortestWait) {
          shortestWait = waitTime;
          bestOption = { machine, availableStartTime: availableTime };
        }
      } else {
        console.log(`          - –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
      }
    }

    if (bestOption) {
      const waitDays = shortestWait / (1000 * 60 * 60 * 24);
      console.log(`‚è∞ –í—ã–±—Ä–∞–Ω —Å—Ç–∞–Ω–æ–∫ ${bestOption.machine.name} —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º ${waitDays.toFixed(1)} –¥–Ω–µ–π`);
    } else {
      console.log(`      - ‚ùå –ù–∏ –æ–¥–∏–Ω —Å—Ç–∞–Ω–æ–∫ –Ω–µ –ø–æ–¥–æ—à–µ–ª`);
    }

    return bestOption;
  }

  // –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏:
  // 1. –ú–∞–∫—Å–∏–º—É–º 2 –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞–Ω–æ–∫ –≤ –¥–µ–Ω—å
  // 2. –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–æ 14:00, –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
  private async findAvailableTimeSlot(
    machineName: Machine,
    earliestStart: Date,
    estimatedDuration: number,
    machineSchedule: Map<Machine, Array<{ start: Date; end: Date; operationId: string }>>
  ): Promise<Date | null> {
    const schedule = machineSchedule.get(machineName) || [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞—Ç—å—Å—è –≤ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    let candidateStart = new Date(earliestStart);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    candidateStart = await this.adjustToWorkingTime(candidateStart);
    
    let iterations = 0;
    const maxIterations = 100; // –∑–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    
    while (iterations < maxIterations) {
      const candidateEnd = await this.calculateEndDate(candidateStart, estimatedDuration);
      const candidateDate = candidateStart.toDateString();
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞–Ω–∫–µ –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–Ω—ã–π –¥–µ–Ω—å
      const operationsInDay = schedule.filter(slot => {
        return slot.start.toDateString() === candidateDate;
      });
      
      // –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï 1: –ú–∞–∫—Å–∏–º—É–º 2 –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞–Ω–æ–∫ –≤ –¥–µ–Ω—å
      if (operationsInDay.length >= 2) {
        console.log(`‚ö†Ô∏è –°—Ç–∞–Ω–æ–∫ ${machineName} —É–∂–µ –∏–º–µ–µ—Ç ${operationsInDay.length} –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ ${candidateDate}. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é.`);
        candidateStart = await this.getNextWorkingDayStart(candidateStart);
        iterations++;
        continue;
      }
      
      // –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–µ–Ω—å (–≤–∫–ª—é—á–∞—è –Ω–∞–ª–∞–¥–∫—É –∏ –±—É—Ñ–µ—Ä)
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
      const setupTime = this.determineSetupTime({ operationType: 'milling' } as Operation, this.machineConfigs[0]);
      const bufferTime = estimatedDuration * 0.1; // –ü—Ä–∏–º–µ—Ä–Ω–æ 10% –±—É—Ñ–µ—Ä
      const totalOperationTime = estimatedDuration + setupTime + bufferTime;
      
      const existingTotalTime = this.getTotalTimeForDay(machineName, candidateDate, machineSchedule);
      const existingTimeNum = typeof existingTotalTime === 'number' ? existingTotalTime : Number(existingTotalTime);
      const operationTimeNum = typeof totalOperationTime === 'number' ? totalOperationTime : Number(totalOperationTime);
      
      if (existingTimeNum + operationTimeNum > PlanningUtils.MAX_WORKING_MINUTES_PER_DAY) {
        const overTime = existingTimeNum + operationTimeNum - PlanningUtils.MAX_WORKING_MINUTES_PER_DAY;
        console.log(`‚ö†Ô∏è –°—Ç–∞–Ω–æ–∫ ${machineName} –ø—Ä–µ–≤—ã—Å–∏—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ ${candidateDate}. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${existingTotalTime} –º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º–æ–µ –≤—Ä–µ–º—è: ${totalOperationTime} –º–∏–Ω (–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ: ${overTime} –º–∏–Ω). –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é.`);
        candidateStart = await this.getNextWorkingDayStart(candidateStart);
        iterations++;
        continue;
      }
      
      // –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï 3: –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—è, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∞—è—Å—è –¥–æ 14:00, –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–∞–µ–º
      const hasEarlyEndingOperation = operationsInDay.some(slot => {
        const endHour = slot.end.getHours();
        const endMinute = slot.end.getMinutes();
        return endHour < 14 || (endHour === 14 && endMinute === 0);
      });
      
      if (hasEarlyEndingOperation) {
        console.log(`‚ö†Ô∏è –°—Ç–∞–Ω–æ–∫ ${machineName} –∏–º–µ–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â—É—é—Å—è –¥–æ 14:00 –Ω–∞ ${candidateDate}. –ù–µ –Ω–∞–∑–Ω–∞—á–∞–µ–º –±–æ–ª—å—à–µ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.`);
        candidateStart = await this.getNextWorkingDayStart(candidateStart);
        iterations++;
        continue;
      }
      
      // –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –ª–∏ –Ω–∞—à–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ 14:00
      const ourEndHour = candidateEnd.getHours();
      const ourEndMinute = candidateEnd.getMinutes();
      const ourEndsEarly = ourEndHour < 14 || (ourEndHour === 14 && ourEndMinute === 0);
      
      // –ï—Å–ª–∏ –Ω–∞—à–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–æ 14:00 –∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏, –∏—â–µ–º –¥—Ä—É–≥–æ–π –¥–µ–Ω—å
      if (ourEndsEarly && operationsInDay.length > 0) {
        console.log(`‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${machineName} –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –¥–æ 14:00 (${candidateEnd.toLocaleTimeString()}), –∞ –≤ –¥–µ–Ω—å ${candidateDate} —É–∂–µ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é.`);
        candidateStart = await this.getNextWorkingDayStart(candidateStart);
        iterations++;
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      const hasConflict = schedule.some(slot => {
        return (
          (candidateStart >= slot.start && candidateStart < slot.end) ||
          (candidateEnd > slot.start && candidateEnd <= slot.end) ||
          (candidateStart <= slot.start && candidateEnd >= slot.end)
        );
      });
      
      if (!hasConflict) {
        const endTime = candidateEnd.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'});
        const dayInfo = ourEndsEarly ? ' (–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ä–∞–Ω–æ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–µ–Ω—å)' : '';
        const totalTimeInfo = ` –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–µ–Ω—å: ${existingTimeNum + operationTimeNum}/${PlanningUtils.MAX_WORKING_MINUTES_PER_DAY} –º–∏–Ω.`;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${machineName} –Ω–∞ ${candidateDate}. –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ ${endTime}${dayInfo}. –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å: ${operationsInDay.length + 1}.${totalTimeInfo}`);
        return candidateStart;
      }
      
      // –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
      const conflictingSlots = schedule.filter(slot => 
        (candidateStart >= slot.start && candidateStart < slot.end) ||
        (candidateEnd > slot.start && candidateEnd <= slot.end) ||
        (candidateStart <= slot.start && candidateEnd >= slot.end)
      );
      
      if (conflictingSlots.length > 0) {
        // –ë–µ—Ä–µ–º –∫–æ–Ω–µ—Ü —Å–∞–º–æ–≥–æ –ø–æ–∑–¥–Ω–µ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–µ–≥–æ —Å–ª–æ—Ç–∞
        const latestEnd = conflictingSlots.reduce((latest, slot) => 
          slot.end > latest ? slot.end : latest, conflictingSlots[0].end);
        candidateStart = new Date(latestEnd);
        candidateStart = await this.adjustToWorkingTime(candidateStart);
      } else {
        break;
      }
      
      iterations++;
    }
    
    // –í –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ emergencyMode –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ findAvailableTimeSlot
    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
    const maxWaitDays = 60; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç –æ–∂–∏–¥–∞–Ω–∏—è
    if (candidateStart.getTime() - earliestStart.getTime() > maxWaitDays * 24 * 60 * 60 * 1000) {
      console.warn(`‚ö†Ô∏è –°—Ç–∞–Ω–æ–∫ ${machineName} —Å–ª–∏—à–∫–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω. –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${maxWaitDays} –¥–Ω–µ–π.`);
      return null;
    }
    
    return candidateStart;
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
  private async getNextWorkingDayStart(currentDate: Date): Promise<Date> {
    const nextDay = new Date(currentDate);
    nextDay.setDate(nextDay.getDate() + 1);
    nextDay.setHours(8, 0, 0, 0);
    
    const nextWorkingDay = await IsraeliCalendar.getNextWorkingDay(nextDay);
    nextWorkingDay.setHours(8, 0, 0, 0);
    
    return nextWorkingDay;
  }
  
  // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å—Ç–∞–Ω–∫–µ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å
  private getTotalTimeForDay(
    machineName: Machine,
    date: Date | string,
    machineSchedule: Map<Machine, Array<{ start: Date; end: Date; operationId: string }>>
  ): number {
    const targetDate = typeof date === 'string' ? date : date.toDateString();
    const schedule = machineSchedule.get(machineName) || [];
    
    return schedule
      .filter(slot => slot.start.toDateString() === targetDate)
      .reduce((total, slot) => {
        const duration = slot.end.getTime() - slot.start.getTime();
        return total + Math.round(duration / (1000 * 60)); // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
      }, 0);
  }
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫ —Ä–∞–±–æ—á–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
  private async adjustToWorkingTime(date: Date): Promise<Date> {
    const isWorking = await IsraeliCalendar.isWorkingDay(date);
    
    if (!isWorking) {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞–±–æ—á–µ–º—É –¥–Ω—é
      const nextWorkingDay = await IsraeliCalendar.getNextWorkingDay(date);
      nextWorkingDay.setHours(8, 0, 0, 0);
      return nextWorkingDay;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
    const dayOfWeek = date.getDay();
    const hour = date.getHours();
    
    if (hour < 8) {
      // –î–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
      date.setHours(8, 0, 0, 0);
    } else if ((dayOfWeek >= 0 && dayOfWeek <= 4 && hour >= 16) || (dayOfWeek === 5 && hour >= 14)) {
      // –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
      const nextWorkingDay = await IsraeliCalendar.getNextWorkingDay(date);
      nextWorkingDay.setHours(8, 0, 0, 0);
      return nextWorkingDay;
    }
    
    return date;
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ª–∞–¥–∫–∏ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
  private determineSetupTime(operation: Operation, machine: MachineConfiguration): number {
    // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    let baseSetupTime: number;
    
    switch (operation.operationType) {
      case '4-axis':
        baseSetupTime = 90; // 4-–∫–æ–æ—Ä–¥ —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–∏–µ - —Å–ª–æ–∂–Ω–∞—è –Ω–∞–ª–∞–¥–∫–∞
        break;
      case '3-axis':
        baseSetupTime = 60; // 3-–∫–æ–æ—Ä–¥ —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–∏–µ
        break;
      case 'milling':
        baseSetupTime = 45; // –û–±—ã—á–Ω–æ–µ —Ñ—Ä–µ–∑–µ—Ä–Ω–æ–µ
        break;
      case 'turning':
        baseSetupTime = 30; // –¢–æ–∫–∞—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        break;
      default:
        baseSetupTime = 60;
    }
    
    // –ï—Å–ª–∏ —Å—Ç–∞–Ω–æ–∫ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Ç–æ—Ç –∂–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏, –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏ –º–µ–Ω—å—à–µ
    const currentSetupType = this.getOperationSetupType(operation);
    if (machine.currentSetupType === currentSetupType) {
      return baseSetupTime * 0.3; // 30% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    }
    
    return baseSetupTime;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–∞–ª–∞–¥–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
  private getOperationSetupType(operation: Operation): string {
    return `${operation.operationType}-setup`;
  }

  // –†–∞—Å—Å—á–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
  private async calculateEndDate(startDate: Date, totalMinutes: number): Promise<Date> {
    let currentDate = new Date(startDate);
    let remainingMinutes = totalMinutes;
    
    while (remainingMinutes > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Ä–∞–±–æ—á–∏–º (—É—á–∏—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ò–∑—Ä–∞–∏–ª—è)
      const isWorking = await IsraeliCalendar.isWorkingDay(currentDate);
      
      if (!isWorking) {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
        currentDate = await IsraeliCalendar.getNextWorkingDay(currentDate);
        currentDate.setHours(8, 0, 0, 0); // –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        continue;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
      const dayOfWeek = currentDate.getDay();
      let dayMinutes: number;
      
      if (dayOfWeek >= 0 && dayOfWeek <= 4) {
        // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ-—á–µ—Ç–≤–µ—Ä–≥: 8:00-16:00 (480 –º–∏–Ω—É—Ç)
        dayMinutes = 480;
      } else if (dayOfWeek === 5) {
        // –ü—è—Ç–Ω–∏—Ü–∞: 8:00-14:00 (360 –º–∏–Ω—É—Ç)
        dayMinutes = 360;
      } else {
        // –°—É–±–±–æ—Ç–∞ - –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–±–æ—á–∏–º –¥–Ω–µ–º, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        dayMinutes = 0;
      }
      
      // –°—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–Ω—É—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ
      let availableMinutes = dayMinutes;
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å, —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
      if (currentDate.getTime() === startDate.getTime()) {
        const currentHour = currentDate.getHours();
        const currentMinute = currentDate.getMinutes();
        
        if (currentHour < 8) {
          // –î–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
          currentDate.setHours(8, 0, 0, 0);
          availableMinutes = dayMinutes;
        } else {
          // –í —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
          const endHour = dayOfWeek === 5 ? 14 : 16; // –ü—è—Ç–Ω–∏—Ü–∞ –¥–æ 14:00, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ 16:00
          
          if (currentHour >= endHour) {
            // –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
            currentDate = await IsraeliCalendar.getNextWorkingDay(currentDate);
            currentDate.setHours(8, 0, 0, 0);
            continue;
          } else {
            // –í —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
            const usedMinutes = (currentHour - 8) * 60 + currentMinute;
            availableMinutes = dayMinutes - usedMinutes;
          }
        }
      }
      
      if (remainingMinutes <= availableMinutes) {
        // –í—Å–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        currentDate.setMinutes(currentDate.getMinutes() + remainingMinutes);
        remainingMinutes = 0;
      } else {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞–±–æ—á–µ–º—É –¥–Ω—é
        remainingMinutes -= availableMinutes;
        currentDate = await IsraeliCalendar.getNextWorkingDay(currentDate);
        currentDate.setHours(8, 0, 0, 0);
      }
    }
    
    return currentDate;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
  private updateOperationDeviationFactors(orders: Order[], shifts: Shift[]): void {
    const operationStats = new Map<string, {
      totalProduced: number;
      totalTimeSpent: number;
      totalExpectedTime: number;
    }>();

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –∏–∑ —Å–º–µ–Ω
    for (const shift of shifts) {
      for (const operation of shift.operations) {
        const stats = operationStats.get(operation.operationId) || {
          totalProduced: 0,
          totalTimeSpent: 0,
          totalExpectedTime: 0
        };
        
        stats.totalProduced += operation.completedUnits;
        stats.totalTimeSpent += Number(operation.timeSpent || 0);
        
        // –ù–∞—Ö–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∑–∞–∫–∞–∑–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const order = orders.find(o => o.operations.some(op => op.id === operation.operationId));
        if (order) {
          const orderOperation = order.operations.find(op => op.id === operation.operationId);
          if (orderOperation && orderOperation.estimatedTime) {
            stats.totalExpectedTime += (orderOperation.estimatedTime || 0) * operation.completedUnits;
          }
        }
        
        operationStats.set(operation.operationId, stats);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    for (const order of orders) {
      for (const operation of order.operations) {
        const stats = operationStats.get(operation.id);
        if (stats && stats.totalProduced > 0) {
          const actualTimePerUnit = stats.totalTimeSpent / stats.totalProduced;
          operation.actualTime = actualTimePerUnit;
        }
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
  public async handleForceMajeure(forceMajeure: ForceMajeure, orders: Order[]): Promise<PlanningResult[]> {
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const affectedOperations: Operation[] = [];
    
    for (const order of orders) {
      if (forceMajeure.affectedOrders.includes(order.id)) {
        affectedOperations.push(...order.operations);
      }
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–∞
    if (forceMajeure.entityType === 'machine') {
      const affectedMachine = forceMajeure.entityId as Machine;
      const filteredOperations = affectedOperations.filter(op => op.machine === affectedMachine);
      
      // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç–∞–Ω–∫–∏
      for (const operation of filteredOperations) {
        const alternativeMachine = this.findAlternativeMachine(operation, affectedMachine);
        if (alternativeMachine) {
          operation.machine = alternativeMachine.name;
        }
      }
    }

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω –¥–ª—è –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    const affectedOrders = orders.filter(order => forceMajeure.affectedOrders.includes(order.id));
    return this.planOrders(affectedOrders);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  private isCriticalOrder(order: Order): boolean {
    const deadline = new Date(order.deadline);
    const now = new Date();
    const isOverdue = (order as any).isOverdue || false;
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è:
    // 1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)
    // 2. –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
    // 3. –î–µ–¥–ª–∞–π–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 3 –¥–Ω–µ–π
    const isCritical = order.priority === 1 || 
                      isOverdue || 
                      (deadline.getTime() - now.getTime()) <= (3 * 24 * 60 * 60 * 1000);
    
    if (isCritical) {
      const reason = order.priority === 1 ? '–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç' :
                    isOverdue ? '–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω' :
                    '–±–ª–∏–∑–∫–∏–π –¥–µ–¥–ª–∞–π–Ω';
      console.log(`üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–∫–∞–∑: ${order.drawingNumber} (${reason})`);
    }
    
    return isCritical;
  }
  
  // –ü–æ–∏—Å–∫ —Å–ª–æ—Ç–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø—É—Ç–µ–º —Å–¥–≤–∏–≥–∞ –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  private async findSlotForCriticalOrder(
    operation: Operation,
    order: Order,
    earliestStartDate: Date,
    machineSchedule: Map<Machine, Array<{ start: Date; end: Date; operationId: string }>>,
    allOrders: Order[]
  ): Promise<{ machine: MachineConfiguration; availableStartTime: Date } | null> {
    console.log(`üî• –†–ï–ñ–ò–ú –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ ${order.drawingNumber}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å—Ç–∞–Ω–∫–∏
    const compatibleMachines = this.machineConfigs.filter(machine => {
      switch (operation.operationType) {
        case '3-axis':
          return machine.supports3Axis && machine.supportsMilling && machine.isActive;
        case '4-axis':
          return machine.supports4Axis && machine.supportsMilling && machine.isActive;
        case 'milling':
          return machine.supportsMilling && machine.isActive;
        case 'turning':
          return machine.supportsTurning && machine.isActive;
        default:
          return machine.isActive;
      }
    });
    
    if (compatibleMachines.length === 0) {
      console.log(`‚ùå –ù–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.operationType}`);
      return null;
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    const setupTime = this.determineSetupTime(operation, compatibleMachines[0]);
    const baseTimeMinutes = (operation.estimatedTime || 0) * Number(order.quantity || 1);
    const estimatedDuration = baseTimeMinutes + setupTime;
    
    console.log(`‚è±Ô∏è –¢—Ä–µ–±—É–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: ${estimatedDuration} –º–∏–Ω (–æ–ø–µ—Ä–∞—Ü–∏—è: ${baseTimeMinutes}, –Ω–∞–ª–∞–¥–∫–∞: ${setupTime})`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –Ω–∞ –∫–∞–∂–¥–æ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å—Ç–∞–Ω–∫–µ
    for (const machine of compatibleMachines) {
      console.log(`\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–Ω–æ–∫ ${machine.name} –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...`);
      
      const schedule = machineSchedule.get(machine.name) || [];
      
      // –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–≤–∏–Ω—É—Ç—å –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      const shiftResult = await this.tryToShiftOperations(
        machine.name,
        earliestStartDate,
        estimatedDuration,
        order,
        schedule,
        allOrders
      );
      
      if (shiftResult) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–ª–æ—Ç –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${machine.name} –ø–æ—Å–ª–µ —Å–¥–≤–∏–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–π`);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–¥–≤–∏–≥–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        this.applyOperationShifts(machine.name, shiftResult.shifts, machineSchedule);
        
        return {
          machine,
          availableStartTime: shiftResult.availableTime
        };
      }
    }
    
    console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª–æ—Ç –¥–∞–∂–µ –≤ —Ä–µ–∂–∏–º–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è`);
    return null;
  }
  
  // –ü–æ–ø—ã—Ç–∫–∞ —Å–¥–≤–∏–Ω—É—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º—É –∑–∞–∫–∞–∑—É
  private async tryToShiftOperations(
    machineName: Machine,
    requiredStartTime: Date,
    requiredDuration: number,
    criticalOrder: Order,
    schedule: Array<{ start: Date; end: Date; operationId: string }>,
    allOrders: Order[]
  ): Promise<{ 
    availableTime: Date; 
    shifts: Array<{ operationId: string; newStart: Date; newEnd: Date; originalStart: Date }> 
  } | null> {
    const shifts: Array<{ operationId: string; newStart: Date; newEnd: Date; originalStart: Date }> = [];
    const modifiedSchedule = [...schedule];
    
    // –ò—â–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const requiredEndTime = await this.calculateEndDate(requiredStartTime, requiredDuration);
    
    const conflictingOperations = modifiedSchedule.filter(slot => {
      return (
        (requiredStartTime >= slot.start && requiredStartTime < slot.end) ||
        (requiredEndTime > slot.start && requiredEndTime <= slot.end) ||
        (requiredStartTime <= slot.start && requiredEndTime >= slot.end)
      );
    });
    
    if (conflictingOperations.length === 0) {
      // –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ - –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ—Ç
      return {
        availableTime: requiredStartTime,
        shifts: []
      };
    }
    
    console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${conflictingOperations.length} –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    for (const conflictOp of conflictingOperations) {
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –∏ –æ–ø–µ—Ä–∞—Ü–∏—é
      const conflictOrder = this.findOrderByOperationId(conflictOp.operationId, allOrders);
      if (!conflictOrder) {
        console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${conflictOp.operationId}`);
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
      const conflictOrderPriority = conflictOrder.priority;
      const criticalOrderPriority = criticalOrder.priority;
      
      // –°–¥–≤–∏–≥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      if (criticalOrderPriority >= conflictOrderPriority) {
        console.log(`üîÑ –°–¥–≤–∏–≥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–∫–∞–∑–∞ ${conflictOrder.drawingNumber} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ${conflictOrderPriority} < ${criticalOrderPriority})`);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏)
        const newStartTime = new Date(requiredEndTime);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–≤–∏–≥–∞–µ–º–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        const operationDuration = conflictOp.end.getTime() - conflictOp.start.getTime();
        const newEndTime = new Date(newStartTime.getTime() + operationDuration);
        
        shifts.push({
          operationId: conflictOp.operationId,
          newStart: newStartTime,
          newEnd: newEndTime,
          originalStart: conflictOp.start
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        const index = modifiedSchedule.findIndex(s => s.operationId === conflictOp.operationId);
        if (index !== -1) {
          modifiedSchedule[index] = {
            ...conflictOp,
            start: newStartTime,
            end: newEndTime
          };
        }
      } else {
        console.log(`‚ùå –ù–µ–ª—å–∑—è —Å–¥–≤–∏–Ω—É—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–∫–∞–∑–∞ ${conflictOrder.drawingNumber} - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω (${conflictOrderPriority} >= ${criticalOrderPriority})`);
        return null;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å–¥–≤–∏–≥–æ–≤ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    const finalConflicts = modifiedSchedule.filter(slot => {
      if (shifts.some(shift => shift.operationId === slot.operationId)) {
        return false; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–¥–≤–∏–Ω—É—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      }
      
      return (
        (requiredStartTime >= slot.start && requiredStartTime < slot.end) ||
        (requiredEndTime > slot.start && requiredEndTime <= slot.end) ||
        (requiredStartTime <= slot.start && requiredEndTime >= slot.end)
      );
    });
    
    if (finalConflicts.length > 0) {
      console.log(`‚ùå –ü–æ—Å–ª–µ —Å–¥–≤–∏–≥–æ–≤ –æ—Å—Ç–∞–ª–∏—Å—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã: ${finalConflicts.length}`);
      return null;
    }
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Å–¥–≤–∏–≥ ${shifts.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
    
    return {
      availableTime: requiredStartTime,
      shifts
    };
  }
  
  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–¥–≤–∏–≥–æ–≤ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Å—Ç–∞–Ω–∫–∞
  private applyOperationShifts(
    machineName: Machine,
    shifts: Array<{ operationId: string; newStart: Date; newEnd: Date; originalStart: Date }>,
    machineSchedule: Map<Machine, Array<{ start: Date; end: Date; operationId: string }>>
  ): void {
    const schedule = machineSchedule.get(machineName) || [];
    
    for (const shift of shifts) {
      const index = schedule.findIndex(slot => slot.operationId === shift.operationId);
      if (index !== -1) {
        schedule[index] = {
          start: shift.newStart,
          end: shift.newEnd,
          operationId: shift.operationId
        };
        
        const delayMinutes = Math.round((shift.newStart.getTime() - shift.originalStart.getTime()) / (1000 * 60));
        console.log(`üìÖ –û–ø–µ—Ä–∞—Ü–∏—è ${shift.operationId} —Å–¥–≤–∏–Ω—É—Ç–∞ –Ω–∞ ${delayMinutes} –º–∏–Ω—É—Ç`);
      }
    }
    
    // –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    schedule.sort((a, b) => a.start.getTime() - b.start.getTime());
    machineSchedule.set(machineName, schedule);
  }
  
  // –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ ID –æ–ø–µ—Ä–∞—Ü–∏–∏
  private findOrderByOperationId(operationId: string, orders: Order[]): Order | null {
    for (const order of orders) {
      if (order.operations.some(op => op.id === operationId)) {
        return order;
      }
    }
    return null;
  }
  
  // –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞–Ω–∫–∞ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
  private findAlternativeMachine(operation: Operation, excludeMachine: Machine): MachineConfiguration | null {
    const compatibleMachines = this.machineConfigs.filter(machine => {
      if (machine.name === excludeMachine || !machine.isActive) {
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
      switch (operation.operationType) {
        case '3-axis':
          return machine.supports3Axis && machine.supportsMilling;
        case '4-axis':
          return machine.supports4Axis && machine.supportsMilling;
        case 'milling':
          return machine.supportsMilling;
        case 'turning':
          return machine.supportsTurning;
        default:
          console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operation.operationType}. –†–∞–∑—Ä–µ—à–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω–∫–∞—Ö.`);
          return machine.isActive;
      }
    });
    
    if (compatibleMachines.length === 0) {
      return null;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞–Ω–æ–∫ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞)
    return compatibleMachines[0];
  }

  // –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
  public async updatePlanningResult(resultId: string, updates: Partial<PlanningResult>, existingResults: PlanningResult[]): Promise<PlanningResult[]> {
    const updatedResults = await Promise.all(existingResults.map(async (result) => {
      if (result.id === resultId) {
        const updated = { ...result, ...updates };
        if (updates.plannedStartDate || updates.expectedTimeMinutes || updates.setupTimeMinutes) {
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –Ω–∞—á–∞–ª–æ –∏–ª–∏ –≤—Ä–µ–º—è
          const totalMinutes = updated.expectedTimeMinutes + updated.setupTimeMinutes + updated.bufferTimeMinutes;
          const startDate = new Date(updated.plannedStartDate);
          updated.plannedEndDate = (await this.calculateEndDate(startDate, totalMinutes)).toISOString();
          updated.status = 'rescheduled';
          updated.lastRescheduledAt = new Date().toISOString();
        }
        return updated;
      }
      return result;
    }));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ–≥–æ –∂–µ –∑–∞–∫–∞–∑–∞
    const updatedResult = updatedResults.find(r => r.id === resultId);
    if (updatedResult) {
      await this.cascadeUpdateDependentOperations(updatedResult, updatedResults);
    }
    
    return updatedResults;
  }
  
  // –ö–∞—Å–∫–∞–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  private async cascadeUpdateDependentOperations(updatedResult: PlanningResult, allResults: PlanningResult[]): Promise<void> {
    const orderResults = allResults.filter(r => r.orderId === updatedResult.orderId)
      .sort((a, b) => {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ ID –æ–ø–µ—Ä–∞—Ü–∏–∏)
        const aOpId = a.operationId;
        const bOpId = b.operationId;
        return aOpId.localeCompare(bOpId);
      });
    
    const currentIndex = orderResults.findIndex(r => r.id === updatedResult.id);
    const newEndDate = new Date(updatedResult.plannedEndDate);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ç–æ–º –∂–µ –∑–∞–∫–∞–∑–µ
    for (let i = currentIndex + 1; i < orderResults.length; i++) {
      const nextResult = orderResults[i];
      const nextIndex = allResults.findIndex(r => r.id === nextResult.id);
      
      if (nextIndex !== -1) {
        // –°–ª–µ–¥—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∞—Ç—å—Å—è –Ω–µ —Ä–∞–Ω—å—à–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π
        const currentStart = new Date(allResults[nextIndex].plannedStartDate);
        if (currentStart < newEndDate) {
          allResults[nextIndex].plannedStartDate = newEndDate.toISOString();
          const totalMinutes = allResults[nextIndex].expectedTimeMinutes + 
                               allResults[nextIndex].setupTimeMinutes + 
                               allResults[nextIndex].bufferTimeMinutes;
          allResults[nextIndex].plannedEndDate = (await this.calculateEndDate(newEndDate, totalMinutes)).toISOString();
          allResults[nextIndex].status = 'rescheduled';
          allResults[nextIndex].lastRescheduledAt = new Date().toISOString();
          allResults[nextIndex].rescheduledReason = '–ó–∞–≤–∏—Å–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞';
        }
      }
    }
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–ª–∞–¥–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  public async markSetupCompleted(
    resultId: string, 
    setupData: { actualSetupTime: number; actualStartTime?: string; newMachine?: string },
    existingResults: PlanningResult[],
    allOrders: Order[]
  ): Promise<{ 
    updatedResults: PlanningResult[]; 
    replanningResults: PlanningResult[]; 
    affectedMachine: Machine;
    machineChanged: boolean;
  }> {
    console.log(`üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ª–∞–¥–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${resultId}. –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è: ${setupData.actualSetupTime} –º–∏–Ω.`, 
      setupData.actualStartTime ? `–ù–∞—á–∞–ª–æ: ${setupData.actualStartTime}` : '',
      setupData.newMachine ? `–ù–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫: ${setupData.newMachine}` : '');
    
    // –ù–∞—Ö–æ–¥–∏–º –æ–±–Ω–æ–≤–ª—è–µ–º—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    const targetResult = existingResults.find(r => r.id === resultId);
    if (!targetResult) {
      console.error(`‚ùó –û–ø–µ—Ä–∞—Ü–∏—è ${resultId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return {
        updatedResults: existingResults,
        replanningResults: [],
        affectedMachine: "Doosan Yashana" as Machine
      };
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ–º—ã–π —Å—Ç–∞–Ω–æ–∫ (—Å—Ç–∞—Ä—ã–π –∏–ª–∏ –Ω–æ–≤—ã–π)
    const oldMachine = targetResult.machine;
    const newMachine = setupData.newMachine as Machine || oldMachine;
    const machineChanged = oldMachine !== newMachine;
    
    console.log(`üè† –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ª–∞–¥–∫—É –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${machineChanged ? `${oldMachine} -> ${newMachine}` : oldMachine}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    const updatedResults = await Promise.all(existingResults.map(async (result) => {
      if (result.id === resultId) {
        const updated = { ...result };
        const _timeDifference = setupData.actualSetupTime - updated.setupTimeMinutes;
        updated.setupTimeMinutes = setupData.actualSetupTime;
        
        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        if (machineChanged) {
          updated.machine = newMachine;
          updated.rescheduledReason = `–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ç–∞–Ω–æ–∫ (—Å ${oldMachine} –Ω–∞ ${newMachine})`;
        }
        updated.status = 'in-progress';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if (setupData.actualStartTime) {
          const plannedDate = new Date(updated.plannedStartDate);
          const timeStr = setupData.actualStartTime;
          const [hours, minutes] = timeStr.split(':').map(Number);
          
          const actualStartDate = new Date(plannedDate);
          actualStartDate.setHours(hours, minutes, 0, 0);
          
          updated.plannedStartDate = actualStartDate.toISOString();
          console.log(`üï∞Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${actualStartDate.toLocaleString()}`);
        }
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ª–∞–¥–∫–∏
        const totalMinutes = updated.expectedTimeMinutes + setupData.actualSetupTime + updated.bufferTimeMinutes;
        const startDate = new Date(updated.plannedStartDate);
        updated.plannedEndDate = (await this.calculateEndDate(startDate, totalMinutes)).toISOString();
        
        console.log(`‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è ${resultId}: —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ª–∞–¥–∫–∏: ${_timeDifference} –º–∏–Ω.`);
        
        return updated;
      }
      return result;
    }));
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
    // –ï—Å–ª–∏ —Å—Ç–∞–Ω–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ–±–æ–∏—Ö —Å—Ç–∞–Ω–∫–∞—Ö
    const machinesToReschedule = machineChanged ? [oldMachine, newMachine] : [newMachine];
    
    const machineResults = updatedResults
      .filter(r => machinesToReschedule.includes(r.machine) && r.status === 'planned')
      .sort((a, b) => new Date(a.plannedStartDate).getTime() - new Date(b.plannedStartDate).getTime());
    
    console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ ${machineResults.length} –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å—Ç–∞–Ω–∫–∞—Ö ${machinesToReschedule.join(', ')}`); 
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–Ω–∫–∞
    const machineSchedule: Map<Machine, Array<{ start: Date; end: Date; operationId: string }>> = new Map();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏/–≤—ã–ø–æ–ª–Ω—è—é—â–∏–º–∏—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    for (const machine of machinesToReschedule) {
      const existingSlots = updatedResults
        .filter(r => r.machine === machine && ['completed', 'in-progress'].includes(r.status))
        .map(r => ({
          start: new Date(r.plannedStartDate),
          end: new Date(r.plannedEndDate),
          operationId: r.operationId
        }));
      
      machineSchedule.set(machine, existingSlots);
    }
    
    // –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    const replanningResults: PlanningResult[] = [];
    
    for (const resultToReplan of machineResults) {
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑ –∏ –æ–ø–µ—Ä–∞—Ü–∏—é
      const order = allOrders.find(o => o.id === resultToReplan.orderId);
      const operation = order?.operations.find(op => op.id === resultToReplan.operationId);
      
      if (!order || !operation) {
        console.error(`‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–∫–∞–∑ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è ${resultToReplan.id}`);
        continue;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏)
      const currentOperationEnd = new Date(updatedResults.find(r => r.id === resultId)!.plannedEndDate);
      const orderOperations = order.operations.sort((a, b) => a.sequenceNumber - b.sequenceNumber);
      const currentOpIndex = orderOperations.findIndex(op => op.id === operation.id);
      
      let earliestStart = currentOperationEnd;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      if (currentOpIndex > 0) {
        const prevOperation = orderOperations[currentOpIndex - 1];
        const prevResult = updatedResults.find(r => r.operationId === prevOperation.id);
        if (prevResult) {
          const prevEndDate = new Date(prevResult.plannedEndDate);
          if (prevEndDate > earliestStart) {
            earliestStart = prevEndDate;
          }
        }
      }
      
      // –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å—Ç–∞–Ω–∫–µ
      const currentMachine = resultToReplan.machine;
      const machineConfig = this.machineConfigs.find(mc => mc.name === currentMachine)!;
      const estimatedDuration = (operation.estimatedTime || 0) * Number(order.quantity || 1);
      
      const availableTime = await this.findAvailableTimeSlot(
        currentMachine,
        earliestStart,
        estimatedDuration,
        machineSchedule
      );
      
      if (availableTime) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏
        const setupTime = this.determineSetupTime(operation, machineConfig);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const adjustedTime = estimatedDuration / machineConfig.efficiencyFactor;
        const bufferTime = adjustedTime * machineConfig.historicalDowntimeProbability;
        const totalTime = adjustedTime + setupTime + bufferTime;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        const endDate = await this.calculateEndDate(availableTime, totalTime);
        
        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const replanedResult: PlanningResult = {
          ...resultToReplan,
          plannedStartDate: availableTime.toISOString(),
          plannedEndDate: endDate.toISOString(),
          expectedTimeMinutes: Math.round(adjustedTime),
          setupTimeMinutes: Math.round(setupTime),
          bufferTimeMinutes: Math.round(bufferTime),
          status: 'rescheduled',
          lastRescheduledAt: new Date().toISOString(),
          rescheduledReason: machineChanged ? 
            `–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ —Å–º–µ–Ω—ã —Å—Ç–∞–Ω–∫–∞ (${oldMachine} -> ${newMachine})` :
            `–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ª–∞–¥–∫–∏ –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${currentMachine}${setupData.actualStartTime ? ' –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞' : ''}`
        };
        
        replanningResults.push(replanedResult);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        const schedule = machineSchedule.get(currentMachine) || [];
        schedule.push({
          start: availableTime,
          end: endDate,
          operationId: operation.id
        });
        schedule.sort((a, b) => a.start.getTime() - b.start.getTime());
        machineSchedule.set(affectedMachine, schedule);
        
        console.log(`‚úÖ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è ${operation.sequenceNumber} –∑–∞–∫–∞–∑–∞ ${order.drawingNumber} –Ω–∞ ${availableTime.toLocaleString()} - ${endDate.toLocaleString()}`);
      } else {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª–æ—Ç –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${resultToReplan.id}`);
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const finalResults = updatedResults.map(result => {
      const replannedResult = replanningResults.find(rr => rr.id === result.id);
      return replannedResult || result;
    });
    
    const affectedMachinesText = machineChanged ? `—Å—Ç–∞–Ω–∫–∞—Ö ${oldMachine} –∏ ${newMachine}` : `—Å—Ç–∞–Ω–∫–µ ${newMachine}`;
    console.log(`üéÜ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ ${replanningResults.length} –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ ${affectedMachinesText}`);
    
    return {
      updatedResults: finalResults,
      replanningResults,
      affectedMachine: newMachine,
      machineChanged
    };
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
  public getCompatibleMachines(operation: Operation): MachineConfiguration[] {
    return this.machineConfigs.filter(machine => {
      switch (operation.operationType) {
        case '3-axis':
          return machine.supports3Axis && machine.supportsMilling && machine.isActive;
        case '4-axis':
          return machine.supports4Axis && machine.supportsMilling && machine.isActive;
        case 'milling':
          return machine.supportsMilling && machine.isActive;
        case 'turning':
          return machine.supportsTurning && machine.isActive;
        default:
          console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operation.operationType}. –†–∞–∑—Ä–µ—à–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–Ω–∫–∞—Ö.`);
          return machine.isActive;
      }
    });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
  public createAlert(alert: Omit<Alert, 'id' | 'createdAt'>): Alert {
    return {
      ...alert,
      id: uuidv4(),
      createdAt: new Date().toISOString()
    };
  }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export class PlanningUtils {
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å—Ç–∞–Ω–æ–∫ –≤ –¥–µ–Ω—å
  static readonly MAX_OPERATIONS_PER_MACHINE_PER_DAY = 2;
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞–Ω–æ–∫ –≤ –¥–µ–Ω—å (–¥–Ω–µ–≤–Ω–∞—è + –Ω–æ—á–Ω–∞—è —Å–º–µ–Ω–∞)
  static readonly MAX_WORKING_MINUTES_PER_DAY = 960; // 16 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å—Ç–∞–Ω–∫–µ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å
  static countOperationsOnMachineForDay(planningResults: PlanningResult[], machine: Machine, date: Date): number {
    const dateString = date.toDateString();
    return planningResults.filter(result => 
      result.machine === machine && 
      new Date(result.plannedStartDate).toDateString() === dateString
    ).length;
  }
  
  // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å—Ç–∞–Ω–∫–µ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å
  static getTotalTimeForMachineOnDay(planningResults: PlanningResult[], machine: Machine, date: Date): number {
    const dateString = date.toDateString();
    return planningResults
      .filter(result => 
        result.machine === machine && 
        new Date(result.plannedStartDate).toDateString() === dateString
      )
      .reduce((total, result) => 
        total + result.expectedTimeMinutes + result.setupTimeMinutes + result.bufferTimeMinutes, 
        0
      );
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞–Ω–æ–∫ –≤ –¥–µ–Ω—å (—Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
  static canAddOperationToMachineOnDay(
    planningResults: PlanningResult[], 
    machine: Machine, 
    date: Date, 
    operationDuration?: number
  ): boolean {
    const dayResults = planningResults.filter(result => 
      result.machine === machine && 
      new Date(result.plannedStartDate).toDateString() === date.toDateString()
    );
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1: –ú–∞–∫—Å–∏–º—É–º 2 –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –¥–µ–Ω—å
    if (dayResults.length >= this.MAX_OPERATIONS_PER_MACHINE_PER_DAY) {
      return false;
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–µ–Ω—å
    if (operationDuration !== undefined) {
      const currentTotalTime = this.getTotalTimeForMachineOnDay(planningResults, machine, date);
      if (currentTotalTime + operationDuration > this.MAX_WORKING_MINUTES_PER_DAY) {
        return false;
      }
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 3: –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—è, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∞—è—Å—è –¥–æ 14:00, –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–µ –æ–ø–µ—Ä–∞—Ü–∏–π
    const hasEarlyEndingOperation = dayResults.some(result => {
      const endDate = new Date(result.plannedEndDate);
      const endHour = endDate.getHours();
      const endMinute = endDate.getMinutes();
      return endHour < 14 || (endHour === 14 && endMinute === 0);
    });
    
    if (hasEarlyEndingOperation) {
      return false;
    }
    
    return true;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–Ω–Ω–∏–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–π
  static getDaysBlockedByEarlyOperations(planningResults: PlanningResult[], machine: Machine): Date[] {
    const blockedDays: Date[] = [];
    const dayOperations = new Map<string, PlanningResult[]>();
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    planningResults
      .filter(result => result.machine === machine)
      .forEach(result => {
        const dateString = new Date(result.plannedStartDate).toDateString();
        if (!dayOperations.has(dateString)) {
          dayOperations.set(dateString, []);
        }
        dayOperations.get(dateString)!.push(result);
      });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–∞–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    dayOperations.forEach((operations, dateString) => {
      const hasEarlyEndingOperation = operations.some(result => {
        const endDate = new Date(result.plannedEndDate);
        const endHour = endDate.getHours();
        const endMinute = endDate.getMinutes();
        return endHour < 14 || (endHour === 14 && endMinute === 0);
      });
      
      if (hasEarlyEndingOperation) {
        blockedDays.push(new Date(dateString));
      }
    });
    
    return blockedDays;
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–ª—è —Å—Ç–∞–Ω–∫–∞
  static getFullyLoadedDaysForMachine(planningResults: PlanningResult[], machine: Machine): Date[] {
    const dayOperations = new Map<string, number>();
    
    planningResults
      .filter(result => result.machine === machine)
      .forEach(result => {
        const dateString = new Date(result.plannedStartDate).toDateString();
        dayOperations.set(dateString, (dayOperations.get(dateString) || 0) + 1);
      });
    
    return Array.from(dayOperations.entries())
      .filter(([, count]) => count >= this.MAX_OPERATIONS_PER_MACHINE_PER_DAY)
      .map(([dateString]) => new Date(dateString));
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–Ω–∫–æ–≤ –ø–æ –¥–Ω—è–º (—Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
  static getMachineLoadStatistics(planningResults: PlanningResult[]): Record<Machine, {
    totalDays: number;
    fullyLoadedDays: number;
    blockedByEarlyOperations: number;
    averageOperationsPerDay: number;
    loadPercentage: number;
    earlyEndingOperations: number;
  }> {
    const statistics: Record<Machine, {
      totalDays: number;
      fullyLoadedDays: number;
      blockedByEarlyOperations: number;
      averageOperationsPerDay: number;
      loadPercentage: number;
      earlyEndingOperations: number;
    }> = {} as any;
    
    for (const machine of MACHINES) {
      const machineResults = planningResults.filter(result => result.machine === machine);
      
      if (machineResults.length === 0) {
        statistics[machine] = {
          totalDays: 0,
          fullyLoadedDays: 0,
          blockedByEarlyOperations: 0,
          averageOperationsPerDay: 0,
          loadPercentage: 0,
          earlyEndingOperations: 0
        };
        continue;
      }
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
      const dayOperations = new Map<string, PlanningResult[]>();
      machineResults.forEach(result => {
        const dateString = new Date(result.plannedStartDate).toDateString();
        if (!dayOperations.has(dateString)) {
          dayOperations.set(dateString, []);
        }
        dayOperations.get(dateString)!.push(result);
      });
      
      const totalDays = dayOperations.size;
      let fullyLoadedDays = 0;
      let blockedByEarlyOperations = 0;
      let earlyEndingOperations = 0;
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
      dayOperations.forEach((operations) => {
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–Ω–∏ (2 –æ–ø–µ—Ä–∞—Ü–∏–∏)
        if (operations.length >= this.MAX_OPERATIONS_PER_MACHINE_PER_DAY) {
          fullyLoadedDays++;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–Ω–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        const hasEarlyOperation = operations.some(result => {
          const endDate = new Date(result.plannedEndDate);
          const endHour = endDate.getHours();
          const endMinute = endDate.getMinutes();
          const isEarly = endHour < 14 || (endHour === 14 && endMinute === 0);
          if (isEarly) earlyEndingOperations++;
          return isEarly;
        });
        
        if (hasEarlyOperation) {
          blockedByEarlyOperations++;
        }
      });
      
      const averageOperationsPerDay = machineResults.length / totalDays;
      const loadPercentage = (averageOperationsPerDay / this.MAX_OPERATIONS_PER_MACHINE_PER_DAY) * 100;
      
      statistics[machine] = {
        totalDays,
        fullyLoadedDays,
        blockedByEarlyOperations,
        averageOperationsPerDay: Math.round(averageOperationsPerDay * 100) / 100,
        loadPercentage: Math.round(loadPercentage * 100) / 100,
        earlyEndingOperations
      };
    }
    
    return statistics;
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è webhook
  static convertOrdersForWebhook(orders: Order[], planningResults: PlanningResult[]): any {
    return {
      timestamp: new Date().toISOString(),
      source: 'TheWho Planning System',
      data: {
        orders: orders.map(order => ({
          ...order,
          planningResults: planningResults.filter(pr => pr.orderId === order.id)
        })),
        summary: {
          totalOrders: orders.length,
          totalOperations: orders.reduce((sum, order) => sum + order.operations.length, 0),
          planningResults: planningResults.length
        }
      }
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–µ–¥–ª–∞–π–Ω–∞–º
  static checkDeadlineCompliance(orders: Order[], planningResults: PlanningResult[]): Alert[] {
    const alerts: Alert[] = [];
    
    for (const order of orders) {
      const orderResults = planningResults.filter(pr => pr.orderId === order.id);
      if (orderResults.length === 0) continue;
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–∫–∞–∑–∞
      const lastResult = orderResults.reduce((latest, current) => 
        new Date(current.plannedEndDate) > new Date(latest.plannedEndDate) ? current : latest
      );
      
      const deadline = new Date(order.deadline);
      const completionDate = new Date(lastResult.plannedEndDate);
      
      if (completionDate > deadline) {
        alerts.push({
          id: `alert-deadline-${uuidv4()}`,
          type: 'deadline_risk',
          severity: 'high',
          title: `–ó–∞–∫–∞–∑ ${order.drawingNumber} –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç –∫ –¥–µ–¥–ª–∞–π–Ω—É`,
          description: `–ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${completionDate.toLocaleDateString()}, –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleDateString()}`,
          affectedEntityType: 'order',
          affectedEntityId: order.id,
          status: 'new',
          createdAt: new Date().toISOString()
        });
      }
    }
    
    return alerts;
  }

  // –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–Ω–∫–æ–≤
  static analyzeMachineLoad(planningResults: PlanningResult[]): Record<Machine, number> {
    const machineLoad: Record<Machine, number> = {} as Record<Machine, number>;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω—É–ª–µ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
    for (const machine of MACHINES) {
      machineLoad[machine] = 0;
    }
    
    // –°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –ø–æ —Å—Ç–∞–Ω–∫–∞–º
    for (const result of planningResults) {
      const totalTime = result.expectedTimeMinutes + result.setupTimeMinutes + result.bufferTimeMinutes;
      machineLoad[result.machine] = (machineLoad[result.machine] || 0) + totalTime;
    }
    
    return machineLoad;
  }
}
