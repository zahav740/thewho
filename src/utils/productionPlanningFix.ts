// –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è TheWho
// –≠—Ç–æ —Ñ–∞–π–ª –∑–∞–º–µ–Ω–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π productionPlanningFix.ts

import { Order, Operation, Shift, Machine, MACHINES } from '../types';
import IsraeliCalendar from './israeliCalendar';
import { PlanningResult, Alert, MachineConfiguration, MACHINE_CONFIGURATIONS, ForceMajeure } from './productionPlanning';

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å —É—á–µ—Ç–æ–º –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
export class ProductionPlannerFix {
  private machineConfigs: MachineConfiguration[];
  
  constructor(machineConfigs: MachineConfiguration[] = MACHINE_CONFIGURATIONS) {
    this.machineConfigs = machineConfigs;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
  public async planOrders(orders: Order[]): Promise<PlanningResult[]> {
    console.log('\nüöÄ === –ù–ê–ß–ò–ù–ê–ï–ú –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–°–¢–í–ê (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø) ===');
    console.log('üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log(`   üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${orders.length}`);
    
    if (orders.length === 0) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!');
      return [];
    }
    
    // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–∫–∞–∑–µ
    orders.forEach((order, index) => {
      console.log(`   ${index + 1}. ${order.drawingNumber} - –¥–µ–¥–ª–∞–π–Ω: ${new Date(order.deadline).toLocaleDateString('ru-RU')}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${order.priority}`);
    });
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤
    const processedOrders = this.preprocessOrdersForPlanning(orders);
    
    console.log(`\nüìä –ü–æ—Å–ª–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processedOrders.length} –∑–∞–∫–∞–∑–æ–≤`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –¥–µ–¥–ª–∞–π–Ω—É
    const sortedOrders = this.sortOrdersByPriorityAndDeadline(processedOrders);
    const planningResults: PlanningResult[] = [];
    
    // –ö–∞—Ä—Ç–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å—Ç–∞–Ω–∫–æ–≤: machine -> [{ start, end, operationId }]
    const machineSchedule: Map<Machine, Array<{ start: Date; end: Date; operationId: string }>> = new Map();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞–Ω–∫–∞
    for (const machine of this.machineConfigs) {
      machineSchedule.set(machine.name, []);
    }
    
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Å—Ç–∞–Ω–∫–æ–≤...');
    
    for (const order of sortedOrders) {
      if (!order.operations || order.operations.length === 0) {
        continue;
      }

      // –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ–ø–µ—Ä–∞—Ü–∏–π
      const dependencyGraph = this.buildDependencyGraph(order.operations);
      
      // –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
      const sortedOperations = this.topologicalSort(order.operations, dependencyGraph);
      
      // –ö–∞—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –∏—Ö –¥–∞—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è
      const completedOperations: Map<string, Date> = new Map();
      
      for (const operation of sortedOperations) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        if (this.isOperationCompleted(operation, order)) {
          console.log(`‚è≠Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è ${operation.sequenceNumber} –∑–∞–∫–∞–∑–∞ ${order.drawingNumber} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
          const now = new Date();
          completedOperations.set(operation.id, now);
          continue;
        }
        
        console.log(`üîß –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é ${operation.sequenceNumber} (ID: ${operation.id}) –∑–∞–∫–∞–∑–∞ ${order.drawingNumber}, —Ç–∏–ø: ${operation.operationType}`);
        
        // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—á–µ–º—É –æ–ø–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–∞
        console.log(`üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.sequenceNumber}:`);
        console.log(`   - ID –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operation.id}`);
        console.log(`   - –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operation.operationType}`);
        console.log(`   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${operation.estimatedTime} –º–∏–Ω`);
        console.log(`   - –ó–∞–∫–∞–∑ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω: ${(order as any).isOverdue || false}`);
        console.log(`   - –î–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏: ${(order as any).daysOverdue || 0}`);
        console.log(`   - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–∫–∞–∑–∞: ${order.priority}`);
      
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        const earliestStartDate = this.determineEarliestStartDate(operation, completedOperations, order);
        console.log(`   - –°–∞–º–∞—è —Ä–∞–Ω–Ω—è—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${earliestStartDate.toLocaleString()}`);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        const isCriticalOrder = this.isCriticalOrder(order);
        console.log(`   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–∫–∞–∑: ${isCriticalOrder}`);
        
        // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞–Ω–æ–∫ —Å —É—á–µ—Ç–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
        console.log(`   - –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞–Ω–æ–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏...`);
        let machineSelection = await this.selectMachineWithScheduling(operation, order, earliestStartDate, machineSchedule, isCriticalOrder);
        
        if (!machineSelection) {
          console.log(`   - üî¥ –ù–ï –ù–ê–ô–î–ï–ù –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞–Ω–æ–∫ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º`);
        } else {
          console.log(`   - ‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∞–Ω–æ–∫: ${machineSelection.machine.name}`);
        }
          
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–ª–æ—Ç
          if (!machineSelection && isCriticalOrder) {
            console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–∫–∞–∑ ${order.drawingNumber}: –ø—ã—Ç–∞–µ–º—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–ª–æ—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.sequenceNumber}`);
            machineSelection = await this.findSlotForCriticalOrder(operation, order, earliestStartDate, machineSchedule, sortedOrders);
          }
          
          if (!machineSelection) {
            console.warn(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞–Ω–æ–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operation.sequenceNumber} –∑–∞–∫–∞–∑–∞ ${order.drawingNumber} (ID: ${operation.id}, —Ç–∏–ø: ${operation.operationType})`);
            continue;
          }

          const { machine: selectedMachine, availableStartTime } = machineSelection;

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏
          const setupTime = this.determineSetupTime(operation, selectedMachine);
          
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
          const baseTimeMinutes = (operation.estimatedTime || 0) * Number(order.quantity || 1);
          const adjustedTime = baseTimeMinutes / (selectedMachine.efficiencyFactor || 1);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
          const bufferTime = adjustedTime * (selectedMachine.historicalDowntimeProbability || 0.1);
          
          // –û–±—â–µ–µ –≤—Ä–µ–º—è
          const totalTime = adjustedTime + setupTime + bufferTime;
          
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
          const endDate = await this.calculateEndDate(availableStartTime, totalTime);
          
          // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          const planningResult: PlanningResult = {
            id: `plan-${order.id}-${operation.id}`,
            orderId: order.id,
            operationId: operation.id,
            machine: selectedMachine.name,
            plannedStartDate: availableStartTime.toISOString(),
            plannedEndDate: endDate.toISOString(),
            quantityAssigned: order.quantity,
            remainingQuantity: order.quantity,
            expectedTimeMinutes: Math.round(adjustedTime),
            setupTimeMinutes: Math.round(setupTime),
            bufferTimeMinutes: Math.round(bufferTime),
            status: 'planned'
          };
          
          planningResults.push(planningResult);
          
          // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–∞
          const schedule = machineSchedule.get(selectedMachine.name) || [];
          schedule.push({
            start: availableStartTime,
            end: endDate,
            operationId: operation.id
          });
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤
          schedule.sort((a, b) => a.start.getTime() - b.start.getTime());
          machineSchedule.set(selectedMachine.name, schedule);
          
          console.log(`‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è ${operation.sequenceNumber} –∑–∞–∫–∞–∑–∞ ${order.drawingNumber} –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${selectedMachine.name} —Å ${availableStartTime.toLocaleString()} –¥–æ ${endDate.toLocaleString()}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
          completedOperations.set(operation.id, endDate);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –Ω–∞–ª–∞–¥–∫–∏ —Å—Ç–∞–Ω–∫–∞
          selectedMachine.currentSetupType = this.getOperationSetupType(operation);
        }
    }
    
    console.log(`üéØ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ${planningResults.length} –æ–ø–µ—Ä–∞—Ü–∏–π.`);
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('üìä –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–æ–≤:');
    for (const [machineName, schedule] of machineSchedule) {
      if (schedule.length > 0) {
        console.log(`  ${machineName}: ${schedule.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
        schedule.forEach((slot, index) => {
          console.log(`    ${index + 1}. ${slot.start.toLocaleString()} - ${slot.end.toLocaleString()} (${slot.operationId})`);
        });
      }
    }
    
    return planningResults;
  }

  // –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ª–∞–¥–∫–∏ –∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  public async markSetupCompleted(
    resultId: string, 
    setupData: number | { actualSetupTime: number; actualStartTime?: string; newMachine?: Machine }, 
    existingResults: PlanningResult[],
    allOrders: Order[]
  ): Promise<{ 
    updatedResults: PlanningResult[]; 
    replanningResults: PlanningResult[]; 
    affectedMachine: Machine;
  }> {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ), —Ç–∞–∫ –∏ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–±—ä–µ–∫—Ç)
    const actualSetupTime = typeof setupData === 'number' ? setupData : setupData.actualSetupTime;
    const actualStartTime = typeof setupData === 'object' ? setupData.actualStartTime : undefined;
    const newMachine = typeof setupData === 'object' ? setupData.newMachine : undefined;
    
    console.log(`üîß –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ª–∞–¥–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${resultId}. –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è: ${actualSetupTime} –º–∏–Ω.`, 
      actualStartTime ? `–ù–∞—á–∞–ª–æ: ${actualStartTime}` : '',
      newMachine ? `–ù–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫: ${newMachine}` : '');
    
    // –ù–∞—Ö–æ–¥–∏–º –æ–±–Ω–æ–≤–ª—è–µ–º—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    const targetResult = existingResults.find(r => r.id === resultId);
    if (!targetResult) {
      console.error(`‚ùó –û–ø–µ—Ä–∞—Ü–∏—è ${resultId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return {
        updatedResults: existingResults,
        replanningResults: [],
        affectedMachine: "Doosan Yashana" as Machine
      };
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ–º—ã–π —Å—Ç–∞–Ω–æ–∫ (—Å—Ç–∞—Ä—ã–π –∏–ª–∏ –Ω–æ–≤—ã–π)
    const oldMachine = targetResult.machine;
    const machineToUse = newMachine || oldMachine;
    const machineChanged = oldMachine !== machineToUse;
    
    console.log(`üè† –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ª–∞–¥–∫—É –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${machineChanged ? `${oldMachine} -> ${machineToUse}` : oldMachine}`);
    
    // –®–ê–ì–ò –ê–õ–ì–û–†–ò–¢–ú–ê:
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–Ω–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫, –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏, —Å—Ç–∞—Ç—É—Å)
    // 2. –ï—Å–ª–∏ —Å—Ç–∞–Ω–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ–±–æ–∏—Ö —Å—Ç–∞–Ω–∫–∞—Ö
    // 3. –ï—Å–ª–∏ —Å—Ç–∞–Ω–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–º —Å—Ç–∞–Ω–∫–µ
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    let updatedResults = [...existingResults]; // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º—É—Ç–∞—Ü–∏–∏
    const resultIndex = updatedResults.findIndex(r => r.id === resultId);
    
    if (resultIndex >= 0) {
      const result = updatedResults[resultIndex];
      const updated = { ...result };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∞–¥–∫–µ
      const timeDifference = actualSetupTime - updated.setupTimeMinutes;
      updated.setupTimeMinutes = actualSetupTime;
      updated.status = 'in-progress';
      
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
      if (machineChanged) {
        console.log(`üîÑ –°–ú–ï–ù–ê –°–¢–ê–ù–ö–ê: —Å ${updated.machine} –Ω–∞ ${machineToUse}`);
        updated.machine = machineToUse;
        updated.rescheduledReason = `–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ç–∞–Ω–æ–∫ (—Å ${oldMachine} –Ω–∞ ${machineToUse})`;
        updated.lastRescheduledAt = new Date().toISOString();
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      if (actualStartTime) {
        const plannedDate = new Date(updated.plannedStartDate);
        const [hours, minutes] = actualStartTime.split(':').map(Number);
        
        const actualStartDate = new Date(plannedDate);
        actualStartDate.setHours(hours, minutes, 0, 0);
        
        updated.plannedStartDate = actualStartDate.toISOString();
        console.log(`üï∞Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${actualStartDate.toLocaleString()}`);
      }
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ª–∞–¥–∫–∏
      const totalMinutes = updated.expectedTimeMinutes + actualSetupTime + updated.bufferTimeMinutes;
      const startDate = new Date(updated.plannedStartDate);
      updated.plannedEndDate = (await this.calculateEndDate(startDate, totalMinutes)).toISOString();
      
      console.log(`‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è ${resultId}: —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ª–∞–¥–∫–∏: ${timeDifference} –º–∏–Ω.`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–∞—Å—Å–∏–≤–µ
      updatedResults[resultIndex] = updated;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞–Ω–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const machineSchedule: Map<Machine, Array<{ start: Date; end: Date; operationId: string }>> = new Map();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç–∞–Ω–∫–∏ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã (—Å—Ç–∞—Ä—ã–π, –Ω–æ–≤—ã–π –∏–ª–∏ –æ–±–∞)
    const affectedMachines: Machine[] = machineChanged ? [oldMachine, machineToUse] : [oldMachine];
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ–≥–æ —Å—Ç–∞–Ω–∫–∞
    for (const machine of affectedMachines) {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ/–≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —ç—Ç–æ–º —Å—Ç–∞–Ω–∫–µ
      const completedOperations = updatedResults
        .filter(r => r.machine === machine && ['completed', 'in-progress'].includes(r.status))
        .map(r => ({
          start: new Date(r.plannedStartDate),
          end: new Date(r.plannedEndDate),
          operationId: r.operationId
        }));
      
      machineSchedule.set(machine, completedOperations);
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å (—Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'planned')
    const operationsToReplan = updatedResults
      .filter(r => 
        affectedMachines.includes(r.machine) && // –ù–∞ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç–∞–Ω–∫–∞—Ö
        r.status === 'planned' && // –¢–æ–ª—å–∫–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        r.id !== resultId // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
      )
      .sort((a, b) => new Date(a.plannedStartDate).getTime() - new Date(b.plannedStartDate).getTime());
    
    console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ ${operationsToReplan.length} –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å—Ç–∞–Ω–∫–∞—Ö: ${affectedMachines.join(', ')}`);
    
    // –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    const replanningResults: PlanningResult[] = [];
    
    for (const resultToReplan of operationsToReplan) {
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ –∏ –æ–ø–µ—Ä–∞—Ü–∏—é
      const order = allOrders.find(o => o.id === resultToReplan.orderId);
      const operation = order?.operations.find(op => op.id === resultToReplan.operationId);
      
      if (!order || !operation) {
        console.error(`‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è ${resultToReplan.id}`);
        continue;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      // 1. –ï—Å–ª–∏ —ç—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è —Ç–æ–≥–æ –∂–µ –∑–∞–∫–∞–∑–∞, —á—Ç–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º–∞—è, —É—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      // 2. –ï—Å–ª–∏ —ç—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –¥—Ä—É–≥–æ–≥–æ –∑–∞–∫–∞–∑–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      
      let earliestStart: Date;
      
      if (resultToReplan.orderId === targetResult.orderId) {
        // –û–ø–µ—Ä–∞—Ü–∏—è –∏–∑ —Ç–æ–≥–æ –∂–µ –∑–∞–∫–∞–∑–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        const orderOperations = order.operations.sort((a, b) => a.sequenceNumber - b.sequenceNumber);
        const currentOpIndex = orderOperations.findIndex(op => op.id === operation.id);
        const updatedResultIndex = resultIndex >= 0 ? resultIndex : -1;
        
        if (currentOpIndex > 0) {
          // –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
          const prevOperation = orderOperations[currentOpIndex - 1];
          const prevResult = updatedResults.find(r => r.operationId === prevOperation.id);
          
          if (prevResult) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            earliestStart = new Date(prevResult.plannedEndDate);
          } else {
            // –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            earliestStart = new Date();
          }
        } else {
          // –≠—Ç–æ –ø–µ—Ä–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ - –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
          earliestStart = new Date();
        }
      } else {
        // –û–ø–µ—Ä–∞—Ü–∏—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∑–∞–∫–∞–∑–∞ - –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        earliestStart = new Date();
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–∞–Ω–∫–∞
      const machineConfig = this.machineConfigs.find(mc => mc.name === resultToReplan.machine)!;
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
      const estimatedDuration = (operation.estimatedTime || 0) * Number(order.quantity || 1);
      
      // –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
      const availableTime = await this.findAvailableTimeSlot(
        resultToReplan.machine,
        earliestStart,
        estimatedDuration,
        machineSchedule
      );
      
      if (availableTime) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏
        const setupTime = this.determineSetupTime(operation, machineConfig);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const adjustedTime = estimatedDuration / machineConfig.efficiencyFactor;
        const bufferTime = adjustedTime * machineConfig.historicalDowntimeProbability;
        const totalTime = adjustedTime + setupTime + bufferTime;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        const endDate = await this.calculateEndDate(availableTime, totalTime);
        
        // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const replanedResult: PlanningResult = {
          ...resultToReplan,
          plannedStartDate: availableTime.toISOString(),
          plannedEndDate: endDate.toISOString(),
          expectedTimeMinutes: Math.round(adjustedTime),
          setupTimeMinutes: Math.round(setupTime),
          bufferTimeMinutes: Math.round(bufferTime),
          status: 'rescheduled',
          lastRescheduledAt: new Date().toISOString(),
          rescheduledReason: machineChanged ? 
            `–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ —Å–º–µ–Ω—ã —Å—Ç–∞–Ω–∫–∞ (${oldMachine} -> ${machineToUse})` :
            `–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ª–∞–¥–∫–∏ –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${oldMachine}${actualStartTime ? ' –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞' : ''}`
        };
        
        replanningResults.push(replanedResult);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        const schedule = machineSchedule.get(resultToReplan.machine) || [];
        schedule.push({
          start: availableTime,
          end: endDate,
          operationId: operation.id
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤
        schedule.sort((a, b) => a.start.getTime() - b.start.getTime());
        machineSchedule.set(resultToReplan.machine, schedule);
        
        console.log(`‚úÖ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è ${operation.sequenceNumber} –∑–∞–∫–∞–∑–∞ ${order.drawingNumber} –Ω–∞ ${availableTime.toLocaleString()} - ${endDate.toLocaleString()}`);
      } else {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª–æ—Ç –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${resultToReplan.id}`);
      }
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫ –æ–±—â–µ–º—É –º–∞—Å—Å–∏–≤—É
    const finalResults = updatedResults.map(result => {
      const replannedResult = replanningResults.find(rr => rr.id === result.id);
      return replannedResult || result;
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const machinesInfo = machineChanged ? `${oldMachine} –∏ ${machineToUse}` : oldMachine;
    console.log(`üéÜ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ ${replanningResults.length} –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å—Ç–∞–Ω–∫–∞—Ö: ${machinesInfo}`);
    
    return {
      updatedResults: finalResults,
      replanningResults,
      affectedMachine: machineToUse // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫ –∫–∞–∫ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–π
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
  
  private sortedOrders: Order[] = [];
  
  private isOperationCompleted(operation: Operation, order: Order): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    const extendedOperation = operation as Operation & {
      completionStatus?: string;
      completedUnits?: number;
    };
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (extendedOperation.completionStatus === 'completed') {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
    if (typeof extendedOperation.completedUnits === 'number' && extendedOperation.completedUnits >= order.quantity) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    if (operation.actualTime && operation.estimatedTime && operation.actualTime >= operation.estimatedTime) {
      return true;
    }
    
    return false;
  }
  
  private buildDependencyGraph(operations: Operation[]): Map<string, string[]> {
    const graph = new Map<string, string[]>();
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ sequenceNumber
    const sortedOps = operations.sort((a, b) => a.sequenceNumber - b.sequenceNumber);
    
    for (let i = 0; i < sortedOps.length; i++) {
      const operation = sortedOps[i];
      graph.set(operation.id, []);
      
      // –ö–∞–∂–¥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π)
      if (i > 0) {
        const dependencies = graph.get(operation.id) || [];
        dependencies.push(sortedOps[i - 1].id);
        graph.set(operation.id, dependencies);
      }
    }
    
    return graph;
  }

  private topologicalSort(operations: Operation[], dependencyGraph: Map<string, string[]>): Operation[] {
    const visited = new Set<string>();
    const result: Operation[] = [];
    const operationMap = new Map(operations.map(op => [op.id, op]));
    
    const visit = (operationId: string) => {
      if (visited.has(operationId)) return;
      visited.add(operationId);
      
      const dependencies = dependencyGraph.get(operationId) || [];
      for (const depId of dependencies) {
        visit(depId);
      }
      
      const operation = operationMap.get(operationId);
      if (operation) {
        result.push(operation);
      }
    };
    
    for (const operation of operations) {
      visit(operation.id);
    }
    
    return result;
  }

  private determineEarliestStartDate(operation: Operation, completedOperations: Map<string, Date>, order: Order): Date {
    const now = new Date();
    let earliestDate = now;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ç–æ–º –∂–µ –∑–∞–∫–∞–∑–µ
    const orderOperations = order.operations.sort((a, b) => a.sequenceNumber - b.sequenceNumber);
    const currentIndex = orderOperations.findIndex(op => op.id === operation.id);
    
    if (currentIndex > 0) {
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π
      const previousOperation = orderOperations[currentIndex - 1];
      const previousEndDate = completedOperations.get(previousOperation.id);
      
      if (previousEndDate && previousEndDate > earliestDate) {
        earliestDate = previousEndDate;
      }
    }
    
    return earliestDate;
  }

  private async selectMachineWithScheduling(
    operation: Operation, 
    order: Order, 
    earliestStartDate: Date,
    machineSchedule: Map<Machine, Array<{ start: Date; end: Date; operationId: string }>>,
    emergencyMode: boolean = false
  ): Promise<{ machine: MachineConfiguration; availableStartTime: Date } | null> {
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞–Ω–∫–∏ –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
    const compatibleMachines = this.machineConfigs.filter(machine => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
      switch (operation.operationType) {
        case '3-axis':
          return machine.supports3Axis && machine.supportsMilling && machine.isActive;
        case '4-axis':
          return machine.supports4Axis && machine.supportsMilling && machine.isActive;
        case 'milling':
          return machine.supportsMilling && machine.isActive;
        case 'turning':
          return machine.supportsTurning && machine.isActive;
        default:
          return machine.isActive;
      }
    });
    
    if (compatibleMachines.length === 0) {
      return null;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const setupTime = this.determineSetupTime(operation, compatibleMachines[0]); // –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏
    const baseTimeMinutes = (operation.estimatedTime || 0) * Number(order.quantity || 1);
    const estimatedDuration = baseTimeMinutes + setupTime;
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –ø–µ—Ä–≤—ã–º
    if (operation.machine) {
      const preferredMachine = compatibleMachines.find(m => m.name === operation.machine);
      if (preferredMachine) {
        const availableTime = await this.findAvailableTimeSlot(
          preferredMachine.name,
          earliestStartDate,
          estimatedDuration,
          machineSchedule
        );
        if (availableTime) {
          return { machine: preferredMachine, availableStartTime: availableTime };
        }
      }
    }
    
    // –ò—â–µ–º —Å—Ç–∞–Ω–æ–∫ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–∂–∏–¥–∞–Ω–∏—è
    let bestOption: { machine: MachineConfiguration; availableStartTime: Date } | null = null;
    let shortestWait = Infinity;

    for (const machine of compatibleMachines) {
      const availableTime = await this.findAvailableTimeSlot(
        machine.name,
        earliestStartDate,
        estimatedDuration,
        machineSchedule
      );
      
      if (availableTime) {
        const waitTime = availableTime.getTime() - earliestStartDate.getTime();
        
        if (waitTime < shortestWait) {
          shortestWait = waitTime;
          bestOption = { machine, availableStartTime: availableTime };
        }
      }
    }

    return bestOption;
  }

  private async findAvailableTimeSlot(
    machineName: Machine,
    earliestStart: Date,
    estimatedDuration: number,
    machineSchedule: Map<Machine, Array<{ start: Date; end: Date; operationId: string }>>
  ): Promise<Date | null> {
    const schedule = machineSchedule.get(machineName) || [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞—Ç—å—Å—è –≤ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    let candidateStart = new Date(earliestStart);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    candidateStart = await this.adjustToWorkingTime(candidateStart);
    
    let iterations = 0;
    const maxIterations = 100; // –∑–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    
    while (iterations < maxIterations) {
      const candidateEnd = await this.calculateEndDate(candidateStart, estimatedDuration);
      const candidateDate = candidateStart.toDateString();
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞–Ω–∫–µ –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–Ω—ã–π –¥–µ–Ω—å
      const operationsInDay = schedule.filter(slot => {
        return slot.start.toDateString() === candidateDate;
      });
      
      // –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï 1: –ú–∞–∫—Å–∏–º—É–º 2 –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞–Ω–æ–∫ –≤ –¥–µ–Ω—å
      if (operationsInDay.length >= 2) {
        candidateStart = await this.getNextWorkingDayStart(candidateStart);
        iterations++;
        continue;
      }
      
      // –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–µ–Ω—å
      const maxWorkingMinutesPerDay = 960; // 16 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
      const setupTime = this.determineSetupTime({ operationType: 'milling' } as Operation, this.machineConfigs[0]);
      const bufferTime = estimatedDuration * 0.1; // –ü—Ä–∏–º–µ—Ä–Ω–æ 10% –±—É—Ñ–µ—Ä
      const totalOperationTime = estimatedDuration + setupTime + bufferTime;
      
      const existingTotalTime = this.getTotalTimeForDay(machineName, candidateDate, machineSchedule);
      const existingTimeNum = typeof existingTotalTime === 'number' ? existingTotalTime : Number(existingTotalTime);
      const operationTimeNum = typeof totalOperationTime === 'number' ? totalOperationTime : Number(totalOperationTime);
      
      if (existingTimeNum + operationTimeNum > maxWorkingMinutesPerDay) {
        candidateStart = await this.getNextWorkingDayStart(candidateStart);
        iterations++;
        continue;
      }
      
      // –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï 3: –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—è, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∞—è—Å—è –¥–æ 14:00, –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–∞–µ–º
      const hasEarlyEndingOperation = operationsInDay.some(slot => {
        const endHour = slot.end.getHours();
        const endMinute = slot.end.getMinutes();
        return endHour < 14 || (endHour === 14 && endMinute === 0);
      });
      
      if (hasEarlyEndingOperation) {
        candidateStart = await this.getNextWorkingDayStart(candidateStart);
        iterations++;
        continue;
      }
      
      // –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –ª–∏ –Ω–∞—à–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ 14:00
      const ourEndHour = candidateEnd.getHours();
      const ourEndMinute = candidateEnd.getMinutes();
      const ourEndsEarly = ourEndHour < 14 || (ourEndHour === 14 && ourEndMinute === 0);
      
      // –ï—Å–ª–∏ –Ω–∞—à–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–æ 14:00 –∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏, –∏—â–µ–º –¥—Ä—É–≥–æ–π –¥–µ–Ω—å
      if (ourEndsEarly && operationsInDay.length > 0) {
        candidateStart = await this.getNextWorkingDayStart(candidateStart);
        iterations++;
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      const hasConflict = schedule.some(slot => {
        return (
          (candidateStart >= slot.start && candidateStart < slot.end) ||
          (candidateEnd > slot.start && candidateEnd <= slot.end) ||
          (candidateStart <= slot.start && candidateEnd >= slot.end)
        );
      });
      
      if (!hasConflict) {
        return candidateStart;
      }
      
      // –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
      const conflictingSlots = schedule.filter(slot => 
        (candidateStart >= slot.start && candidateStart < slot.end) ||
        (candidateEnd > slot.start && candidateEnd <= slot.end) ||
        (candidateStart <= slot.start && candidateEnd >= slot.end)
      );
      
      if (conflictingSlots.length > 0) {
        // –ë–µ—Ä–µ–º –∫–æ–Ω–µ—Ü —Å–∞–º–æ–≥–æ –ø–æ–∑–¥–Ω–µ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–µ–≥–æ —Å–ª–æ—Ç–∞
        const latestEnd = conflictingSlots.reduce((latest, slot) => 
          slot.end > latest ? slot.end : latest, conflictingSlots[0].end);
        candidateStart = new Date(latestEnd);
        candidateStart = await this.adjustToWorkingTime(candidateStart);
      } else {
        break;
      }
      
      iterations++;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
    const maxWaitDays = 60; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç –æ–∂–∏–¥–∞–Ω–∏—è
    if (candidateStart.getTime() - earliestStart.getTime() > maxWaitDays * 24 * 60 * 60 * 1000) {
      return null;
    }
    
    return candidateStart;
  }
  
  private async getNextWorkingDayStart(currentDate: Date): Promise<Date> {
    const nextDay = new Date(currentDate);
    nextDay.setDate(nextDay.getDate() + 1);
    nextDay.setHours(8, 0, 0, 0);
    
    const nextWorkingDay = await IsraeliCalendar.getNextWorkingDay(nextDay);
    nextWorkingDay.setHours(8, 0, 0, 0);
    
    return nextWorkingDay;
  }
  
  private getTotalTimeForDay(
    machineName: Machine,
    date: Date | string,
    machineSchedule: Map<Machine, Array<{ start: Date; end: Date; operationId: string }>>
  ): number {
    const targetDate = typeof date === 'string' ? date : date.toDateString();
    const schedule = machineSchedule.get(machineName) || [];
    
    return schedule
      .filter(slot => slot.start.toDateString() === targetDate)
      .reduce((total, slot) => {
        const duration = slot.end.getTime() - slot.start.getTime();
        return total + Math.round(duration / (1000 * 60)); // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
      }, 0);
  }
  
  private async adjustToWorkingTime(date: Date): Promise<Date> {
    const isWorking = await IsraeliCalendar.isWorkingDay(date);
    
    if (!isWorking) {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞–±–æ—á–µ–º—É –¥–Ω—é
      const nextWorkingDay = await IsraeliCalendar.getNextWorkingDay(date);
      nextWorkingDay.setHours(8, 0, 0, 0);
      return nextWorkingDay;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
    const dayOfWeek = date.getDay();
    const hour = date.getHours();
    
    if (hour < 8) {
      // –î–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
      date.setHours(8, 0, 0, 0);
    } else if ((dayOfWeek >= 0 && dayOfWeek <= 4 && hour >= 16) || (dayOfWeek === 5 && hour >= 14)) {
      // –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
      const nextWorkingDay = await IsraeliCalendar.getNextWorkingDay(date);
      nextWorkingDay.setHours(8, 0, 0, 0);
      return nextWorkingDay;
    }
    
    return date;
  }

  private determineSetupTime(operation: Operation, machine: MachineConfiguration): number {
    // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    let baseSetupTime: number;
    
    switch (operation.operationType) {
      case '4-axis':
        baseSetupTime = 90; // 4-–∫–æ–æ—Ä–¥ —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–∏–µ - —Å–ª–æ–∂–Ω–∞—è –Ω–∞–ª–∞–¥–∫–∞
        break;
      case '3-axis':
        baseSetupTime = 60; // 3-–∫–æ–æ—Ä–¥ —Ñ—Ä–µ–∑–µ—Ä–æ–≤–∞–Ω–∏–µ
        break;
      case 'milling':
        baseSetupTime = 45; // –û–±—ã—á–Ω–æ–µ —Ñ—Ä–µ–∑–µ—Ä–Ω–æ–µ
        break;
      case 'turning':
        baseSetupTime = 30; // –¢–æ–∫–∞—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        break;
      default:
        baseSetupTime = 60;
    }
    
    // –ï—Å–ª–∏ —Å—Ç–∞–Ω–æ–∫ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Ç–æ—Ç –∂–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏, –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏ –º–µ–Ω—å—à–µ
    const currentSetupType = this.getOperationSetupType(operation);
    if (machine.currentSetupType === currentSetupType) {
      return baseSetupTime * 0.3; // 30% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    }
    
    return baseSetupTime;
  }

  private getOperationSetupType(operation: Operation): string {
    return `${operation.operationType}-setup`;
  }

  private async calculateEndDate(startDate: Date, totalMinutes: number): Promise<Date> {
    let currentDate = new Date(startDate);
    let remainingMinutes = totalMinutes;
    
    while (remainingMinutes > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Ä–∞–±–æ—á–∏–º (—É—á–∏—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ò–∑—Ä–∞–∏–ª—è)
      const isWorking = await IsraeliCalendar.isWorkingDay(currentDate);
      
      if (!isWorking) {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
        currentDate = await IsraeliCalendar.getNextWorkingDay(currentDate);
        currentDate.setHours(8, 0, 0, 0); // –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        continue;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
      const dayOfWeek = currentDate.getDay();
      let dayMinutes: number;
      
      if (dayOfWeek >= 0 && dayOfWeek <= 4) {
        // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ-—á–µ—Ç–≤–µ—Ä–≥: 8:00-16:00 (480 –º–∏–Ω—É—Ç)
        dayMinutes = 480;
      } else if (dayOfWeek === 5) {
        // –ü—è—Ç–Ω–∏—Ü–∞: 8:00-14:00 (360 –º–∏–Ω—É—Ç)
        dayMinutes = 360;
      } else {
        // –°—É–±–±–æ—Ç–∞ - –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–±–æ—á–∏–º –¥–Ω–µ–º, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        dayMinutes = 0;
      }
      
      // –°—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–Ω—É—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ
      let availableMinutes = dayMinutes;
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å, —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
      if (currentDate.getTime() === startDate.getTime()) {
        const currentHour = currentDate.getHours();
        const currentMinute = currentDate.getMinutes();
        
        if (currentHour < 8) {
          // –î–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
          currentDate.setHours(8, 0, 0, 0);
          availableMinutes = dayMinutes;
        } else {
          // –í —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
          const endHour = dayOfWeek === 5 ? 14 : 16; // –ü—è—Ç–Ω–∏—Ü–∞ –¥–æ 14:00, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ 16:00
          
          if (currentHour >= endHour) {
            // –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
            currentDate = await IsraeliCalendar.getNextWorkingDay(currentDate);
            currentDate.setHours(8, 0, 0, 0);
            continue;
          } else {
            // –í —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
            const usedMinutes = (currentHour - 8) * 60 + currentMinute;
            availableMinutes = dayMinutes - usedMinutes;
          }
        }
      }
      
      if (remainingMinutes <= availableMinutes) {
        // –í—Å–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        currentDate.setMinutes(currentDate.getMinutes() + remainingMinutes);
        remainingMinutes = 0;
      } else {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞–±–æ—á–µ–º—É –¥–Ω—é
        remainingMinutes -= availableMinutes;
        currentDate = await IsraeliCalendar.getNextWorkingDay(currentDate);
        currentDate.setHours(8, 0, 0, 0);
      }
    }
    
    return currentDate;
  }

  private async findSlotForCriticalOrder(
    operation: Operation,
    order: Order,
    earliestStartDate: Date,
    machineSchedule: Map<Machine, Array<{ start: Date; end: Date; operationId: string }>>,
    allOrders: Order[]
  ): Promise<{ machine: MachineConfiguration; availableStartTime: Date } | null> {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å—Ç–∞–Ω–∫–∏
    const compatibleMachines = this.machineConfigs.filter(machine => {
      switch (operation.operationType) {
        case '3-axis':
          return machine.supports3Axis && machine.supportsMilling && machine.isActive;
        case '4-axis':
          return machine.supports4Axis && machine.supportsMilling && machine.isActive;
        case 'milling':
          return machine.supportsMilling && machine.isActive;
        case 'turning':
          return machine.supportsTurning && machine.isActive;
        default:
          return machine.isActive;
      }
    });
    
    if (compatibleMachines.length === 0) {
      return null;
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    const setupTime = this.determineSetupTime(operation, compatibleMachines[0]);
    const baseTimeMinutes = (operation.estimatedTime || 0) * Number(order.quantity || 1);
    const estimatedDuration = baseTimeMinutes + setupTime;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –Ω–∞ –∫–∞–∂–¥–æ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å—Ç–∞–Ω–∫–µ
    for (const machine of compatibleMachines) {
      const schedule = machineSchedule.get(machine.name) || [];
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–≤–∏–Ω—É—Ç—å –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      const availableTime = await this.findAvailableTimeSlot(
        machine.name,
        earliestStartDate,
        estimatedDuration,
        machineSchedule
      );
      
      if (availableTime) {
        return {
          machine,
          availableStartTime: availableTime
        };
      }
    }
    
    return null;
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  private preprocessOrdersForPlanning(orders: Order[]): Order[] {
    const currentDate = new Date();
    const processedOrders: Order[] = [];
    
    for (const order of orders) {
      let processedOrder = { ...order };
      const deadline = new Date(order.deadline);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –ª–∏ –¥–µ–¥–ª–∞–π–Ω
      if (deadline < currentDate) {
        const daysOverdue = Math.ceil((currentDate.getTime() - deadline.getTime()) / (1000 * 60 * 60 * 24));
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–ø–µ–Ω—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        (processedOrder as any).daysOverdue = daysOverdue;
        (processedOrder as any).isOverdue = true;
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω
        const newDeadline = this.calculateRealisticDeadline(processedOrder, currentDate);
        processedOrder.deadline = newDeadline.toISOString();
      } else {
        // –î–ª—è –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        (processedOrder as any).daysOverdue = 0;
        (processedOrder as any).isOverdue = false;
      }
      
      processedOrders.push(processedOrder);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    this.sortedOrders = processedOrders;
    
    return processedOrders;
  }
  
  private calculateRealisticDeadline(order: Order, fromDate: Date): Date {
    // –°—É–º–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    const totalTimeMinutes = order.operations.reduce((total, op) => {
      return total + (op.estimatedTime || 0) * order.quantity;
    }, 0);
    
    // –î–æ–±–∞–≤–ª—è–µ–º 30% –±—É—Ñ–µ—Ä –∏ –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 60 –º–∏–Ω –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é)
    const bufferedTimeMinutes = totalTimeMinutes * 1.3 + (order.operations.length * 60);
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 8 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å)
    const workingDaysNeeded = Math.ceil(bufferedTimeMinutes / 480); // 480 –º–∏–Ω = 8 —á–∞—Å–æ–≤
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É, –¥–æ–±–∞–≤–ª—è—è —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ + –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
    const calculatedDeadline = new Date(fromDate);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö (–º–Ω–æ–∂–∏–º –Ω–∞ 1.4 –¥–ª—è —É—á–µ—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö)
    const calendarDaysToAdd = Math.ceil(workingDaysNeeded * 1.4) + 2; // +2 –¥–Ω—è –∑–∞–ø–∞—Å
    calculatedDeadline.setDate(calculatedDeadline.getDate() + calendarDaysToAdd);
    
    return calculatedDeadline;
  }
  
  private sortOrdersByPriorityAndDeadline(orders: Order[]): Order[] {
    const sorted = orders.sort((a, b) => {
      // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–ú–ï–ù–¨–®–ò–ô –Ω–æ–º–µ—Ä = –í–´–®–ï –≤–∞–∂–Ω–æ—Å—Ç—å: 1 > 2 > 3)
      if (a.priority !== b.priority) {
        return a.priority - b.priority; // –ú–µ–Ω—å—à–∏–π –Ω–æ–º–µ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º
      }
      
      // 2. –í–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞
      const aOverdue = (a as any).isOverdue || false;
      const bOverdue = (b as any).isOverdue || false;
      const aDaysOverdue = (a as any).daysOverdue || 0;
      const bDaysOverdue = (b as any).daysOverdue || 0;
      
      // –ï—Å–ª–∏ –æ–¥–∏–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, –∞ –¥—Ä—É–≥–æ–π –Ω–µ—Ç - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º
      if (aOverdue && !bOverdue) return -1;
      if (!aOverdue && bOverdue) return 1;
      
      // –ï—Å–ª–∏ –æ–±–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ (–±–æ–ª—å—à–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∞ = –≤—ã—à–µ)
      if (aOverdue && bOverdue) {
        return bDaysOverdue - aDaysOverdue; // –û—Ç –±–æ–ª—å—à–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –∫ –º–µ–Ω—å—à–µ–π
      }
      
      // 3. –ï—Å–ª–∏ –æ–±–∞ –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–µ–¥–ª–∞–π–Ω—É (—Ä–∞–Ω—å—à–µ = –≤—ã—à–µ –≤–∞–∂–Ω–æ—Å—Ç—å)
      return new Date(a.deadline).getTime() - new Date(b.deadline).getTime();
    });
    
    return sorted;
  }

  private isCriticalOrder(order: Order): boolean {
    const deadline = new Date(order.deadline);
    const now = new Date();
    const isOverdue = (order as any).isOverdue || false;
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è:
    // 1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)
    // 2. –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
    // 3. –î–µ–¥–ª–∞–π–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 3 –¥–Ω–µ–π
    const isCritical = order.priority === 1 || 
                      isOverdue || 
                      (deadline.getTime() - now.getTime()) <= (3 * 24 * 60 * 60 * 1000);
    
    return isCritical;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω–∫–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
  public getCompatibleMachines(operation: Operation): MachineConfiguration[] {
    return this.machineConfigs.filter(machine => {
      switch (operation.operationType) {
        case '3-axis':
          return machine.supports3Axis && machine.supportsMilling && machine.isActive;
        case '4-axis':
          return machine.supports4Axis && machine.supportsMilling && machine.isActive;
        case 'milling':
          return machine.supportsMilling && machine.isActive;
        case 'turning':
          return machine.supportsTurning && machine.isActive;
        default:
          return machine.isActive;
      }
    });
  }
}
