// –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–µ—Ç–æ–¥–∞ markSetupCompleted,
// –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–º–µ–Ω—É —Å—Ç–∞–Ω–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞–¥–∫–µ

import { ProductionPlanner, PlanningResult } from './productionPlanning';
import { Order, Machine } from '../types';

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–∞–ª–∞–¥–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–º–µ–Ω—ã —Å—Ç–∞–Ω–∫–∞
 */
export async function markSetupCompleted(
  planner: ProductionPlanner,
  resultId: string,
  setupData: number | { actualSetupTime: number; actualStartTime?: string; newMachine?: Machine },
  existingResults: PlanningResult[],
  allOrders: Order[]
): Promise<{
  updatedResults: PlanningResult[];
  replanningResults: PlanningResult[];
  affectedMachine: Machine;
}> {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ), —Ç–∞–∫ –∏ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–±—ä–µ–∫—Ç)
  const actualSetupTime = typeof setupData === 'number' ? setupData : setupData.actualSetupTime;
  const actualStartTime = typeof setupData === 'object' ? setupData.actualStartTime : undefined;
  const newMachine = typeof setupData === 'object' ? setupData.newMachine : undefined;
  
  console.log(`üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ª–∞–¥–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${resultId}. –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è: ${actualSetupTime} –º–∏–Ω.`, 
    actualStartTime ? `–ù–∞—á–∞–ª–æ: ${actualStartTime}` : '',
    newMachine ? `–ù–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫: ${newMachine}` : '');
  
  // –ù–∞—Ö–æ–¥–∏–º –æ–±–Ω–æ–≤–ª—è–µ–º—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
  const targetResult = existingResults.find(r => r.id === resultId);
  if (!targetResult) {
    console.error(`‚ùó –û–ø–µ—Ä–∞—Ü–∏—è ${resultId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return {
      updatedResults: existingResults,
      replanningResults: [],
      affectedMachine: "Doosan Yashana" as Machine
    };
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ–º—ã–π —Å—Ç–∞–Ω–æ–∫ (—Å—Ç–∞—Ä—ã–π –∏–ª–∏ –Ω–æ–≤—ã–π)
  const oldMachine = targetResult.machine;
  const machineToUse = newMachine || oldMachine;
  const machineChanged = oldMachine !== machineToUse;
  
  console.log(`üè† –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ª–∞–¥–∫—É –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${machineChanged ? `${oldMachine} -> ${machineToUse}` : oldMachine}`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
  const updatedResults = await Promise.all(existingResults.map(async (result) => {
    if (result.id === resultId) {
      const updated = { ...result };
      const _timeDifference = actualSetupTime - updated.setupTimeMinutes;
      updated.setupTimeMinutes = actualSetupTime;
      updated.status = 'in-progress';
      
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
      if (machineChanged) {
        console.log(`üîÑ –ú–µ–Ω—è–µ–º —Å—Ç–∞–Ω–æ–∫ —Å ${updated.machine} –Ω–∞ ${machineToUse}`);
        updated.machine = machineToUse;
        updated.rescheduledReason = `–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ç–∞–Ω–æ–∫ (—Å ${oldMachine} –Ω–∞ ${machineToUse})`;
        updated.lastRescheduledAt = new Date().toISOString();
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
      if (actualStartTime) {
        const plannedDate = new Date(updated.plannedStartDate);
        const timeStr = actualStartTime;
        const [hours, minutes] = timeStr.split(':').map(Number);
        
        const actualStartDate = new Date(plannedDate);
        actualStartDate.setHours(hours, minutes, 0, 0);
        
        updated.plannedStartDate = actualStartDate.toISOString();
        console.log(`üï∞Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${actualStartDate.toLocaleString()}`);
      }
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ª–∞–¥–∫–∏
      const totalMinutes = updated.expectedTimeMinutes + actualSetupTime + updated.bufferTimeMinutes;
      const startDate = new Date(updated.plannedStartDate);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ calculateEndDate –∏–∑ planner (–±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∏ –≤—ã–∑–æ–≤–µ)
      // @ts-ignore - –æ–±—Ö–æ–¥–∏–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
      updated.plannedEndDate = (await planner.calculateEndDate(startDate, totalMinutes)).toISOString();
      
      console.log(`‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è ${resultId}: —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ª–∞–¥–∫–∏: ${_timeDifference} –º–∏–Ω.`);
      
      return updated;
    }
    return result;
  }));
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
  // –ï—Å–ª–∏ —Å—Ç–∞–Ω–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –æ–±–æ–∏—Ö —Å—Ç–∞–Ω–∫–∞—Ö
  const machineResults = updatedResults
    .filter(r => (r.machine === oldMachine || r.machine === machineToUse) && r.status === 'planned')
    .sort((a, b) => new Date(a.plannedStartDate).getTime() - new Date(b.plannedStartDate).getTime());
  
  console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ ${machineResults.length} –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${machineChanged ? `${oldMachine} –∏ ${machineToUse}` : oldMachine}`);
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–Ω–∫–æ–≤
  const machineSchedule: Map<Machine, Array<{ start: Date; end: Date; operationId: string }>> = new Map();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏/–≤—ã–ø–æ–ª–Ω—è—é—â–∏–º–∏—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è –æ–±–æ–∏—Ö —Å—Ç–∞–Ω–∫–æ–≤
  const existingSlots = updatedResults
    .filter(r => (r.machine === oldMachine || r.machine === machineToUse) && ['completed', 'in-progress'].includes(r.status))
    .map(r => ({
      start: new Date(r.plannedStartDate),
      end: new Date(r.plannedEndDate),
      operationId: r.operationId,
      machine: r.machine
    }));
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞–Ω–∫–∞–º
  for (const slot of existingSlots) {
    if (!machineSchedule.has(slot.machine)) {
      machineSchedule.set(slot.machine, []);
    }
    
    machineSchedule.get(slot.machine)!.push({
      start: slot.start,
      end: slot.end,
      operationId: slot.operationId
    });
  }
  
  // –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–ø–µ—Ä–∞—Ü–∏–∏
  const replanningResults: PlanningResult[] = [];
  
  for (const resultToReplan of machineResults) {
    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑ –∏ –æ–ø–µ—Ä–∞—Ü–∏—é
    const order = allOrders.find(o => o.id === resultToReplan.orderId);
    const operation = order?.operations.find(op => op.id === resultToReplan.operationId);
    
    if (!order || !operation) {
      console.error(`‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–∫–∞–∑ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è ${resultToReplan.id}`);
      continue;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏)
    const currentOperationEnd = new Date(updatedResults.find(r => r.id === resultId)!.plannedEndDate);
    const orderOperations = order.operations.sort((a, b) => a.sequenceNumber - b.sequenceNumber);
    const currentOpIndex = orderOperations.findIndex(op => op.id === operation.id);
    
    let earliestStart = currentOperationEnd;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    if (currentOpIndex > 0) {
      const prevOperation = orderOperations[currentOpIndex - 1];
      const prevResult = updatedResults.find(r => r.operationId === prevOperation.id);
      if (prevResult) {
        const prevEndDate = new Date(prevResult.plannedEndDate);
        if (prevEndDate > earliestStart) {
          earliestStart = prevEndDate;
        }
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –º–∞—à–∏–Ω—É (—Å—Ç–∞–Ω–æ–∫)
    const targetMachine = resultToReplan.machine;
    
    // –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞
    // @ts-ignore - –æ–±—Ö–æ–¥–∏–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
    const machineConfig = planner.machineConfigs.find(mc => mc.name === targetMachine)!;
    const estimatedDuration = (operation.estimatedTime || 0) * Number(order.quantity || 1);
    
    // @ts-ignore - –æ–±—Ö–æ–¥–∏–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
    const availableTime = await planner.findAvailableTimeSlot(
      targetMachine,
      earliestStart,
      estimatedDuration,
      machineSchedule
    );
    
    if (availableTime) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ª–∞–¥–∫–∏
      // @ts-ignore - –æ–±—Ö–æ–¥–∏–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
      const setupTime = planner.determineSetupTime(operation, machineConfig);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const adjustedTime = estimatedDuration / machineConfig.efficiencyFactor;
      const bufferTime = adjustedTime * machineConfig.historicalDowntimeProbability;
      const totalTime = adjustedTime + setupTime + bufferTime;
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
      // @ts-ignore - –æ–±—Ö–æ–¥–∏–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
      const endDate = await planner.calculateEndDate(availableTime, totalTime);
      
      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const replanedResult: PlanningResult = {
        ...resultToReplan,
        plannedStartDate: availableTime.toISOString(),
        plannedEndDate: endDate.toISOString(),
        expectedTimeMinutes: Math.round(adjustedTime),
        setupTimeMinutes: Math.round(setupTime),
        bufferTimeMinutes: Math.round(bufferTime),
        status: 'rescheduled',
        lastRescheduledAt: new Date().toISOString(),
        rescheduledReason: machineChanged ? 
          `–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ —Å–º–µ–Ω—ã —Å—Ç–∞–Ω–∫–∞ (${oldMachine} -> ${machineToUse})` :
          `–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ª–∞–¥–∫–∏ –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${oldMachine}${actualStartTime ? ' –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞' : ''}`
      };
      
      replanningResults.push(replanedResult);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
      const schedule = machineSchedule.get(targetMachine) || [];
      schedule.push({
        start: availableTime,
        end: endDate,
        operationId: operation.id
      });
      schedule.sort((a, b) => a.start.getTime() - b.start.getTime());
      machineSchedule.set(targetMachine, schedule);
      
      console.log(`‚úÖ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è ${operation.sequenceNumber} –∑–∞–∫–∞–∑–∞ ${order.drawingNumber} –Ω–∞ ${availableTime.toLocaleString()} - ${endDate.toLocaleString()}`);
    } else {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª–æ—Ç –¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ${resultToReplan.id}`);
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const finalResults = updatedResults.map(result => {
    const replannedResult = replanningResults.find(rr => rr.id === result.id);
    return replannedResult || result;
  });
  
  const affectedMachines = machineChanged ? `${oldMachine} –∏ ${machineToUse}` : oldMachine;
  console.log(`üéÜ –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ ${replanningResults.length} –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å—Ç–∞–Ω–∫–∞—Ö ${affectedMachines}`);
  
  return {
    updatedResults: finalResults,
    replanningResults,
    affectedMachine: machineToUse // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞–Ω–æ–∫ –∫–∞–∫ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–π
  };
}
