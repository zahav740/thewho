import { createClient } from '@supabase/supabase-js';
import { v4 as uuidv4 } from 'uuid';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ UUID
const isUUID = (str: string): boolean => {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(str);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ UUID –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
const ensureUUID = (id: string): string => {
  if (isUUID(id)) {
    return id; // –ï—Å–ª–∏ —É–∂–µ UUID, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  }
  
  // –ï—Å–ª–∏ –Ω–µ UUID, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π UUID
  return uuidv4();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–∞—Ö
const migrateOrderIds = (orders: any[]): { orders: any[], idMapping: Record<string, string> } => {
  const idMapping: Record<string, string> = {}; // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ä—ã—Ö ID –∫ –Ω–æ–≤—ã–º UUID
  
  console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é ${orders.length} –∑–∞–∫–∞–∑–æ–≤...`);
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–∫–∞–∑—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const migratedOrders = orders.map((order, orderIndex) => {
    const oldOrderId = order.id;
    const newOrderId = isUUID(oldOrderId) ? oldOrderId : uuidv4();
    
    console.log(`üì¶ –ó–∞–∫–∞–∑ ${orderIndex + 1}: ${oldOrderId} -> ${newOrderId}`);
    
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
    if (oldOrderId !== newOrderId) {
      idMapping[oldOrderId] = newOrderId;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    const migratedOperations = (order.operations || []).map((operation: any, opIndex: number) => {
      const oldOpId = operation.id;
      const newOpId = isUUID(oldOpId) ? oldOpId : uuidv4();
      
      console.log(`  ‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è ${opIndex + 1}: ${oldOpId} -> ${newOpId}`);
      
      if (oldOpId !== newOpId) {
        idMapping[oldOpId] = newOpId;
      }
      
      return {
        ...operation,
        id: newOpId,
        orderId: newOrderId // –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π ID –∑–∞–∫–∞–∑–∞
      };
    });
    
    return {
      ...order,
      id: newOrderId,
      operations: migratedOperations
    };
  });
  
  console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ ${Object.keys(idMapping).length} –Ω–æ–≤—ã—Ö UUID`);
  
  return { orders: migratedOrders, idMapping };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
const migratePlanningResults = (planningResults: any[], idMapping: Record<string, string>): any[] => {
  console.log(`üìã –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é ${planningResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...`);
  
  return planningResults.map((result, index) => {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ID –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const oldResultId = result.id;
    const newResultId = isUUID(oldResultId) ? oldResultId : uuidv4();
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ ID –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –º—ç–ø–ø–∏–Ω–≥–∞
    const oldOrderId = result.orderId;
    const oldOperationId = result.operationId;
    
    const newOrderId = idMapping[oldOrderId] || (isUUID(oldOrderId) ? oldOrderId : uuidv4());
    const newOperationId = idMapping[oldOperationId] || (isUUID(oldOperationId) ? oldOperationId : uuidv4());
    
    console.log(`  üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${index + 1}:`);
    console.log(`    Result: ${oldResultId} -> ${newResultId}`);
    console.log(`    Order: ${oldOrderId} -> ${newOrderId}`);
    console.log(`    Operation: ${oldOperationId} -> ${newOperationId}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º—ç–ø–ø–∏–Ω–≥ –¥–ª—è –Ω–æ–≤—ã—Ö ID
    if (oldOrderId !== newOrderId && !idMapping[oldOrderId]) {
      idMapping[oldOrderId] = newOrderId;
    }
    if (oldOperationId !== newOperationId && !idMapping[oldOperationId]) {
      idMapping[oldOperationId] = newOperationId;
    }
    
    return {
      ...result,
      id: newResultId,
      orderId: newOrderId,
      operationId: newOperationId
    };
  });
};

// Initialize Supabase client
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://kukqacmzfmzepdfddppl.supabase.co';
const supabaseKey = import.meta.env.VITE_SUPABASE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt1a3FhY216Zm16ZXBkZmRkcHBsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4Nzk4MTUsImV4cCI6MjA2MzQ1NTgxNX0.Zsjy_i87wyAxfBN0cGuLEvaF7-vk0tJ8Jo1lNOod74w'; // –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ

export const supabase = createClient(supabaseUrl, supabaseKey);

// –¢–∏–ø—ã —Ç–∞–±–ª–∏—Ü –¥–ª—è Supabase (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ)
export type SupabaseOrder = {
  id: string;
  name?: string; // –ò–º—è –∑–∞–∫–∞–∑–∞
  client_name?: string; // –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
  drawing_number: string;
  deadline: string;
  quantity: number;
  priority: number;
  pdf_url?: string;
  created_at?: string;
  updated_at?: string;
};

export type SupabaseOperation = {
  id: string;
  order_id: string;
  sequence_number: number;
  machine?: string;
  operation_type: "3-axis" | "4-axis" | "turning" | "milling";
  estimated_time: number;
  completed_units?: number;
  actual_time?: number;
  status: "pending" | "in-progress" | "completed";
  operators?: string[];
  created_at?: string;
  updated_at?: string;
};

export type SupabasePlanning = {
  id: string;
  order_id: string;
  operation_id: string;
  machine: string;
  planned_start_date: string;
  planned_end_date: string;
  quantity_assigned: number;
  remaining_quantity: number;
  expected_time_minutes: number;
  setup_time_minutes: number;
  buffer_time_minutes: number;
  status: 'planned' | 'in-progress' | 'completed' | 'rescheduled';
  last_rescheduled_at?: string;
  rescheduled_reason?: string;
  created_at?: string;
  updated_at?: string;
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
export const orderService = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
  async getAllOrders() {
    const { data, error } = await supabase
      .from('orders')
      .select('*')
      .order('priority', { ascending: true })
      .order('deadline', { ascending: true });
    
    if (error) throw error;
    return data;
  },
  
  // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
  async upsertOrder(order: SupabaseOrder) {
    const { data, error } = await supabase
      .from('orders')
      .upsert(order, { onConflict: 'id' })
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },
  
  // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–∞–∫–µ—Ç–æ–º
  async upsertOrders(orders: SupabaseOrder[]) {
    const { data, error } = await supabase
      .from('orders')
      .upsert(orders, { onConflict: 'id' })
      .select();
    
    if (error) throw error;
    return data;
  },
  
  // –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑
  async deleteOrder(id: string) {
    const { error } = await supabase
      .from('orders')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
    return true;
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
export const operationService = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  async getAllOperations() {
    const { data, error } = await supabase
      .from('operations')
      .select('*')
      .order('sequence_number', { ascending: true });
    
    if (error) throw error;
    return data;
  },
  
  // –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ ID –∑–∞–∫–∞–∑–∞
  async getOperationsByOrderId(orderId: string) {
    const { data, error } = await supabase
      .from('operations')
      .select('*')
      .eq('order_id', orderId)
      .order('sequence_number', { ascending: true });
    
    if (error) throw error;
    return data;
  },
  
  // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
  async upsertOperation(operation: SupabaseOperation) {
    const { data, error } = await supabase
      .from('operations')
      .upsert(operation, { onConflict: 'id' })
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },
  
  // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–æ–º
  async upsertOperations(operations: SupabaseOperation[]) {
    const { data, error } = await supabase
      .from('operations')
      .upsert(operations, { onConflict: 'id' })
      .select();
    
    if (error) throw error;
    return data;
  },
  
  // –£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
  async deleteOperation(id: string) {
    const { error } = await supabase
      .from('operations')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
    return true;
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export const planningService = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  async getAllPlanningResults() {
    const { data, error } = await supabase
      .from('planning_results')
      .select('*')
      .order('planned_start_date', { ascending: true });
    
    if (error) throw error;
    return data;
  },
  
  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ ID –∑–∞–∫–∞–∑–∞
  async getPlanningByOrderId(orderId: string) {
    const { data, error } = await supabase
      .from('planning_results')
      .select('*')
      .eq('order_id', orderId)
      .order('planned_start_date', { ascending: true });
    
    if (error) throw error;
    return data;
  },
  
  // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  async upsertPlanning(planning: SupabasePlanning) {
    const { data, error } = await supabase
      .from('planning_results')
      .upsert(planning, { onConflict: 'id' })
      .select()
      .single();
    
    if (error) throw error;
    return data;
  },
  
  // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–æ–º
  async upsertPlanningResults(planningResults: SupabasePlanning[]) {
    const { data, error } = await supabase
      .from('planning_results')
      .upsert(planningResults, { onConflict: 'id' })
      .select();
    
    if (error) throw error;
    return data;
  },
  
  // –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  async deletePlanning(id: string) {
    const { error } = await supabase
      .from('planning_results')
      .delete()
      .eq('id', id);
    
    if (error) throw error;
    return true;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Supabase
export const syncWithSupabase = async (
  orders: any[], 
  planningResults: any[],
  accessToken?: string
) => {
  try {
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (accessToken) {
      supabase.auth.setSession({
        access_token: accessToken,
        refresh_token: ''
      } as any);
    }

    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π Supabase...');
    console.log(`üì¶ –ó–∞–∫–∞–∑–æ–≤: ${orders.length}, –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${planningResults.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if (!orders || orders.length === 0) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    }
    
    if (!planningResults || planningResults.length === 0) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    }
    const { orders: migratedOrders, idMapping } = migrateOrderIds(orders);
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º ID –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const migratedPlanningResults = migratePlanningResults(planningResults, idMapping);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è Supabase
    const supabaseOrders: SupabaseOrder[] = migratedOrders.map(order => ({
      id: order.id,
      name: order.name || order.drawingNumber, // –ò—Å–ø–æ–ª—å–∑—É–µ–º name –∏–ª–∏ drawingNumber
      client_name: order.clientName || order.drawingNumber, // –ò—Å–ø–æ–ª—å–∑—É–µ–º clientName –∏–ª–∏ drawingNumber
      drawing_number: order.drawingNumber,
      deadline: order.deadline,
      quantity: order.quantity,
      priority: order.priority,
      pdf_url: order.pdfUrl
    }));
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Supabase
    const supabaseOperations: SupabaseOperation[] = [];
    for (const order of migratedOrders) {
      for (const operation of order.operations) {
        supabaseOperations.push({
          id: operation.id,
          order_id: order.id,
          sequence_number: operation.sequenceNumber,
          machine: operation.machine,
          operation_type: operation.operationType,
          estimated_time: operation.estimatedTime,
          completed_units: operation.completedUnits,
          actual_time: operation.actualTime,
          status: operation.status,
          operators: operation.operators || []
        });
      }
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Supabase
    const supabasePlanningResults: SupabasePlanning[] = migratedPlanningResults.map(result => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ UUID –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      const resultId = isUUID(result.id) ? result.id : uuidv4();
      const orderId = isUUID(result.orderId) ? result.orderId : uuidv4();
      const operationId = isUUID(result.operationId) ? result.operationId : uuidv4();
      
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ UUID –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:`);
      console.log(`  Result ID: ${result.id} -> ${resultId} (valid: ${isUUID(resultId)})`);
      console.log(`  Order ID: ${result.orderId} -> ${orderId} (valid: ${isUUID(orderId)})`);
      console.log(`  Operation ID: ${result.operationId} -> ${operationId} (valid: ${isUUID(operationId)})`);
      
      return {
        id: resultId,
        order_id: orderId,
        operation_id: operationId,
        machine: result.machine,
        planned_start_date: result.plannedStartDate,
        planned_end_date: result.plannedEndDate,
        quantity_assigned: result.quantityAssigned,
        remaining_quantity: result.remainingQuantity,
        expected_time_minutes: result.expectedTimeMinutes,
        setup_time_minutes: result.setupTimeMinutes,
        buffer_time_minutes: result.bufferTimeMinutes,
        status: result.status,
        last_rescheduled_at: result.lastRescheduledAt,
        rescheduled_reason: result.rescheduledReason
      };
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Supabase
    await orderService.upsertOrders(supabaseOrders);
    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${supabaseOrders.length} –∑–∞–∫–∞–∑–æ–≤`);
    
    await operationService.upsertOperations(supabaseOperations);
    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${supabaseOperations.length} –æ–ø–µ—Ä–∞—Ü–∏–π`);
    
    await planningService.upsertPlanningResults(supabasePlanningResults);
    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${supabasePlanningResults.length} –∑–∞–ø–∏—Å–µ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è`);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π Supabase –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    return {
      success: true,
      ordersCount: supabaseOrders.length,
      operationsCount: supabaseOperations.length,
      planningCount: supabasePlanningResults.length,
      migratedOrders,
      migratedPlanningResults
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Supabase:', error);
    return {
      success: false,
      error: error
    };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase
export const loadFromSupabase = async (accessToken?: string) => {
  try {
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (accessToken) {
      supabase.auth.setSession({
        access_token: accessToken,
        refresh_token: ''
      } as any);
    }

    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã Supabase...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const [ordersData, operationsData, planningData] = await Promise.all([
      orderService.getAllOrders(),
      operationService.getAllOperations(),
      planningService.getAllPlanningResults()
    ]);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const orders = ordersData.map(order => ({
      id: order.id,
      drawingNumber: order.drawing_number,
      name: order.name || order.drawing_number,
      clientName: order.client_name || order.drawing_number,
      deadline: order.deadline,
      quantity: order.quantity,
      priority: order.priority,
      pdfUrl: order.pdf_url,
      operations: [] // –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ
    }));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫ –∑–∞–∫–∞–∑–∞–º
    for (const operation of operationsData) {
      const orderIndex = orders.findIndex(o => o.id === operation.order_id);
      if (orderIndex !== -1) {
        if (!orders[orderIndex].operations) {
          orders[orderIndex].operations = [];
        }
        
        orders[orderIndex].operations.push({
          id: operation.id,
          orderId: operation.order_id,
          sequenceNumber: operation.sequence_number,
          machine: operation.machine,
          operationType: operation.operation_type,
          estimatedTime: operation.estimated_time,
          completedUnits: operation.completed_units,
          actualTime: operation.actual_time,
          status: operation.status,
          operators: operation.operators || []
        });
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    for (const order of orders) {
      if (order.operations) {
        order.operations.sort((a, b) => a.sequenceNumber - b.sequenceNumber);
      }
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const planningResults = planningData.map(planning => ({
      id: planning.id,
      orderId: planning.order_id,
      operationId: planning.operation_id,
      machine: planning.machine,
      plannedStartDate: planning.planned_start_date,
      plannedEndDate: planning.planned_end_date,
      quantityAssigned: planning.quantity_assigned,
      remainingQuantity: planning.remaining_quantity,
      expectedTimeMinutes: planning.expected_time_minutes,
      setupTimeMinutes: planning.setup_time_minutes,
      bufferTimeMinutes: planning.buffer_time_minutes,
      status: planning.status,
      lastRescheduledAt: planning.last_rescheduled_at,
      rescheduledReason: planning.rescheduled_reason
    }));
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${orders.length} –∑–∞–∫–∞–∑–æ–≤, ${operationsData.length} –æ–ø–µ—Ä–∞—Ü–∏–π, ${planningResults.length} –∑–∞–ø–∏—Å–µ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è`);
    
    return {
      success: true,
      orders,
      planningResults
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase:', error);
    return {
      success: false,
      error: error
    };
  }
};
