// –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
const testData = {
  // –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —Å –ù–ò–ó–ö–ò–ú –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
  overdueOrder1: {
    id: "test-overdue-1",
    drawingNumber: "BM14362A",
    deadline: "2025-05-04T14:00:00.000Z", // 04.05.2025 - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
    priority: 3, // –ù–ò–ó–ö–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    quantity: 10,
    operations: [
      { id: "op-1-1", sequenceNumber: 1, operationType: "3-axis", estimatedTime: 60 },
      { id: "op-1-2", sequenceNumber: 2, operationType: "turning", estimatedTime: 45 }
    ]
  },
  
  // –ï—â—ë –æ–¥–∏–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —Å –ù–ò–ó–ö–ò–ú –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (–±–æ–ª—å—à–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∞)
  overdueOrder2: {
    id: "test-overdue-2",
    drawingNumber: "OLD123",
    deadline: "2025-04-15T14:00:00.000Z", // 15.04.2025 - –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
    priority: 3, // –ù–ò–ó–ö–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    quantity: 5,
    operations: [
      { id: "op-2-1", sequenceNumber: 1, operationType: "milling", estimatedTime: 30 }
    ]
  },
  
  // –û–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑ —Å –ù–ò–ó–ö–ò–ú –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
  normalOrder1: {
    id: "test-normal-1",
    drawingNumber: "NORM123",
    deadline: "2025-06-15T14:00:00.000Z", // 15.06.2025 - –≤ –±—É–¥—É—â–µ–º
    priority: 3, // –ù–ò–ó–ö–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    quantity: 5,
    operations: [
      { id: "op-3-1", sequenceNumber: 1, operationType: "milling", estimatedTime: 30 }
    ]
  },
  
  // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  highPriorityOrder: {
    id: "test-high-priority",
    drawingNumber: "URGENT456",
    deadline: "2025-07-01T14:00:00.000Z", // 01.07.2025 - –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º
    priority: 1, // –í–´–°–û–ö–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    quantity: 3,
    operations: [
      { id: "op-4-1", sequenceNumber: 1, operationType: "4-axis", estimatedTime: 90 }
    ]
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
function preprocessOrdersForPlanning(orders) {
  const currentDate = new Date();
  const processedOrders = [];
  
  console.log('\nüìã === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ö–ê–ó–û–í ===');
  console.log(`üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${currentDate.toLocaleDateString('ru-RU')} (${currentDate.toISOString()})`);
  console.log(`üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${orders.length}`);
  
  for (const order of orders) {
    let processedOrder = { ...order };
    const deadline = new Date(order.deadline);
    
    console.log(`\nüîç –ó–∞–∫–∞–∑ ${order.drawingNumber}:`);
    console.log(`   üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleDateString('ru-RU')}`);
    console.log(`   ‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${order.priority}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –ª–∏ –¥–µ–¥–ª–∞–π–Ω
    if (deadline < currentDate) {
      const daysOverdue = Math.ceil((currentDate.getTime() - deadline.getTime()) / (1000 * 60 * 60 * 24));
      console.warn(`‚ö†Ô∏è –ü–†–û–°–†–û–ß–ï–ù–ù–´–ô –î–ï–î–õ–ê–ô–ù: –ó–∞–∫–∞–∑ ${order.drawingNumber} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ ${daysOverdue} –¥–Ω–µ–π!`);
      
      // –ù–ï –ø–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π!
      console.log(`üìå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º: ${processedOrder.priority} (–ø—Ä–æ—Å—Ä–æ—á–∫–∞ –Ω–µ –º–µ–Ω—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–ø–µ–Ω—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
      processedOrder.daysOverdue = daysOverdue;
      processedOrder.isOverdue = true;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω
      const newDeadline = calculateRealisticDeadline(processedOrder, currentDate);
      console.log(`üìÖ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω —Å ${deadline.toLocaleDateString('ru-RU')} –Ω–∞ ${newDeadline.toLocaleDateString('ru-RU')}`);
      processedOrder.deadline = newDeadline.toISOString();
      
      console.log(`üö® –°–æ–∑–¥–∞–Ω –∞–ª–µ—Ä—Ç: –ó–∞–∫–∞–∑ ${order.drawingNumber} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ ${daysOverdue} –¥–Ω–µ–π`);
    } else {
      const daysUntilDeadline = Math.ceil((deadline.getTime() - currentDate.getTime()) / (1000 * 60 * 60 * 24));
      console.log(`‚úÖ –î–µ–¥–ª–∞–π–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (—á–µ—Ä–µ–∑ ${daysUntilDeadline} –¥–Ω–µ–π)`);
      
      // –î–ª—è –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
      processedOrder.daysOverdue = 0;
      processedOrder.isOverdue = false;
    }
    
    processedOrders.push(processedOrder);
  }
  
  console.log(`\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedOrders.length} –∑–∞–∫–∞–∑–æ–≤`);
  return processedOrders;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
function sortOrdersByPriorityAndDeadline(orders) {
  console.log('\nüîÑ === –°–û–†–¢–ò–†–û–í–ö–ê –ó–ê–ö–ê–ó–û–í ===');
  console.log('üìã –õ–æ–≥–∏–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:');
  console.log('   1. –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–±–æ–ª—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = –≤—ã—à–µ –≤–∞–∂–Ω–æ—Å—Ç—å)');
  console.log('   2. –í–Ω—É—Ç—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–∫–∏');
  console.log('   3. –ó–∞—Ç–µ–º: –æ–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ –¥–µ–¥–ª–∞–π–Ω—É (—Ä–∞–Ω—å—à–µ = –≤—ã—à–µ –≤–∞–∂–Ω–æ—Å—Ç—å)');
  
  const sorted = orders.sort((a, b) => {
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–±–æ–ª—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç = –≤—ã—à–µ –≤–∞–∂–Ω–æ—Å—Ç—å)
    if (a.priority !== b.priority) {
      return b.priority - a.priority;
    }
    
    // 2. –í–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞
    const aOverdue = a.isOverdue || false;
    const bOverdue = b.isOverdue || false;
    const aDaysOverdue = a.daysOverdue || 0;
    const bDaysOverdue = b.daysOverdue || 0;
    
    // –ï—Å–ª–∏ –æ–¥–∏–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, –∞ –¥—Ä—É–≥–æ–π –Ω–µ—Ç - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º
    if (aOverdue && !bOverdue) return -1;
    if (!aOverdue && bOverdue) return 1;
    
    // –ï—Å–ª–∏ –æ–±–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ (–±–æ–ª—å—à–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∞ = –≤—ã—à–µ)
    if (aOverdue && bOverdue) {
      return bDaysOverdue - aDaysOverdue; // –û—Ç –±–æ–ª—å—à–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –∫ –º–µ–Ω—å—à–µ–π
    }
    
    // 3. –ï—Å–ª–∏ –æ–±–∞ –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–µ–¥–ª–∞–π–Ω—É (—Ä–∞–Ω—å—à–µ = –≤—ã—à–µ –≤–∞–∂–Ω–æ—Å—Ç—å)
    return new Date(a.deadline).getTime() - new Date(b.deadline).getTime();
  });
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:');
  sorted.forEach((order, index) => {
    const overdue = order.isOverdue || false;
    const daysOverdue = order.daysOverdue || 0;
    const overdueInfo = overdue ? ` (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ ${daysOverdue} –¥–Ω–µ–π)` : '';
    const deadline = new Date(order.deadline).toLocaleDateString('ru-RU');
    
    console.log(`   ${index + 1}. ${order.drawingNumber} - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ${order.priority}, –¥–µ–¥–ª–∞–π–Ω ${deadline}${overdueInfo}`);
  });
  
  return sorted;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
function calculateRealisticDeadline(order, fromDate) {
  const totalTimeMinutes = order.operations.reduce((total, op) => {
    return total + (op.estimatedTime || 0) * order.quantity;
  }, 0);
  
  const bufferedTimeMinutes = totalTimeMinutes * 1.3 + (order.operations.length * 60);
  const workingDaysNeeded = Math.ceil(bufferedTimeMinutes / 480);
  const newDeadline = new Date(fromDate);
  const calendarDaysToAdd = Math.ceil(workingDaysNeeded * 1.4) + 2;
  newDeadline.setDate(newDeadline.getDate() + calendarDaysToAdd);
  
  return newDeadline;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
console.log('üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò');

const testOrders = [
  testData.overdueOrder1,
  testData.overdueOrder2,
  testData.normalOrder1,
  testData.highPriorityOrder
];

// 1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
const processedOrders = preprocessOrdersForPlanning(testOrders);

// 2. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
const sortedOrders = sortOrdersByPriorityAndDeadline(processedOrders);

console.log('\nüìä === –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===');
console.log('\nüéØ –û–∂–∏–¥–∞–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
console.log('1. URGENT456 (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1, –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω)');
console.log('2. OLD123 (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ ~34 –¥–Ω—è)');
console.log('3. BM14362A (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ ~15 –¥–Ω–µ–π)');
console.log('4. NORM123 (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3, –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω)');

console.log('\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
const expectedOrder = ['URGENT456', 'OLD123', 'BM14362A', 'NORM123'];
const actualOrder = sortedOrders.map(order => order.drawingNumber);

console.log('\nüîç === –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===');
console.log('–û–∂–∏–¥–∞–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫:', expectedOrder);
console.log('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫:', actualOrder);

const isCorrect = JSON.stringify(expectedOrder) === JSON.stringify(actualOrder);
console.log(isCorrect ? '‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!' : '‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!');
