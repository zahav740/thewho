/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
 */

// –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
fetch('http://localhost:5100/api/health')
  .then(response => response.json())
  .then(data => console.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω:', data))
  .catch(error => console.error('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error));

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (GET)
fetch('http://localhost:5100/api/operators')
  .then(response => {
    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', response.status);
    if (response.ok) {
      return response.json();
    } else {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
  })
  .then(data => console.log('‚úÖ API –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç:', data))
  .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ API –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:', error));

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (POST)
fetch('http://localhost:5100/api/operators', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    name: 'TestOperator',
    operatorType: 'BOTH'
  })
})
  .then(response => {
    console.log('üì° –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', response.status);
    if (response.ok) {
      return response.json();
    } else {
      return response.text().then(text => {
        throw new Error(`HTTP ${response.status}: ${text}`);
      });
    }
  })
  .then(data => console.log('‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–µ–Ω:', data))
  .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', error));
