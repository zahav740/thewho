/**
 * @file: test-pdf-backend.js
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PDF —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ backend
 * @created: 2025-06-21
 */

const fs = require('fs');
const path = require('path');

async function testPdfBackend() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF Backend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...\n');

  const baseUrl = 'http://localhost:5100';

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend...');
    try {
      const response = await fetch(`${baseUrl}/api/health`);
      if (response.ok) {
        console.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5100');
      } else {
        console.log('‚ùå Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, —Å—Ç–∞—Ç—É—Å:', response.status);
        return;
      }
    } catch (error) {
      console.log('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω: npm run start:dev');
      return;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PDF —Ñ–∞–π–ª–æ–≤
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ PDF —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ uploads...');
    const pdfDir = path.join(process.cwd(), 'backend', 'uploads', 'pdf');
    const pdfDirAlt = path.join(process.cwd(), 'uploads', 'pdf');

    let foundPdfDir = null;
    let pdfFiles = [];

    if (fs.existsSync(pdfDir)) {
      foundPdfDir = pdfDir;
      pdfFiles = fs.readdirSync(pdfDir).filter(f => f.endsWith('.pdf'));
    } else if (fs.existsSync(pdfDirAlt)) {
      foundPdfDir = pdfDirAlt;
      pdfFiles = fs.readdirSync(pdfDirAlt).filter(f => f.endsWith('.pdf'));
    }

    if (!foundPdfDir) {
      console.log('‚ùå –ü–∞–ø–∫–∞ PDF –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—É—Ç–∏:');
      console.log('  -', pdfDir);
      console.log('  -', pdfDirAlt);
      return;
    }

    console.log('‚úÖ –ü–∞–ø–∫–∞ PDF –Ω–∞–π–¥–µ–Ω–∞:', foundPdfDir);
    console.log('üìÅ PDF —Ñ–∞–π–ª—ã:', pdfFiles.length > 0 ? pdfFiles : '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤');

    if (pdfFiles.length === 0) {
      console.log('\n‚ö†Ô∏è PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª...');
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª
      const testPdfContent = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Resources <<
/Font <<
/F1 4 0 R
>>
>>
/Contents 5 0 R
>>
endobj

4 0 obj
<<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica
>>
endobj

5 0 obj
<<
/Length 44
>>
stream
BT
/F1 12 Tf
72 720 Td
(Test PDF Document) Tj
ET
endstream
endobj

xref
0 6
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000279 00000 n 
0000000351 00000 n 
trailer
<<
/Size 6
/Root 1 0 R
>>
startxref
445
%%EOF`;

      const testFileName = 'test-pdf-document.pdf';
      const testFilePath = path.join(foundPdfDir, testFileName);
      
      fs.writeFileSync(testFilePath, testPdfContent);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π PDF —Å–æ–∑–¥–∞–Ω:', testFileName);
      pdfFiles.push(testFileName);
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ PDF —Ñ–∞–π–ª–∞–º
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ PDF —Ñ–∞–π–ª–∞–º...');
    
    for (const fileName of pdfFiles.slice(0, 3)) { // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
      console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ${fileName}`);
      
      try {
        const response = await fetch(`${baseUrl}/api/orders/pdf/${fileName}`);
        
        console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status} ${response.statusText}`);
        console.log(`   Content-Type: ${response.headers.get('content-type')}`);
        console.log(`   Content-Length: ${response.headers.get('content-length')}`);
        
        if (response.ok) {
          console.log('   ‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω');
        } else {
          console.log('   ‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      }
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...');
    
    if (pdfFiles.length > 0) {
      try {
        const response = await fetch(`${baseUrl}/api/orders/pdf/${pdfFiles[0]}`, {
          method: 'HEAD'
        });
        
        const corsHeaders = {
          'Access-Control-Allow-Origin': response.headers.get('access-control-allow-origin'),
          'Access-Control-Allow-Methods': response.headers.get('access-control-allow-methods'),
          'Access-Control-Allow-Headers': response.headers.get('access-control-allow-headers'),
        };
        
        console.log('   CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏:', corsHeaders);
        
        if (corsHeaders['Access-Control-Allow-Origin']) {
          console.log('   ‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        } else {
          console.log('   ‚ö†Ô∏è CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        }
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS: ${error.message}`);
      }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...');
    
    if (pdfFiles.length > 0) {
      try {
        const response = await fetch(`${baseUrl}/api/orders/debug/pdf/${pdfFiles[0]}`);
        
        if (response.ok) {
          const debugInfo = await response.json();
          console.log('   ‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
          console.log('   üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:', debugInfo.foundFiles?.length || 0);
        } else {
          console.log('   ‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error.message}`);
      }
    }

    console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('=====================================');
    console.log('Backend:', '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç');
    console.log('PDF –ø–∞–ø–∫–∞:', foundPdfDir ? '‚úÖ –ù–∞–π–¥–µ–Ω–∞' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞');
    console.log('PDF —Ñ–∞–π–ª—ã:', pdfFiles.length > 0 ? `‚úÖ ${pdfFiles.length} —Ñ–∞–π–ª–æ–≤` : '‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤');
    
    if (pdfFiles.length > 0) {
      console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:');
      console.log(`   URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${baseUrl}/api/orders/pdf/${pdfFiles[0]}`);
      console.log('   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PdfDebugViewer –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testPdfBackend().then(() => {
  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}).catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
});
