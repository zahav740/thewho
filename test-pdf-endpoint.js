/**
 * @file: test-pdf-endpoint.js
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PDF endpoint
 * @created: 2025-06-21
 */

const http = require('http');
const path = require('path');

const BACKEND_URL = 'localhost';
const BACKEND_PORT = 5100;
const PDF_FILENAME = '1750497060623-385439311.pdf';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PDF endpoint
function testPdfEndpoint() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF endpoint...');
  console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: http://${BACKEND_URL}:${BACKEND_PORT}/api/orders/pdf/${PDF_FILENAME}`);
  
  const options = {
    hostname: BACKEND_URL,
    port: BACKEND_PORT,
    path: `/api/orders/pdf/${PDF_FILENAME}`,
    method: 'GET',
    headers: {
      'Accept': 'application/pdf',
      'User-Agent': 'Test-PDF-Client/1.0'
    }
  };

  const req = http.request(options, (res) => {
    console.log(`üìä Status Code: ${res.statusCode}`);
    console.log(`üìä Headers:`, res.headers);

    if (res.statusCode === 200) {
      console.log('‚úÖ PDF endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ–ª—É—á–µ–Ω PDF —Ñ–∞–π–ª.');
      
      let dataLength = 0;
      res.on('data', (chunk) => {
        dataLength += chunk.length;
      });
      
      res.on('end', () => {
        console.log(`üìä –†–∞–∑–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ PDF: ${dataLength} –±–∞–π—Ç`);
        console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      });
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ ${res.statusCode}:`);
      
      let errorData = '';
      res.on('data', (chunk) => {
        errorData += chunk.toString();
      });
      
      res.on('end', () => {
        console.log('‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorData);
      });
    }
  });

  req.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5100');
  });

  req.end();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ backend
function checkBackendStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend...');
  
  const options = {
    hostname: BACKEND_URL,
    port: BACKEND_PORT,
    path: '/api/health',
    method: 'GET',
    timeout: 5000
  };

  const req = http.request(options, (res) => {
    if (res.statusCode === 200) {
      console.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ PDF...\n');
      testPdfEndpoint();
    } else {
      console.log(`‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (status: ${res.statusCode})`);
    }
  });

  req.on('error', (error) => {
    console.error('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    console.error('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend –∫–æ–º–∞–Ω–¥–æ–π: npm run start –∏–ª–∏ npm run dev');
  });

  req.on('timeout', () => {
    console.error('‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend');
    req.destroy();
  });

  req.end();
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ PDF endpoint...\n');
checkBackendStatus();
