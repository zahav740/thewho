/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API shifts
 */

const testApiPort5100 = async () => {
  try {
    console.log('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –Ω–∞ –ø–æ—Ä—Ç—É 5100 ===');
    
    const response = await fetch('http://localhost:5100/api/shifts', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    console.log('GET /api/shifts:', response.status);
    const data = await response.json();
    console.log('–î–∞–Ω–Ω—ã–µ:', data);
    
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ø–æ—Ä—Ç—É 5100:', error.message);
    return false;
  }
};

const testApiPort5101 = async () => {
  try {
    console.log('\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –Ω–∞ –ø–æ—Ä—Ç—É 5101 ===');
    
    const response = await fetch('http://localhost:5101/api/shifts', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    console.log('GET /api/shifts:', response.status);
    const data = await response.json();
    console.log('–î–∞–Ω–Ω—ã–µ:', data);
    
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ø–æ—Ä—Ç—É 5101:', error.message);
    return false;
  }
};

const testPostShift = async (port) => {
  try {
    console.log(`\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST –Ω–∞ –ø–æ—Ä—Ç—É ${port} ===`);
    
    const testData = {
      date: '2025-06-07',
      shiftType: 'DAY',
      machineId: 5,
      operationId: 23,
      drawingNumber: 'C6HP0021A',
      dayShiftQuantity: 10,
      dayShiftOperator: 'Test Operator'
    };
    
    const response = await fetch(`http://localhost:${port}/api/shifts`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData)
    });
    
    console.log(`POST /api/shifts:`, response.status);
    
    if (response.ok) {
      const data = await response.json();
      console.log('–°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å:', data);
    } else {
      const errorData = await response.text();
      console.log('–û—à–∏–±–∫–∞:', errorData);
    }
    
    return response.ok;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ POST –∑–∞–ø—Ä–æ—Å–µ –∫ –ø–æ—Ä—Ç—É ${port}:`, error.message);
    return false;
  }
};

const runTests = async () => {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API shifts...\n');
  
  const port5100Works = await testApiPort5100();
  const port5101Works = await testApiPort5101();
  
  if (port5100Works) {
    await testPostShift(5100);
  }
  
  if (port5101Works) {
    await testPostShift(5101);
  }
  
  console.log('\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===');
  console.log(`–ü–æ—Ä—Ç 5100: ${port5100Works ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}`);
  console.log(`–ü–æ—Ä—Ç 5101: ${port5101Works ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}`);
};

// –î–ª—è Node.js
if (typeof require !== 'undefined') {
  // –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ Node.js, –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å node-fetch
  // npm install node-fetch@2
  try {
    const fetch = require('node-fetch');
    global.fetch = fetch;
    runTests();
  } catch (e) {
    console.log('–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ Node.js —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install node-fetch@2');
  }
} else {
  // –ó–∞–ø—É—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  runTests();
}
