// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase...');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
import { 
  supabase,
  orderService, 
  operationService, 
  planningService,
  machineService,
  alertService
} from './src/utils/supabaseClient.js';

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function testConnection() {
  console.log('\nüîå –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
  
  try {
    const { data, error } = await supabase.from('machines').select('count').single();
    if (error) throw error;
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
async function testTables() {
  console.log('\nüìä –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
  
  const tables = [
    'orders', 'operations', 'planning_results', 
    'shifts', 'setups', 'machines', 'force_majeure', 'alerts'
  ];
  
  for (const table of tables) {
    try {
      const { data, error } = await supabase.from(table).select('*').limit(1);
      if (error) throw error;
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: OK`);
    } catch (error) {
      console.error(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`);
    }
  }
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–∫–æ–≤
async function testMachines() {
  console.log('\nüè≠ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —Å—Ç–∞–Ω–∫–æ–≤...');
  
  try {
    const machines = await machineService.getAllMachines();
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${machines.length} —Å—Ç–∞–Ω–∫–æ–≤:`, machines.map(m => m.name));
    
    if (machines.length === 7) {
      console.log('‚úÖ –í—Å–µ —Å—Ç–∞–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    } else {
      console.warn(`‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å 7 —Å—Ç–∞–Ω–∫–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ ${machines.length}`);
    }
    
    return machines;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–Ω–∫–æ–≤:', error.message);
    return [];
  }
}

// –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
async function testCreateOrder() {
  console.log('\nüìù –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞...');
  
  try {
    const testOrder = {
      id: crypto.randomUUID(),
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑',
      client_name: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
      drawing_number: `TEST-${Date.now()}`,
      deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // +7 –¥–Ω–µ–π
      quantity: 10,
      priority: 2
    };
    
    const createdOrder = await orderService.upsertOrder(testOrder);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', createdOrder.drawing_number);
    
    return createdOrder;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error.message);
    return null;
  }
}

// –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
async function testCreateOperation(orderId) {
  console.log('\n‚öôÔ∏è –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏...');
  
  if (!orderId) {
    console.warn('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - –Ω–µ—Ç ID –∑–∞–∫–∞–∑–∞');
    return null;
  }
  
  try {
    const testOperation = {
      id: crypto.randomUUID(),
      order_id: orderId,
      sequence_number: 1,
      machine: 'Doosan Yashana',
      operation_type: '3-axis',
      estimated_time: 60,
      completed_units: 0,
      status: 'pending',
      operators: ['–¢–µ—Å—Ç–æ–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä']
    };
    
    const createdOperation = await operationService.upsertOperation(testOperation);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', createdOperation.id);
    
    return createdOperation;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error.message);
    return null;
  }
}

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
async function testViews() {
  console.log('\nüîç –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ orders_with_operations
    const { data: ordersView, error: ordersError } = await supabase
      .from('orders_with_operations')
      .select('*')
      .limit(1);
    
    if (ordersError) throw ordersError;
    console.log('‚úÖ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ orders_with_operations: OK');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ planning_details
    const { data: planningView, error: planningError } = await supabase
      .from('planning_details')
      .select('*')
      .limit(1);
    
    if (planningError) throw planningError;
    console.log('‚úÖ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ planning_details: OK');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π:', error.message);
  }
}

// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
async function testFunctions() {
  console.log('\nüîß –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_machine_load_by_day
    const startDate = new Date().toISOString().split('T')[0];
    const endDate = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
    
    const { data, error } = await supabase
      .rpc('get_machine_load_by_day', {
        machine_name: 'Doosan Yashana',
        start_date: startDate,
        end_date: endDate
      });
    
    if (error) throw error;
    console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è get_machine_load_by_day: OK');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é check_planning_conflicts
    const { data: conflictData, error: conflictError } = await supabase
      .rpc('check_planning_conflicts', {
        machine_name: 'Doosan Yashana',
        start_time: new Date().toISOString(),
        end_time: new Date(Date.now() + 4 * 60 * 60 * 1000).toISOString()
      });
    
    if (conflictError) throw conflictError;
    console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è check_planning_conflicts: OK');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π:', error.message);
  }
}

// –¢–µ—Å—Ç 8: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function cleanupTestData(orderId) {
  console.log('\nüßπ –¢–µ—Å—Ç 8: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  if (!orderId) {
    console.warn('‚ö†Ô∏è –ù–µ—á–µ–≥–æ –æ—á–∏—â–∞—Ç—å');
    return;
  }
  
  try {
    await orderService.deleteOrder(orderId);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runAllTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const isConnected = await testConnection();
  if (!isConnected) {
    console.error('üö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
  await testTables();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–∫–∏
  const machines = await testMachines();
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testOrder = await testCreateOrder();
  const testOperation = await testCreateOperation(testOrder?.id);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏
  await testViews();
  await testFunctions();
  
  // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  await cleanupTestData(testOrder?.id);
  
  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log('- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', isConnected ? '‚úÖ' : '‚ùå');
  console.log('- –¢–∞–±–ª–∏—Ü—ã:', '‚úÖ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ)');
  console.log('- –°—Ç–∞–Ω–∫–∏:', machines.length === 7 ? '‚úÖ' : '‚ö†Ô∏è');
  console.log('- CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏:', testOrder ? '‚úÖ' : '‚ùå');
  console.log('- –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è:', '‚úÖ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ)');
  console.log('- –§—É–Ω–∫—Ü–∏–∏:', '‚úÖ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ)');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
window.testSupabase = {
  runAllTests,
  testConnection,
  testTables,
  testMachines,
  testCreateOrder,
  testViews,
  testFunctions
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests();
